/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICarriersProductsServicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List available carriers
        /// </summary>
        /// <remarks>
        /// Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Carrier&gt;</returns>
        List<Carrier> CarriersGet(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0);

        /// <summary>
        /// List available carriers
        /// </summary>
        /// <remarks>
        /// Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Carrier&gt;</returns>
        ApiResponse<List<Carrier>> CarriersGetWithHttpInfo(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0);
        /// <summary>
        /// List all package types
        /// </summary>
        /// <remarks>
        ///           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PackageType&gt;</returns>
        List<PackageType> PackageTypesGet(string productCode, int operationIndex = 0);

        /// <summary>
        /// List all package types
        /// </summary>
        /// <remarks>
        ///           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PackageType&gt;</returns>
        ApiResponse<List<PackageType>> PackageTypesGetWithHttpInfo(string productCode, int operationIndex = 0);
        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        ///           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShippingProduct&gt;</returns>
        List<ShippingProduct> ProductsGet(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        ///           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShippingProduct&gt;</returns>
        ApiResponse<List<ShippingProduct>> ProductsGetWithHttpInfo(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICarriersProductsServicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List available carriers
        /// </summary>
        /// <remarks>
        /// Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Carrier&gt;</returns>
        System.Threading.Tasks.Task<List<Carrier>> CarriersGetAsync(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List available carriers
        /// </summary>
        /// <remarks>
        /// Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Carrier&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Carrier>>> CarriersGetWithHttpInfoAsync(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all package types
        /// </summary>
        /// <remarks>
        ///           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PackageType&gt;</returns>
        System.Threading.Tasks.Task<List<PackageType>> PackageTypesGetAsync(string productCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all package types
        /// </summary>
        /// <remarks>
        ///           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PackageType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackageType>>> PackageTypesGetWithHttpInfoAsync(string productCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        ///           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShippingProduct&gt;</returns>
        System.Threading.Tasks.Task<List<ShippingProduct>> ProductsGetAsync(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        ///           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShippingProduct&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShippingProduct>>> ProductsGetWithHttpInfoAsync(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICarriersProductsServicesApi : ICarriersProductsServicesApiSync, ICarriersProductsServicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CarriersProductsServicesApi : ICarriersProductsServicesApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CarriersProductsServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CarriersProductsServicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarriersProductsServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CarriersProductsServicesApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarriersProductsServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CarriersProductsServicesApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarriersProductsServicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CarriersProductsServicesApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List available carriers Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Carrier&gt;</returns>
        public List<Carrier> CarriersGet(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Carrier>> localVarResponse = CarriersGetWithHttpInfo(receiverCountryCode, senderCountryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List available carriers Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Carrier&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<Carrier>> CarriersGetWithHttpInfo(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'receiverCountryCode' is set
            if (receiverCountryCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'receiverCountryCode' when calling CarriersProductsServicesApi->CarriersGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (senderCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sender_country_code", senderCountryCode));
            }
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "receiver_country_code", receiverCountryCode));

            localVarRequestOptions.Operation = "CarriersProductsServicesApi.CarriersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Carrier>>("/carriers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CarriersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List available carriers Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Carrier&gt;</returns>
        public async System.Threading.Tasks.Task<List<Carrier>> CarriersGetAsync(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Carrier>> localVarResponse = await CarriersGetWithHttpInfoAsync(receiverCountryCode, senderCountryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List available carriers Returns a list of available carriers for your account.  Carriers are retrieved based on own agreements and Shipmondo&#39;s agreements.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiverCountryCode">Receiver country code to be included in the filter.</param>
        /// <param name="senderCountryCode">Sender country code to be included in the filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Carrier&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<Carrier>>> CarriersGetWithHttpInfoAsync(string receiverCountryCode, string senderCountryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'receiverCountryCode' is set
            if (receiverCountryCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'receiverCountryCode' when calling CarriersProductsServicesApi->CarriersGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (senderCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sender_country_code", senderCountryCode));
            }
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "receiver_country_code", receiverCountryCode));

            localVarRequestOptions.Operation = "CarriersProductsServicesApi.CarriersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Carrier>>("/carriers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CarriersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all package types           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PackageType&gt;</returns>
        public List<PackageType> PackageTypesGet(string productCode, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PackageType>> localVarResponse = PackageTypesGetWithHttpInfo(productCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all package types           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PackageType&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<PackageType>> PackageTypesGetWithHttpInfo(string productCode, int operationIndex = 0)
        {
            // verify the required parameter 'productCode' is set
            if (productCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'productCode' when calling CarriersProductsServicesApi->PackageTypesGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_code", productCode));

            localVarRequestOptions.Operation = "CarriersProductsServicesApi.PackageTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PackageType>>("/package_types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PackageTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all package types           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PackageType&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackageType>> PackageTypesGetAsync(string productCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PackageType>> localVarResponse = await PackageTypesGetWithHttpInfoAsync(productCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all package types           Returns a list of package types for a product.            Package types returned can be used when defining parcels in shipment booking.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Code for the product to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PackageType&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<PackageType>>> PackageTypesGetWithHttpInfoAsync(string productCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productCode' is set
            if (productCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'productCode' when calling CarriersProductsServicesApi->PackageTypesGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_code", productCode));

            localVarRequestOptions.Operation = "CarriersProductsServicesApi.PackageTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PackageType>>("/package_types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PackageTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all products           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShippingProduct&gt;</returns>
        public List<ShippingProduct> ProductsGet(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<ShippingProduct>> localVarResponse = ProductsGetWithHttpInfo(id, productCode, senderCountryCode, receiverCountryCode, carrierCode, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all products           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShippingProduct&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<ShippingProduct>> ProductsGetWithHttpInfo(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_code", productCode));
            }
            if (senderCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sender_country_code", senderCountryCode));
            }
            if (receiverCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "receiver_country_code", receiverCountryCode));
            }
            if (carrierCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CarriersProductsServicesApi.ProductsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ShippingProduct>>("/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all products           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShippingProduct&gt;</returns>
        public async System.Threading.Tasks.Task<List<ShippingProduct>> ProductsGetAsync(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<ShippingProduct>> localVarResponse = await ProductsGetWithHttpInfoAsync(id, productCode, senderCountryCode, receiverCountryCode, carrierCode, perPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all products           Returns a list of shipping products and services.            Only products available for the user are returned.            The codes of the products and services are required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the product to be included in the filter. (optional)</param>
        /// <param name="productCode">Code for the product to be included in the filter. (optional)</param>
        /// <param name="senderCountryCode">Country code (ISO Alpha-2) of the sender country to be included in the filter. (optional)</param>
        /// <param name="receiverCountryCode">Country code (ISO Alpha-2) of the receiver country to be included in the filter. (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShippingProduct&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<ShippingProduct>>> ProductsGetWithHttpInfoAsync(int? id = default(int?), string productCode = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string carrierCode = default(string), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_code", productCode));
            }
            if (senderCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sender_country_code", senderCountryCode));
            }
            if (receiverCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "receiver_country_code", receiverCountryCode));
            }
            if (carrierCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CarriersProductsServicesApi.ProductsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ShippingProduct>>("/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
