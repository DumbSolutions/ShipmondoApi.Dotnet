/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Item</returns>
        Item ItemCreate(CreateItemRequest body, int operationIndex = 0);

        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> ItemCreateWithHttpInfo(CreateItemRequest body, int operationIndex = 0);
        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Item</returns>
        Item ItemGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> ItemGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        ///        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Item</returns>
        Item ItemUpdate(int id, UpdateItemRequest body, int operationIndex = 0);

        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        ///        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> ItemUpdateWithHttpInfo(int id, UpdateItemRequest body, int operationIndex = 0);
        /// <summary>
        /// List all items
        /// </summary>
        /// <remarks>
        /// Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Item&gt;</returns>
        List<Item> ItemsGet(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all items
        /// </summary>
        /// <remarks>
        /// Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Item&gt;</returns>
        ApiResponse<List<Item>> ItemsGetWithHttpInfo(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> ItemCreateAsync(CreateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> ItemCreateWithHttpInfoAsync(CreateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> ItemGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> ItemGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        ///        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> ItemUpdateAsync(int id, UpdateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        ///        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> ItemUpdateWithHttpInfoAsync(int id, UpdateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all items
        /// </summary>
        /// <remarks>
        /// Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Item&gt;</returns>
        System.Threading.Tasks.Task<List<Item>> ItemsGetAsync(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all items
        /// </summary>
        /// <remarks>
        /// Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Item&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Item>>> ItemsGetWithHttpInfoAsync(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApi : IItemsApiSync, IItemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemsApi : IItemsApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemsApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ItemsApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an item Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Item</returns>
        public Item ItemCreate(CreateItemRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Item> localVarResponse = ItemCreateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an item Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Item</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Item> ItemCreateWithHttpInfo(CreateItemRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ItemsApi->ItemCreate");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ItemsApi.ItemCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Item>("/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an item Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> ItemCreateAsync(CreateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Item> localVarResponse = await ItemCreateWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an item Creates a new item with the specified information.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Item>> ItemCreateWithHttpInfoAsync(CreateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ItemsApi->ItemCreate");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ItemsApi.ItemCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Item>("/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an item Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Item</returns>
        public Item ItemGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Item> localVarResponse = ItemGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an item Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Item</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Item> ItemGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ItemsApi.ItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Item>("/items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an item Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> ItemGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Item> localVarResponse = await ItemGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an item Returns the details of an item.         Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Item>> ItemGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ItemsApi.ItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Item>("/items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an item        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Item</returns>
        public Item ItemUpdate(int id, UpdateItemRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Item> localVarResponse = ItemUpdateWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an item        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Item</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Item> ItemUpdateWithHttpInfo(int id, UpdateItemRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ItemsApi->ItemUpdate");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ItemsApi.ItemUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Item>("/items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an item        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> ItemUpdateAsync(int id, UpdateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Item> localVarResponse = await ItemUpdateWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an item        Updates the specified item by setting the values of the parameters passed.         Any parameters not provided will be left unchanged.         Updating the **SKU** is not possible.        
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the item that is to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Item>> ItemUpdateWithHttpInfoAsync(int id, UpdateItemRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ItemsApi->ItemUpdate");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ItemsApi.ItemUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Item>("/items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all items Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Item&gt;</returns>
        public List<Item> ItemsGet(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Item>> localVarResponse = ItemsGetWithHttpInfo(id, sku, name, barcode, createdAtMin, createdAtMax, updatedAtMin, updatedAtMax, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all items Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Item&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<Item>> ItemsGetWithHttpInfo(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sku", sku));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (updatedAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_min", updatedAtMin));
            }
            if (updatedAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_max", updatedAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "ItemsApi.ItemsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Item>>("/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all items Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Item&gt;</returns>
        public async System.Threading.Tasks.Task<List<Item>> ItemsGetAsync(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Item>> localVarResponse = await ItemsGetWithHttpInfoAsync(id, sku, name, barcode, createdAtMin, createdAtMax, updatedAtMin, updatedAtMax, perPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all items Returns a list of items.  Items are the products and services that are sold as part of an order. They are created by a unique SKU when an order is placed, through item import, or through the API.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the item that needs to be considered for filter (optional)</param>
        /// <param name="sku">SKU of the item that needs to be considered for filter (optional)</param>
        /// <param name="name">Name of the item that needs to be considered for filter (optional)</param>
        /// <param name="barcode">The barcode value of the item that needs to be considered for filter (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the items to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the items to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Item&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<Item>>> ItemsGetWithHttpInfoAsync(int? id = default(int?), string sku = default(string), string name = default(string), bool? barcode = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sku", sku));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (updatedAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_min", updatedAtMin));
            }
            if (updatedAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_max", updatedAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "ItemsApi.ItemsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Item>>("/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
