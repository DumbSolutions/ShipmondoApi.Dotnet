/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve an End of Day list
        /// </summary>
        /// <remarks>
        /// Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Document</returns>
        Document EndOfDayGet(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0);

        /// <summary>
        /// Retrieve an End of Day list
        /// </summary>
        /// <remarks>
        /// Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> EndOfDayGetWithHttpInfo(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0);
        /// <summary>
        /// Retrieve a waybill
        /// </summary>
        /// <remarks>
        /// Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Document</returns>
        Document WaybillGet(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a waybill
        /// </summary>
        /// <remarks>
        /// Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> WaybillGetWithHttpInfo(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve an End of Day list
        /// </summary>
        /// <remarks>
        /// Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> EndOfDayGetAsync(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an End of Day list
        /// </summary>
        /// <remarks>
        /// Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> EndOfDayGetWithHttpInfoAsync(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a waybill
        /// </summary>
        /// <remarks>
        /// Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> WaybillGetAsync(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a waybill
        /// </summary>
        /// <remarks>
        /// Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> WaybillGetWithHttpInfoAsync(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IDocumentsApiSync, IDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentsApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve an End of Day list Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Document</returns>
        public Document EndOfDayGet(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Document> localVarResponse = EndOfDayGetWithHttpInfo(carrierCode, fromTime, toTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an End of Day list Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Document</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Document> EndOfDayGetWithHttpInfo(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0)
        {
            // verify the required parameter 'carrierCode' is set
            if (carrierCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'carrierCode' when calling DocumentsApi->EndOfDayGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "from_time", fromTime));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "to_time", toTime));

            localVarRequestOptions.Operation = "DocumentsApi.EndOfDayGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Document>("/documents/end_of_day", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndOfDayGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an End of Day list Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> EndOfDayGetAsync(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Document> localVarResponse = await EndOfDayGetWithHttpInfoAsync(carrierCode, fromTime, toTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an End of Day list Returns an End of Day list for a specific carrier, with all shipments set to be picked up in the selected time.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code of the carrier you want to retrieve the list for.</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the end of day list. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the end of day list. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Document>> EndOfDayGetWithHttpInfoAsync(string carrierCode, DateTime fromTime, DateTime toTime, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'carrierCode' is set
            if (carrierCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'carrierCode' when calling DocumentsApi->EndOfDayGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "from_time", fromTime));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "to_time", toTime));

            localVarRequestOptions.Operation = "DocumentsApi.EndOfDayGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Document>("/documents/end_of_day", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndOfDayGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a waybill Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Document</returns>
        public Document WaybillGet(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Document> localVarResponse = WaybillGetWithHttpInfo(carrierCode, bagQuantity, fromTime, toTime, containerQuantity, productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a waybill Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Document</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Document> WaybillGetWithHttpInfo(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'carrierCode' is set
            if (carrierCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'carrierCode' when calling DocumentsApi->WaybillGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "bag_quantity", bagQuantity));
            if (containerQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "container_quantity", containerQuantity));
            }
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "from_time", fromTime));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "to_time", toTime));
            if (productId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            }

            localVarRequestOptions.Operation = "DocumentsApi.WaybillGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Document>("/documents/waybill", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WaybillGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a waybill Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> WaybillGetAsync(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Document> localVarResponse = await WaybillGetWithHttpInfoAsync(carrierCode, bagQuantity, fromTime, toTime, containerQuantity, productId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a waybill Returns a waybill for letter products, such as PostNord Tracked and Untracked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter</param>
        /// <param name="bagQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;Required for Deutsche Post, but is only used if an open order is being closed&lt;/li&gt;</param>
        /// <param name="fromTime">\&quot;From\&quot; timestamp for the waybill document. Examples: * 2018-06-19T11:00:00.305+02:00 * 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00 </param>
        /// <param name="toTime">\&quot;To\&quot; timestamp for the waybill document. Examples: * 2018-06-20T11:00:00.305+02:00 * 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00 </param>
        /// <param name="containerQuantity">Quantity of bags to be declared &lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Required for PostNord&lt;/li&gt; &lt;li&gt;If used with Deutsche Post it is just added to bag_quantity&lt;/li&gt;&lt;/ul&gt; (optional, default to 0)</param>
        /// <param name="productId">Determines the product of the waybill: * 1 / none &#x3D; Varebrev (Legacy) * 2 &#x3D; PostNord Tracked * 3 &#x3D; PostNord Untracked  (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Document>> WaybillGetWithHttpInfoAsync(string carrierCode, int bagQuantity, DateTime fromTime, DateTime toTime, int? containerQuantity = default(int?), int? productId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'carrierCode' is set
            if (carrierCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'carrierCode' when calling DocumentsApi->WaybillGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "bag_quantity", bagQuantity));
            if (containerQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "container_quantity", containerQuantity));
            }
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "from_time", fromTime));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "to_time", toTime));
            if (productId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            }

            localVarRequestOptions.Operation = "DocumentsApi.WaybillGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Document>("/documents/waybill", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WaybillGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
