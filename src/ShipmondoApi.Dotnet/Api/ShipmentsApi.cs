/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a proforma invoice
        /// </summary>
        /// <remarks>
        ///        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProformaInvoice&gt;</returns>
        List<ProformaInvoice> ProformaInvoicesGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a proforma invoice
        /// </summary>
        /// <remarks>
        ///        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProformaInvoice&gt;</returns>
        ApiResponse<List<ProformaInvoice>> ProformaInvoicesGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Cancel a shipment
        /// </summary>
        /// <remarks>
        /// Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentCancelled</returns>
        ShipmentCancelled ShipmentCancelAtCarrier(int id, int operationIndex = 0);

        /// <summary>
        /// Cancel a shipment
        /// </summary>
        /// <remarks>
        /// Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentCancelled</returns>
        ApiResponse<ShipmentCancelled> ShipmentCancelAtCarrierWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieve a shipment
        /// </summary>
        /// <remarks>
        /// Returns the details of a shipment.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        Shipment ShipmentGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a shipment
        /// </summary>
        /// <remarks>
        /// Returns the details of a shipment.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> ShipmentGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieve waybill for a shipment
        /// </summary>
        /// <remarks>
        ///        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Document&gt;</returns>
        List<Document> ShipmentWaybillGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve waybill for a shipment
        /// </summary>
        /// <remarks>
        ///        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        ApiResponse<List<Document>> ShipmentWaybillGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// List all shipments
        /// </summary>
        /// <remarks>
        /// Returns a list of shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Shipment&gt;</returns>
        List<Shipment> ShipmentsGet(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all shipments
        /// </summary>
        /// <remarks>
        /// Returns a list of shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Shipment&gt;</returns>
        ApiResponse<List<Shipment>> ShipmentsGetWithHttpInfo(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a new shipment with the provided information.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        Shipment ShipmentsPost(CreateShipmentRequest body, int operationIndex = 0);

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a new shipment with the provided information.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> ShipmentsPostWithHttpInfo(CreateShipmentRequest body, int operationIndex = 0);
        /// <summary>
        /// Fetch qr codes for a shipment
        /// </summary>
        /// <remarks>
        /// Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QrCode</returns>
        QrCode ShipmentsQrCodeGet(int id, string fileFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// Fetch qr codes for a shipment
        /// </summary>
        /// <remarks>
        /// Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QrCode</returns>
        ApiResponse<QrCode> ShipmentsQrCodeGetWithHttpInfo(int id, string fileFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a shipment quote
        /// </summary>
        /// <remarks>
        /// Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateShipmentQuoteResponse</returns>
        CreateShipmentQuoteResponse ShipmentsQuotePost(CreateShipmentRequest body, int operationIndex = 0);

        /// <summary>
        /// Create a shipment quote
        /// </summary>
        /// <remarks>
        /// Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateShipmentQuoteResponse</returns>
        ApiResponse<CreateShipmentQuoteResponse> ShipmentsQuotePostWithHttpInfo(CreateShipmentRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a proforma invoice
        /// </summary>
        /// <remarks>
        ///        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProformaInvoice&gt;</returns>
        System.Threading.Tasks.Task<List<ProformaInvoice>> ProformaInvoicesGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a proforma invoice
        /// </summary>
        /// <remarks>
        ///        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProformaInvoice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProformaInvoice>>> ProformaInvoicesGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel a shipment
        /// </summary>
        /// <remarks>
        /// Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentCancelled</returns>
        System.Threading.Tasks.Task<ShipmentCancelled> ShipmentCancelAtCarrierAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a shipment
        /// </summary>
        /// <remarks>
        /// Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentCancelled)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentCancelled>> ShipmentCancelAtCarrierWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a shipment
        /// </summary>
        /// <remarks>
        /// Returns the details of a shipment.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> ShipmentGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a shipment
        /// </summary>
        /// <remarks>
        /// Returns the details of a shipment.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> ShipmentGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve waybill for a shipment
        /// </summary>
        /// <remarks>
        ///        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        System.Threading.Tasks.Task<List<Document>> ShipmentWaybillGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve waybill for a shipment
        /// </summary>
        /// <remarks>
        ///        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Document>>> ShipmentWaybillGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all shipments
        /// </summary>
        /// <remarks>
        /// Returns a list of shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Shipment&gt;</returns>
        System.Threading.Tasks.Task<List<Shipment>> ShipmentsGetAsync(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all shipments
        /// </summary>
        /// <remarks>
        /// Returns a list of shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Shipment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Shipment>>> ShipmentsGetWithHttpInfoAsync(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a new shipment with the provided information.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> ShipmentsPostAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a new shipment with the provided information.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> ShipmentsPostWithHttpInfoAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch qr codes for a shipment
        /// </summary>
        /// <remarks>
        /// Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QrCode</returns>
        System.Threading.Tasks.Task<QrCode> ShipmentsQrCodeGetAsync(int id, string fileFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch qr codes for a shipment
        /// </summary>
        /// <remarks>
        /// Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QrCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<QrCode>> ShipmentsQrCodeGetWithHttpInfoAsync(int id, string fileFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a shipment quote
        /// </summary>
        /// <remarks>
        /// Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipmentQuoteResponse</returns>
        System.Threading.Tasks.Task<CreateShipmentQuoteResponse> ShipmentsQuotePostAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a shipment quote
        /// </summary>
        /// <remarks>
        /// Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipmentQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShipmentQuoteResponse>> ShipmentsQuotePostWithHttpInfoAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApi : IShipmentsApiSync, IShipmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentsApi : IShipmentsApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentsApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentsApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipmentsApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a proforma invoice        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProformaInvoice&gt;</returns>
        public List<ProformaInvoice> ProformaInvoicesGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<ProformaInvoice>> localVarResponse = ProformaInvoicesGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a proforma invoice        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProformaInvoice&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<ProformaInvoice>> ProformaInvoicesGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ProformaInvoicesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProformaInvoice>>("/shipments/{id}/proforma_invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProformaInvoicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a proforma invoice        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProformaInvoice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProformaInvoice>> ProformaInvoicesGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<ProformaInvoice>> localVarResponse = await ProformaInvoicesGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a proforma invoice        Returns a proforma invoice for a shipment.         Proforma invoice is generated based on the customs data received and delivered as Base64-encoded data.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProformaInvoice&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<ProformaInvoice>>> ProformaInvoicesGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ProformaInvoicesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProformaInvoice>>("/shipments/{id}/proforma_invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProformaInvoicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a shipment Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentCancelled</returns>
        public ShipmentCancelled ShipmentCancelAtCarrier(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<ShipmentCancelled> localVarResponse = ShipmentCancelAtCarrierWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a shipment Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentCancelled</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<ShipmentCancelled> ShipmentCancelAtCarrierWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentCancelAtCarrier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ShipmentCancelled>("/shipments/{id}/cancel_at_carrier", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentCancelAtCarrier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a shipment Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentCancelled</returns>
        public async System.Threading.Tasks.Task<ShipmentCancelled> ShipmentCancelAtCarrierAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<ShipmentCancelled> localVarResponse = await ShipmentCancelAtCarrierWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a shipment Cancels a shipment created with **your own agreement** at carrier if possible.         **Note:** This doesn&#39;t refunds the shipment in Shipmondo.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentCancelled)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<ShipmentCancelled>> ShipmentCancelAtCarrierWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentCancelAtCarrier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ShipmentCancelled>("/shipments/{id}/cancel_at_carrier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentCancelAtCarrier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a shipment Returns the details of a shipment.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        public Shipment ShipmentGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Shipment> localVarResponse = ShipmentGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shipment Returns the details of a shipment.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Shipment> ShipmentGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Shipment>("/shipments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a shipment Returns the details of a shipment.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> ShipmentGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Shipment> localVarResponse = await ShipmentGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shipment Returns the details of a shipment.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Shipment>> ShipmentGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Shipment>("/shipments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve waybill for a shipment        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Document&gt;</returns>
        public List<Document> ShipmentWaybillGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Document>> localVarResponse = ShipmentWaybillGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve waybill for a shipment        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Document&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<Document>> ShipmentWaybillGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentWaybillGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Document>>("/shipments/{id}/waybills", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentWaybillGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve waybill for a shipment        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Document&gt;</returns>
        public async System.Threading.Tasks.Task<List<Document>> ShipmentWaybillGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Document>> localVarResponse = await ShipmentWaybillGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve waybill for a shipment        Returns waybill for a shipment.         Waybills are carrier specific and compared to collected waybills these only cover one shipment.         **Danske Fragtmænd** supports this when **INCL_WAYBILL** service is booked.        **Jørgen Jensen Distribution**, **K. Hansen Transport** and **Per Damgård** supports this to get ADR documentation when **ADR** service is booked.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Document&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<Document>>> ShipmentWaybillGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentWaybillGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Document>>("/shipments/{id}/waybills", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentWaybillGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all shipments Returns a list of shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Shipment&gt;</returns>
        public List<Shipment> ShipmentsGet(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Shipment>> localVarResponse = ShipmentsGetWithHttpInfo(id, orderId, packageNumber, carrierCode, senderCountry, receiverCountry, waybillReference, createdAtMin, createdAtMax, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all shipments Returns a list of shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Shipment&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<Shipment>> ShipmentsGetWithHttpInfo(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (packageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "package_number", packageNumber));
            }
            if (carrierCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            }
            if (senderCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sender_country", senderCountry));
            }
            if (receiverCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "receiver_country", receiverCountry));
            }
            if (waybillReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "waybill_reference", waybillReference));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Shipment>>("/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all shipments Returns a list of shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Shipment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Shipment>> ShipmentsGetAsync(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Shipment>> localVarResponse = await ShipmentsGetWithHttpInfoAsync(id, orderId, packageNumber, carrierCode, senderCountry, receiverCountry, waybillReference, createdAtMin, createdAtMax, perPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all shipments Returns a list of shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to be included in the filter (optional)</param>
        /// <param name="orderId">Order ID for the shipments to be included in the filter (optional)</param>
        /// <param name="packageNumber">Shipment or package number for the shipments to be included in the filter (optional)</param>
        /// <param name="carrierCode">Carrier code to be included in the filter. (optional)</param>
        /// <param name="senderCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="receiverCountry">Country code (ISO Alpha-2) to be included in the filter. (optional)</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in, to be included in the filter. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the shipments to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Shipment&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<Shipment>>> ShipmentsGetWithHttpInfoAsync(int? id = default(int?), string orderId = default(string), string packageNumber = default(string), string carrierCode = default(string), string senderCountry = default(string), string receiverCountry = default(string), string waybillReference = default(string), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (packageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "package_number", packageNumber));
            }
            if (carrierCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            }
            if (senderCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "sender_country", senderCountry));
            }
            if (receiverCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "receiver_country", receiverCountry));
            }
            if (waybillReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "waybill_reference", waybillReference));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Shipment>>("/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment Creates a new shipment with the provided information.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        public Shipment ShipmentsPost(CreateShipmentRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Shipment> localVarResponse = ShipmentsPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment Creates a new shipment with the provided information.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Shipment> ShipmentsPostWithHttpInfo(CreateShipmentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ShipmentsApi->ShipmentsPost");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Shipment>("/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment Creates a new shipment with the provided information.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> ShipmentsPostAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Shipment> localVarResponse = await ShipmentsPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment Creates a new shipment with the provided information.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">          Shipment Object.            For some carriers, a simple model can be used, while for others a more advanced model needs to be used.            This request sample is based on the simple model.            Read more: [Anatomy of a shipment](/#anatomy-of-a-shipment)          </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Shipment>> ShipmentsPostWithHttpInfoAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ShipmentsApi->ShipmentsPost");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Shipment>("/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch qr codes for a shipment Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QrCode</returns>
        public QrCode ShipmentsQrCodeGet(int id, string fileFormat = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<QrCode> localVarResponse = ShipmentsQrCodeGetWithHttpInfo(id, fileFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch qr codes for a shipment Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QrCode</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<QrCode> ShipmentsQrCodeGetWithHttpInfo(int id, string fileFormat = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "file_format", fileFormat));
            }

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsQrCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QrCode>("/shipments/{id}/qr_code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsQrCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch qr codes for a shipment Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QrCode</returns>
        public async System.Threading.Tasks.Task<QrCode> ShipmentsQrCodeGetAsync(int id, string fileFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<QrCode> localVarResponse = await ShipmentsQrCodeGetWithHttpInfoAsync(id, fileFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch qr codes for a shipment Fetches a QR code for a given shipment request. It is only possible to fetch QR codes for shipments booked with the QR code service.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the shipment to fetch QR codes for</param>
        /// <param name="fileFormat">The file format the QR Code will be returned as. Currently supported values are png and pdf. Default is PDF (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QrCode)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<QrCode>> ShipmentsQrCodeGetWithHttpInfoAsync(int id, string fileFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "file_format", fileFormat));
            }

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsQrCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QrCode>("/shipments/{id}/qr_code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsQrCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment quote Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateShipmentQuoteResponse</returns>
        public CreateShipmentQuoteResponse ShipmentsQuotePost(CreateShipmentRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<CreateShipmentQuoteResponse> localVarResponse = ShipmentsQuotePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment quote Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateShipmentQuoteResponse</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<CreateShipmentQuoteResponse> ShipmentsQuotePostWithHttpInfo(CreateShipmentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ShipmentsApi->ShipmentsQuotePost");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsQuotePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateShipmentQuoteResponse>("/shipments/quote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsQuotePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment quote Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipmentQuoteResponse</returns>
        public async System.Threading.Tasks.Task<CreateShipmentQuoteResponse> ShipmentsQuotePostAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<CreateShipmentQuoteResponse> localVarResponse = await ShipmentsQuotePostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment quote Creates a shipment quote from a given shipment request.  For shipments through Shipmondo&#39;s agreement, it determines the **estimated** price for a shipment on Shipmondo&#39;s agreement.  For own agreement shipments, it determines the price paid to Shipmondo and an **estimated** price for a shipment from the carrier (if supported by the carrier).
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Quote Object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipmentQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<CreateShipmentQuoteResponse>> ShipmentsQuotePostWithHttpInfoAsync(CreateShipmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling ShipmentsApi->ShipmentsQuotePost");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ShipmentsApi.ShipmentsQuotePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateShipmentQuoteResponse>("/shipments/quote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentsQuotePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
