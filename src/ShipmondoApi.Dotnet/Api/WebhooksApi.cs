/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        ///        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Webhook&gt;</returns>
        List<Webhook> WebhookCreate(WebhookCreate body, int operationIndex = 0);

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        ///        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
        ApiResponse<List<Webhook>> WebhookCreateWithHttpInfo(WebhookCreate body, int operationIndex = 0);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        Webhook WebhookDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> WebhookDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        Webhook WebhookGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> WebhookGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        ///        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        Webhook WebhookUpdate(int id, int operationIndex = 0);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        ///        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> WebhookUpdateWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Webhook&gt;</returns>
        List<Webhook> WebhooksGet(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
        ApiResponse<List<Webhook>> WebhooksGetWithHttpInfo(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        ///        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Webhook&gt;</returns>
        System.Threading.Tasks.Task<List<Webhook>> WebhookCreateAsync(WebhookCreate body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        ///        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Webhook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Webhook>>> WebhookCreateWithHttpInfoAsync(WebhookCreate body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> WebhookDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> WebhookDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> WebhookGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> WebhookGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        ///        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> WebhookUpdateAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        ///        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> WebhookUpdateWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Webhook&gt;</returns>
        System.Threading.Tasks.Task<List<Webhook>> WebhooksGetAsync(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Webhook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Webhook>>> WebhooksGetWithHttpInfoAsync(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a webhook        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Webhook&gt;</returns>
        public List<Webhook> WebhookCreate(WebhookCreate body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>> localVarResponse = WebhookCreateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>> WebhookCreateWithHttpInfo(WebhookCreate body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->WebhookCreate");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WebhooksApi.WebhookCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Webhook>>("/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a webhook        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Webhook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Webhook>> WebhookCreateAsync(WebhookCreate body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>> localVarResponse = await WebhookCreateWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook        Creates a new webhook with the specified information and activates it.           Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.         Endpoint must be set up to receive messages before creating the webhook.         Accepted values for action depends on the resource_name used.         Available actions for [**Shipments**](shipment_get) resource:        - create        - cancel         Available actions for [**Orders**](sales_order_get) resource:        - create        - status_update        - create_fulfillment        - create_shipment        - payment_captured        - payment_voided        - delete         Available actions for [**Drafts**](draft_shipment_get) (Draft shipments) resource:        - create        - create_shipment        - delete         Available actions for **Shipment Monitor** resource:        - latest        - delivered       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook Object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Webhook&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>>> WebhookCreateWithHttpInfoAsync(WebhookCreate body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->WebhookCreate");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WebhooksApi.WebhookCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Webhook>>("/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook 
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        public Webhook WebhookDelete(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> localVarResponse = WebhookDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook 
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> WebhookDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.WebhookDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Webhook>("/webhooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook 
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> WebhookDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> localVarResponse = await WebhookDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook 
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Webhook>> WebhookDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.WebhookDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Webhook>("/webhooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a webhook Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        public Webhook WebhookGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> localVarResponse = WebhookGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a webhook Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> WebhookGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.WebhookGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Webhook>("/webhooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a webhook Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> WebhookGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> localVarResponse = await WebhookGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a webhook Returns the details of a webhook.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the webhook to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Webhook>> WebhookGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.WebhookGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Webhook>("/webhooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        public Webhook WebhookUpdate(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> localVarResponse = WebhookUpdateWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> WebhookUpdateWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.WebhookUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Webhook>("/webhooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> WebhookUpdateAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<Webhook> localVarResponse = await WebhookUpdateWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook        Updates an existing webhook with the provided information.         Currently only supports updating **name** and **active** status.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook that is to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<Webhook>> WebhookUpdateWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.WebhookUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Webhook>("/webhooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all webhooks Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Webhook&gt;</returns>
        public List<Webhook> WebhooksGet(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>> localVarResponse = WebhooksGetWithHttpInfo(id, name, active, createdAtMin, createdAtMax, updatedAtMin, updatedAtMax, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>> WebhooksGetWithHttpInfo(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (updatedAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_min", updatedAtMin));
            }
            if (updatedAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_max", updatedAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "WebhooksApi.WebhooksGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Webhook>>("/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all webhooks Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Webhook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Webhook>> WebhooksGetAsync(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>> localVarResponse = await WebhooksGetWithHttpInfoAsync(id, name, active, createdAtMin, createdAtMax, updatedAtMin, updatedAtMax, perPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks Returns a list of webhooks.         Webhooks create an event when an action that is subscribed to is performed in Shipmondo. The event is then sent to the specified endpoint containing the current data of the affected object.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the webhook object  (optional)</param>
        /// <param name="name">Name of the webhook  (optional)</param>
        /// <param name="active">The current active status of the webhook  (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-19T11:00:03.305+02:00 * 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2017-06-29T11:00:03.305+02:00 * 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00  (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the webhooks to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00  (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Webhook&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<Webhook>>> WebhooksGetWithHttpInfoAsync(int? id = default(int?), string name = default(string), bool? active = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (updatedAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_min", updatedAtMin));
            }
            if (updatedAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_max", updatedAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "WebhooksApi.WebhooksGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Webhook>>("/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
