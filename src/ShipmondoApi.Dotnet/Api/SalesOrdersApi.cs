/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISalesOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a fulfillment
        /// </summary>
        /// <remarks>
        /// Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FulfillmentCreated</returns>
        FulfillmentCreated FulfillmentGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a fulfillment
        /// </summary>
        /// <remarks>
        /// Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FulfillmentCreated</returns>
        ApiResponse<FulfillmentCreated> FulfillmentGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Create a fulfillment
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FulfillmentCreated</returns>
        FulfillmentCreated FulfillmentPost(int id, CreateFulfillmentRequest body, int operationIndex = 0);

        /// <summary>
        /// Create a fulfillment
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FulfillmentCreated</returns>
        ApiResponse<FulfillmentCreated> FulfillmentPostWithHttpInfo(int id, CreateFulfillmentRequest body, int operationIndex = 0);
        /// <summary>
        /// Retrieve packing slips
        /// </summary>
        /// <remarks>
        /// Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PackingSlip&gt;</returns>
        List<PackingSlip> PackingSlipGet(List<string> ids, string outputFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve packing slips
        /// </summary>
        /// <remarks>
        /// Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PackingSlip&gt;</returns>
        ApiResponse<List<PackingSlip>> PackingSlipGetWithHttpInfo(List<string> ids, string outputFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve pick lists
        /// </summary>
        /// <remarks>
        /// Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PickList&gt;</returns>
        List<PickList> PickListGet(List<string> ids, string outputFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve pick lists
        /// </summary>
        /// <remarks>
        /// Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PickList&gt;</returns>
        ApiResponse<List<PickList>> PickListGetWithHttpInfo(List<string> ids, string outputFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// Process a barcode
        /// </summary>
        /// <remarks>
        /// Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrderBarcode(ProcessSalesOrderBarcode body, int operationIndex = 0);

        /// <summary>
        /// Process a barcode
        /// </summary>
        /// <remarks>
        /// Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrderBarcodeWithHttpInfo(ProcessSalesOrderBarcode body, int operationIndex = 0);
        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrderCapture(int id, int operationIndex = 0);

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrderCaptureWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrderCreateShipment(int id, int operationIndex = 0);

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrderCreateShipmentWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// List fulfillments
        /// </summary>
        /// <remarks>
        /// Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FulfillmentCreated</returns>
        FulfillmentCreated SalesOrderFulfillmentsGet(int id, int operationIndex = 0);

        /// <summary>
        /// List fulfillments
        /// </summary>
        /// <remarks>
        /// Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FulfillmentCreated</returns>
        ApiResponse<FulfillmentCreated> SalesOrderFulfillmentsGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieve a sales order
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrderGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a sales order
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrderGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieve a packaging
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrderPackaging</returns>
        SalesOrderPackaging SalesOrderPackagingGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve a packaging
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrderPackaging</returns>
        ApiResponse<SalesOrderPackaging> SalesOrderPackagingGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// List all packagings
        /// </summary>
        /// <remarks>
        /// Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SalesOrderPackaging&gt;</returns>
        List<SalesOrderPackaging> SalesOrderPackagingsGet(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all packagings
        /// </summary>
        /// <remarks>
        /// Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SalesOrderPackaging&gt;</returns>
        ApiResponse<List<SalesOrderPackaging>> SalesOrderPackagingsGetWithHttpInfo(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a packing slip
        /// </summary>
        /// <remarks>
        /// Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackingSlip</returns>
        PackingSlip SalesOrderPackingSlips(int id, string format = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve a packing slip
        /// </summary>
        /// <remarks>
        /// Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackingSlip</returns>
        ApiResponse<PackingSlip> SalesOrderPackingSlipsWithHttpInfo(int id, string format = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve a pick list
        /// </summary>
        /// <remarks>
        /// Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PickListData&gt;</returns>
        List<PickListData> SalesOrderPickList(int id, string format = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve a pick list
        /// </summary>
        /// <remarks>
        /// Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PickListData&gt;</returns>
        ApiResponse<List<PickListData>> SalesOrderPickListWithHttpInfo(int id, string format = default(string), int operationIndex = 0);
        /// <summary>
        /// Update a sales order
        /// </summary>
        /// <remarks>
        ///        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrderPut(int id, UpdateSalesOrderRequest body, int operationIndex = 0);

        /// <summary>
        /// Update a sales order
        /// </summary>
        /// <remarks>
        ///        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrderPutWithHttpInfo(int id, UpdateSalesOrderRequest body, int operationIndex = 0);
        /// <summary>
        /// Update a sales order note
        /// </summary>
        /// <remarks>
        /// Updates the note for a sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrderUpdateNote(int id, UpdateSalesOrderNote body, int operationIndex = 0);

        /// <summary>
        /// Update a sales order note
        /// </summary>
        /// <remarks>
        /// Updates the note for a sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrderUpdateNoteWithHttpInfo(int id, UpdateSalesOrderNote body, int operationIndex = 0);
        /// <summary>
        /// List all sales orders
        /// </summary>
        /// <remarks>
        /// Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SalesOrder&gt;</returns>
        List<SalesOrder> SalesOrdersGet(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all sales orders
        /// </summary>
        /// <remarks>
        /// Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SalesOrder&gt;</returns>
        ApiResponse<List<SalesOrder>> SalesOrdersGetWithHttpInfo(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create a sales order
        /// </summary>
        /// <remarks>
        /// Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        SalesOrder SalesOrdersPost(CreateSalesOrderRequest body, int operationIndex = 0);

        /// <summary>
        /// Create a sales order
        /// </summary>
        /// <remarks>
        /// Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        ApiResponse<SalesOrder> SalesOrdersPostWithHttpInfo(CreateSalesOrderRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISalesOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a fulfillment
        /// </summary>
        /// <remarks>
        /// Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCreated</returns>
        System.Threading.Tasks.Task<FulfillmentCreated> FulfillmentGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a fulfillment
        /// </summary>
        /// <remarks>
        /// Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCreated>> FulfillmentGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a fulfillment
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCreated</returns>
        System.Threading.Tasks.Task<FulfillmentCreated> FulfillmentPostAsync(int id, CreateFulfillmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a fulfillment
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCreated>> FulfillmentPostWithHttpInfoAsync(int id, CreateFulfillmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve packing slips
        /// </summary>
        /// <remarks>
        /// Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PackingSlip&gt;</returns>
        System.Threading.Tasks.Task<List<PackingSlip>> PackingSlipGetAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve packing slips
        /// </summary>
        /// <remarks>
        /// Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PackingSlip&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackingSlip>>> PackingSlipGetWithHttpInfoAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve pick lists
        /// </summary>
        /// <remarks>
        /// Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PickList&gt;</returns>
        System.Threading.Tasks.Task<List<PickList>> PickListGetAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve pick lists
        /// </summary>
        /// <remarks>
        /// Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PickList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PickList>>> PickListGetWithHttpInfoAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process a barcode
        /// </summary>
        /// <remarks>
        /// Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrderBarcodeAsync(ProcessSalesOrderBarcode body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process a barcode
        /// </summary>
        /// <remarks>
        /// Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrderBarcodeWithHttpInfoAsync(ProcessSalesOrderBarcode body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrderCaptureAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrderCaptureWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrderCreateShipmentAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <remarks>
        /// Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrderCreateShipmentWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List fulfillments
        /// </summary>
        /// <remarks>
        /// Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCreated</returns>
        System.Threading.Tasks.Task<FulfillmentCreated> SalesOrderFulfillmentsGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List fulfillments
        /// </summary>
        /// <remarks>
        /// Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCreated>> SalesOrderFulfillmentsGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a sales order
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrderGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a sales order
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrderGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a packaging
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrderPackaging</returns>
        System.Threading.Tasks.Task<SalesOrderPackaging> SalesOrderPackagingGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a packaging
        /// </summary>
        /// <remarks>
        /// Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrderPackaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrderPackaging>> SalesOrderPackagingGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all packagings
        /// </summary>
        /// <remarks>
        /// Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SalesOrderPackaging&gt;</returns>
        System.Threading.Tasks.Task<List<SalesOrderPackaging>> SalesOrderPackagingsGetAsync(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all packagings
        /// </summary>
        /// <remarks>
        /// Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SalesOrderPackaging&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SalesOrderPackaging>>> SalesOrderPackagingsGetWithHttpInfoAsync(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a packing slip
        /// </summary>
        /// <remarks>
        /// Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackingSlip</returns>
        System.Threading.Tasks.Task<PackingSlip> SalesOrderPackingSlipsAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a packing slip
        /// </summary>
        /// <remarks>
        /// Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackingSlip)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingSlip>> SalesOrderPackingSlipsWithHttpInfoAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a pick list
        /// </summary>
        /// <remarks>
        /// Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PickListData&gt;</returns>
        System.Threading.Tasks.Task<List<PickListData>> SalesOrderPickListAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a pick list
        /// </summary>
        /// <remarks>
        /// Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PickListData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PickListData>>> SalesOrderPickListWithHttpInfoAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a sales order
        /// </summary>
        /// <remarks>
        ///        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrderPutAsync(int id, UpdateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a sales order
        /// </summary>
        /// <remarks>
        ///        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrderPutWithHttpInfoAsync(int id, UpdateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a sales order note
        /// </summary>
        /// <remarks>
        /// Updates the note for a sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrderUpdateNoteAsync(int id, UpdateSalesOrderNote body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a sales order note
        /// </summary>
        /// <remarks>
        /// Updates the note for a sales order.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrderUpdateNoteWithHttpInfoAsync(int id, UpdateSalesOrderNote body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all sales orders
        /// </summary>
        /// <remarks>
        /// Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SalesOrder&gt;</returns>
        System.Threading.Tasks.Task<List<SalesOrder>> SalesOrdersGetAsync(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all sales orders
        /// </summary>
        /// <remarks>
        /// Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SalesOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SalesOrder>>> SalesOrdersGetWithHttpInfoAsync(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a sales order
        /// </summary>
        /// <remarks>
        /// Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        System.Threading.Tasks.Task<SalesOrder> SalesOrdersPostAsync(CreateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a sales order
        /// </summary>
        /// <remarks>
        /// Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesOrder>> SalesOrdersPostWithHttpInfoAsync(CreateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISalesOrdersApi : ISalesOrdersApiSync, ISalesOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SalesOrdersApi : ISalesOrdersApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesOrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesOrdersApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SalesOrdersApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SalesOrdersApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a fulfillment Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FulfillmentCreated</returns>
        public FulfillmentCreated FulfillmentGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> localVarResponse = FulfillmentGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a fulfillment Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FulfillmentCreated</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> FulfillmentGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.FulfillmentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentCreated>("/fulfillments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FulfillmentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a fulfillment Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCreated</returns>
        public async System.Threading.Tasks.Task<FulfillmentCreated> FulfillmentGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> localVarResponse = await FulfillmentGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a fulfillment Retrieves a fulfillment.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the fulfillment to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCreated)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated>> FulfillmentGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.FulfillmentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentCreated>("/fulfillments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FulfillmentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a fulfillment Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FulfillmentCreated</returns>
        public FulfillmentCreated FulfillmentPost(int id, CreateFulfillmentRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> localVarResponse = FulfillmentPostWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a fulfillment Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FulfillmentCreated</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> FulfillmentPostWithHttpInfo(int id, CreateFulfillmentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->FulfillmentPost");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.FulfillmentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentCreated>("/sales_orders/{id}/fulfillments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FulfillmentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a fulfillment Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCreated</returns>
        public async System.Threading.Tasks.Task<FulfillmentCreated> FulfillmentPostAsync(int id, CreateFulfillmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> localVarResponse = await FulfillmentPostWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a fulfillment Creates a fulfillment, based on a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCreated)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated>> FulfillmentPostWithHttpInfoAsync(int id, CreateFulfillmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->FulfillmentPost");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.FulfillmentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentCreated>("/sales_orders/{id}/fulfillments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FulfillmentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve packing slips Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PackingSlip&gt;</returns>
        public List<PackingSlip> PackingSlipGet(List<string> ids, string outputFormat = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PackingSlip>> localVarResponse = PackingSlipGetWithHttpInfo(ids, outputFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve packing slips Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PackingSlip&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<PackingSlip>> PackingSlipGetWithHttpInfo(List<string> ids, string outputFormat = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'ids' when calling SalesOrdersApi->PackingSlipGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.PackingSlipGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PackingSlip>>("/packing_slips", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PackingSlipGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve packing slips Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PackingSlip&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackingSlip>> PackingSlipGetAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PackingSlip>> localVarResponse = await PackingSlipGetWithHttpInfoAsync(ids, outputFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve packing slips Returns packing slips for specific sales orders. Limit: **25** sales order IDs per request.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch packing slips for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the packing slips. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PackingSlip&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<PackingSlip>>> PackingSlipGetWithHttpInfoAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'ids' when calling SalesOrdersApi->PackingSlipGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.PackingSlipGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PackingSlip>>("/packing_slips", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PackingSlipGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve pick lists Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PickList&gt;</returns>
        public List<PickList> PickListGet(List<string> ids, string outputFormat = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PickList>> localVarResponse = PickListGetWithHttpInfo(ids, outputFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve pick lists Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PickList&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<PickList>> PickListGetWithHttpInfo(List<string> ids, string outputFormat = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'ids' when calling SalesOrdersApi->PickListGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.PickListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PickList>>("/pick_lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve pick lists Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PickList&gt;</returns>
        public async System.Threading.Tasks.Task<List<PickList>> PickListGetAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PickList>> localVarResponse = await PickListGetWithHttpInfoAsync(ids, outputFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve pick lists Return pick lists for specific sales orders. Limit: **25** sales order IDs per request.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of sales order IDs that you want to fetch pick lists for. Examples 10075,10076,10077 </param>
        /// <param name="outputFormat">Format for the pick lists. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PickList&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<PickList>>> PickListGetWithHttpInfoAsync(List<string> ids, string outputFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'ids' when calling SalesOrdersApi->PickListGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.PickListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PickList>>("/pick_lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process a barcode Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrderBarcode(ProcessSalesOrderBarcode body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrderBarcodeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process a barcode Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrderBarcodeWithHttpInfo(ProcessSalesOrderBarcode body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrderBarcode");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderBarcode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SalesOrder>("/sales_orders/barcode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderBarcode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process a barcode Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrderBarcodeAsync(ProcessSalesOrderBarcode body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrderBarcodeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process a barcode Processes a sales order barcode and executes the defined actions. The actions that are executed are defined in the pick settings at Shipmondo.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrderBarcodeWithHttpInfoAsync(ProcessSalesOrderBarcode body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrderBarcode");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderBarcode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SalesOrder>("/sales_orders/barcode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderBarcode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Capture payment Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrderCapture(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrderCaptureWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Capture payment Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrderCaptureWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderCapture";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SalesOrder>("/sales_orders/{id}/capture", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderCapture", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Capture payment Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrderCaptureAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrderCaptureWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Capture payment Captures payment for a sales order.         The authorized amount (or value of the fulfilled items amount if the setting is enabled) for the transaction associated with the order will be captured.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be captured</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrderCaptureWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderCapture";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SalesOrder>("/sales_orders/{id}/capture", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderCapture", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrderCreateShipment(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrderCreateShipmentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrderCreateShipmentWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderCreateShipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SalesOrder>("/sales_orders/{id}/create_shipment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderCreateShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrderCreateShipmentAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrderCreateShipmentWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment Creates a shipment for a sales order.         The shipment will be created based on the associated shipment template.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the sales order to create a shipment for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrderCreateShipmentWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderCreateShipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SalesOrder>("/sales_orders/{id}/create_shipment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderCreateShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List fulfillments Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FulfillmentCreated</returns>
        public FulfillmentCreated SalesOrderFulfillmentsGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> localVarResponse = SalesOrderFulfillmentsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List fulfillments Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FulfillmentCreated</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> SalesOrderFulfillmentsGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderFulfillmentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentCreated>("/sales_orders/{id}/fulfillments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderFulfillmentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List fulfillments Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCreated</returns>
        public async System.Threading.Tasks.Task<FulfillmentCreated> SalesOrderFulfillmentsGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated> localVarResponse = await SalesOrderFulfillmentsGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List fulfillments Lists all fulfillments for a sales_order.         Fulfillments are used for completing orders and creating shipments.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCreated)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<FulfillmentCreated>> SalesOrderFulfillmentsGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderFulfillmentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentCreated>("/sales_orders/{id}/fulfillments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderFulfillmentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a sales order Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrderGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrderGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a sales order Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrderGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SalesOrder>("/sales_orders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a sales order Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrderGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrderGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a sales order Returns the details of a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrderGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SalesOrder>("/sales_orders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a packaging Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrderPackaging</returns>
        public SalesOrderPackaging SalesOrderPackagingGet(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrderPackaging> localVarResponse = SalesOrderPackagingGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a packaging Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrderPackaging</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrderPackaging> SalesOrderPackagingGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPackagingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SalesOrderPackaging>("/sales_order_packagings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPackagingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a packaging Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrderPackaging</returns>
        public async System.Threading.Tasks.Task<SalesOrderPackaging> SalesOrderPackagingGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrderPackaging> localVarResponse = await SalesOrderPackagingGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a packaging Returns the details of a sales order packaging.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrderPackaging)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrderPackaging>> SalesOrderPackagingGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPackagingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SalesOrderPackaging>("/sales_order_packagings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPackagingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all packagings Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SalesOrderPackaging&gt;</returns>
        public List<SalesOrderPackaging> SalesOrderPackagingsGet(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrderPackaging>> localVarResponse = SalesOrderPackagingsGetWithHttpInfo(id, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all packagings Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SalesOrderPackaging&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrderPackaging>> SalesOrderPackagingsGetWithHttpInfo(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPackagingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SalesOrderPackaging>>("/sales_order_packagings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPackagingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all packagings Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SalesOrderPackaging&gt;</returns>
        public async System.Threading.Tasks.Task<List<SalesOrderPackaging>> SalesOrderPackagingsGetAsync(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrderPackaging>> localVarResponse = await SalesOrderPackagingsGetWithHttpInfoAsync(id, perPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all packagings Returns a list of the sales order packagings.         Sales order packaging is used to add dimensions and weight to shipments created for the associated sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order packaging to be included in the filter (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SalesOrderPackaging&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrderPackaging>>> SalesOrderPackagingsGetWithHttpInfoAsync(int? id = default(int?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPackagingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SalesOrderPackaging>>("/sales_order_packagings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPackagingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a packing slip Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackingSlip</returns>
        public PackingSlip SalesOrderPackingSlips(int id, string format = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<PackingSlip> localVarResponse = SalesOrderPackingSlipsWithHttpInfo(id, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a packing slip Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackingSlip</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<PackingSlip> SalesOrderPackingSlipsWithHttpInfo(int id, string format = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPackingSlips";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PackingSlip>("/sales_orders/{id}/packing_slips", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPackingSlips", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a packing slip Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackingSlip</returns>
        public async System.Threading.Tasks.Task<PackingSlip> SalesOrderPackingSlipsAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<PackingSlip> localVarResponse = await SalesOrderPackingSlipsWithHttpInfoAsync(id, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a packing slip Returns a packing slip for a sales order. Packing slip is delivered as Base64-encoded data.         Packing slips are branded slips used for disclosing which orders are sent to the end customer.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackingSlip)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<PackingSlip>> SalesOrderPackingSlipsWithHttpInfoAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPackingSlips";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackingSlip>("/sales_orders/{id}/packing_slips", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPackingSlips", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a pick list Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PickListData&gt;</returns>
        public List<PickListData> SalesOrderPickList(int id, string format = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PickListData>> localVarResponse = SalesOrderPickListWithHttpInfo(id, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a pick list Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PickListData&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<PickListData>> SalesOrderPickListWithHttpInfo(int id, string format = default(string), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPickList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PickListData>>("/sales_orders/{id}/pick_list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPickList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a pick list Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PickListData&gt;</returns>
        public async System.Threading.Tasks.Task<List<PickListData>> SalesOrderPickListAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<PickListData>> localVarResponse = await SalesOrderPickListWithHttpInfoAsync(id, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a pick list Returns a pick list for a sales order. Pick list is delivered as Base64-encoded data.         Pick lists contain the items for the order, and their locations, optimized for your picking flow.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter</param>
        /// <param name="format">Format for the pick list. Available: a4_pdf, 10x19_pdf  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PickListData&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<PickListData>>> SalesOrderPickListWithHttpInfoAsync(int id, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPickList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PickListData>>("/sales_orders/{id}/pick_list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPickList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a sales order        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrderPut(int id, UpdateSalesOrderRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrderPutWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a sales order        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrderPutWithHttpInfo(int id, UpdateSalesOrderRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrderPut");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SalesOrder>("/sales_orders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a sales order        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrderPutAsync(int id, UpdateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrderPutWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a sales order        Updates an existing sales order and its order lines. Updating order lines is exclusively possible with open orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that needs to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrderPutWithHttpInfoAsync(int id, UpdateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrderPut");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SalesOrder>("/sales_orders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a sales order note Updates the note for a sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrderUpdateNote(int id, UpdateSalesOrderNote body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrderUpdateNoteWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a sales order note Updates the note for a sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrderUpdateNoteWithHttpInfo(int id, UpdateSalesOrderNote body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrderUpdateNote");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderUpdateNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SalesOrder>("/sales_orders/{id}/order_note", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderUpdateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a sales order note Updates the note for a sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrderUpdateNoteAsync(int id, UpdateSalesOrderNote body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrderUpdateNoteWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a sales order note Updates the note for a sales order.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order that note should be updated for</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrderUpdateNoteWithHttpInfoAsync(int id, UpdateSalesOrderNote body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrderUpdateNote");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrderUpdateNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SalesOrder>("/sales_orders/{id}/order_note", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrderUpdateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sales orders Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SalesOrder&gt;</returns>
        public List<SalesOrder> SalesOrdersGet(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrder>> localVarResponse = SalesOrdersGetWithHttpInfo(id, orderId, reference, billToEmail, billToMobile, shipToEmail, shipToMobile, archived, createdAtMin, createdAtMax, updatedAtMin, updatedAtMax, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all sales orders Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SalesOrder&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrder>> SalesOrdersGetWithHttpInfo(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (billToEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "bill_to_email", billToEmail));
            }
            if (billToMobile != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "bill_to_mobile", billToMobile));
            }
            if (shipToEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "ship_to_email", shipToEmail));
            }
            if (shipToMobile != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "ship_to_mobile", shipToMobile));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (updatedAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_min", updatedAtMin));
            }
            if (updatedAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_max", updatedAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrdersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SalesOrder>>("/sales_orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrdersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sales orders Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SalesOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<SalesOrder>> SalesOrdersGetAsync(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrder>> localVarResponse = await SalesOrdersGetWithHttpInfoAsync(id, orderId, reference, billToEmail, billToMobile, shipToEmail, shipToMobile, archived, createdAtMin, createdAtMax, updatedAtMin, updatedAtMax, perPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all sales orders Returns a list of sales orders.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="orderId">Order ID for the sales order to be included in the filter. (optional)</param>
        /// <param name="reference">reference for the order to be included in the filter. (optional)</param>
        /// <param name="billToEmail">Billing email for the order to be included in the filter. (optional)</param>
        /// <param name="billToMobile">Billing mobile for the order to be included in the filter. (optional)</param>
        /// <param name="shipToEmail">Shipping email for the order to be included in the filter. (optional)</param>
        /// <param name="shipToMobile">Shipping mobile for the order to be included in the filter. (optional)</param>
        /// <param name="archived">Filter for achived or not. (optional)</param>
        /// <param name="createdAtMin">\&quot;From\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="createdAtMax">\&quot;To\&quot; value of \&quot;created\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMin">\&quot;From\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-19T11:00:03.305+02:00 * 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00 (optional)</param>
        /// <param name="updatedAtMax">\&quot;To\&quot; value of \&quot;updated\&quot; timestamp for the sales orders to be included in the filter. Examples: * 2018-06-29T11:00:03.305+02:00 * 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00 (optional)</param>
        /// <param name="perPage">For pagination. Defines how many entries are returned per page. (optional, default to 20)</param>
        /// <param name="page">For pagination. Defines which page the results are fetched from. (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SalesOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<SalesOrder>>> SalesOrdersGetWithHttpInfoAsync(int? id = default(int?), string orderId = default(string), string reference = default(string), string billToEmail = default(string), string billToMobile = default(string), string shipToEmail = default(string), string shipToMobile = default(string), bool? archived = default(bool?), DateTime? createdAtMin = default(DateTime?), DateTime? createdAtMax = default(DateTime?), DateTime? updatedAtMin = default(DateTime?), DateTime? updatedAtMax = default(DateTime?), int? perPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (billToEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "bill_to_email", billToEmail));
            }
            if (billToMobile != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "bill_to_mobile", billToMobile));
            }
            if (shipToEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "ship_to_email", shipToEmail));
            }
            if (shipToMobile != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "ship_to_mobile", shipToMobile));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (createdAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_min", createdAtMin));
            }
            if (createdAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "created_at_max", createdAtMax));
            }
            if (updatedAtMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_min", updatedAtMin));
            }
            if (updatedAtMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "updated_at_max", updatedAtMax));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrdersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SalesOrder>>("/sales_orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrdersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a sales order Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SalesOrder</returns>
        public SalesOrder SalesOrdersPost(CreateSalesOrderRequest body, int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = SalesOrdersPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a sales order Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SalesOrder</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> SalesOrdersPostWithHttpInfo(CreateSalesOrderRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrdersPost");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrdersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SalesOrder>("/sales_orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrdersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a sales order Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SalesOrder</returns>
        public async System.Threading.Tasks.Task<SalesOrder> SalesOrdersPostAsync(CreateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder> localVarResponse = await SalesOrdersPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a sales order Creates a sales order.         Sales orders are used handle all processes of the order flow, including but not limited to picking, packing, sending shipments, and capturing payments through the Shipmondo app.
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SalesOrder)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<SalesOrder>> SalesOrdersPostWithHttpInfoAsync(CreateSalesOrderRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'body' when calling SalesOrdersApi->SalesOrdersPost");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SalesOrdersApi.SalesOrdersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SalesOrder>("/sales_orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SalesOrdersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
