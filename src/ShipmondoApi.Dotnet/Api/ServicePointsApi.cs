/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Mime;
using ShipmondoApi.Dotnet.Client;
using ShipmondoApi.Dotnet.Model;

namespace ShipmondoApi.Dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicePointsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List pickup points
        /// </summary>
        /// <remarks>
        ///        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServicePoint&gt;</returns>
        List<ServicePoint> PickupPointsGet(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List pickup points
        /// </summary>
        /// <remarks>
        ///        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServicePoint&gt;</returns>
        ApiResponse<List<ServicePoint>> PickupPointsGetWithHttpInfo(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicePointsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List pickup points
        /// </summary>
        /// <remarks>
        ///        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServicePoint&gt;</returns>
        System.Threading.Tasks.Task<List<ServicePoint>> PickupPointsGetAsync(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List pickup points
        /// </summary>
        /// <remarks>
        ///        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </remarks>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServicePoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServicePoint>>> PickupPointsGetWithHttpInfoAsync(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicePointsApi : IServicePointsApiSync, IServicePointsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServicePointsApi : IServicePointsApi
    {
        private ShipmondoApi.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicePointsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicePointsApi(string basePath)
        {
            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                new ShipmondoApi.Dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServicePointsApi(ShipmondoApi.Dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ShipmondoApi.Dotnet.Client.Configuration.MergeConfigurations(
                ShipmondoApi.Dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ShipmondoApi.Dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePointsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServicePointsApi(ShipmondoApi.Dotnet.Client.ISynchronousClient client, ShipmondoApi.Dotnet.Client.IAsynchronousClient asyncClient, ShipmondoApi.Dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ShipmondoApi.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ShipmondoApi.Dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ShipmondoApi.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List pickup points        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServicePoint&gt;</returns>
        public List<ServicePoint> PickupPointsGet(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0)
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<ServicePoint>> localVarResponse = PickupPointsGetWithHttpInfo(carrierCode, countryCode, zipcode, city, address, id, quantity, collectPoints, productCode, inDelivery, outDelivery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List pickup points        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServicePoint&gt;</returns>
        public ShipmondoApi.Dotnet.Client.ApiResponse<List<ServicePoint>> PickupPointsGetWithHttpInfo(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'carrierCode' is set
            if (carrierCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'carrierCode' when calling ServicePointsApi->PickupPointsGet");
            }

            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'countryCode' when calling ServicePointsApi->PickupPointsGet");
            }

            // verify the required parameter 'zipcode' is set
            if (zipcode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'zipcode' when calling ServicePointsApi->PickupPointsGet");
            }

            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "country_code", countryCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "zipcode", zipcode));
            if (city != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "city", city));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (collectPoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "collect_points", collectPoints));
            }
            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_code", productCode));
            }
            if (inDelivery != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "in_delivery", inDelivery));
            }
            if (outDelivery != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "out_delivery", outDelivery));
            }

            localVarRequestOptions.Operation = "ServicePointsApi.PickupPointsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServicePoint>>("/pickup_points", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupPointsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List pickup points        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServicePoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServicePoint>> PickupPointsGetAsync(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ShipmondoApi.Dotnet.Client.ApiResponse<List<ServicePoint>> localVarResponse = await PickupPointsGetWithHttpInfoAsync(carrierCode, countryCode, zipcode, city, address, id, quantity, collectPoints, productCode, inDelivery, outDelivery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List pickup points        Returns a list of the available and nearest pickup points based on input.         Usually the address information given should be the receivers address to find pickup points nearest their location.         The identification of the pickup points can be used/required when creating a shipment.       
        /// </summary>
        /// <exception cref="ShipmondoApi.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierCode">Carrier code to be included in the filter.</param>
        /// <param name="countryCode">Country code (ISO Alpha-2) to be included in the filter.</param>
        /// <param name="zipcode">Zip code / Postal code.</param>
        /// <param name="city">Name of the city. It is recommended to include city with the request to increase the hit accuracy.  (optional)</param>
        /// <param name="address">Street address (contains street name and house number) (optional)</param>
        /// <param name="id">The ID of the pickup point. Used to look up a specific service point for a carrier. When used, zip code is no longer required. Some carrier may not support this parameter. (optional)</param>
        /// <param name="quantity">Defines how many pickup points are being returned. (optional, default to 10)</param>
        /// <param name="collectPoints">Set as true to get collect points for products like GLS Click&amp;Collect (optional, default to false)</param>
        /// <param name="productCode">Used to, e.g., determine whether to return postfiliale (default) or packstations for DHL Parcel. (optional)</param>
        /// <param name="inDelivery">Filter on whether or not the pickup point supports drop-off of parcels. (optional)</param>
        /// <param name="outDelivery">Filter on whether or not the pickup point supports pickup of parcels. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServicePoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ShipmondoApi.Dotnet.Client.ApiResponse<List<ServicePoint>>> PickupPointsGetWithHttpInfoAsync(string carrierCode, string countryCode, string zipcode, string city = default(string), string address = default(string), string id = default(string), int? quantity = default(int?), bool? collectPoints = default(bool?), string productCode = default(string), bool? inDelivery = default(bool?), bool? outDelivery = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'carrierCode' is set
            if (carrierCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'carrierCode' when calling ServicePointsApi->PickupPointsGet");
            }

            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'countryCode' when calling ServicePointsApi->PickupPointsGet");
            }

            // verify the required parameter 'zipcode' is set
            if (zipcode == null)
            {
                throw new ShipmondoApi.Dotnet.Client.ApiException(400, "Missing required parameter 'zipcode' when calling ServicePointsApi->PickupPointsGet");
            }


            ShipmondoApi.Dotnet.Client.RequestOptions localVarRequestOptions = new ShipmondoApi.Dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ShipmondoApi.Dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "carrier_code", carrierCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "country_code", countryCode));
            localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "zipcode", zipcode));
            if (city != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "city", city));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (collectPoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "collect_points", collectPoints));
            }
            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "product_code", productCode));
            }
            if (inDelivery != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "in_delivery", inDelivery));
            }
            if (outDelivery != null)
            {
                localVarRequestOptions.QueryParameters.Add(ShipmondoApi.Dotnet.Client.ClientUtils.ParameterToMultiMap("", "out_delivery", outDelivery));
            }

            localVarRequestOptions.Operation = "ServicePointsApi.PickupPointsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ShipmondoApi.Dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServicePoint>>("/pickup_points", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupPointsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
