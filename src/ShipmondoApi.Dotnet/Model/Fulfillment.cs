/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Fulfillment
    /// </summary>
    [DataContract(Name = "Fulfillment")]
    public partial class Fulfillment : IEquatable<Fulfillment>, IValidatableObject
    {
        /// <summary>
        /// The type of the fulfillment.
        /// </summary>
        /// <value>The type of the fulfillment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Outbound for value: outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            Outbound = 1,

            /// <summary>
            /// Enum Return for value: return
            /// </summary>
            [EnumMember(Value = "return")]
            Return = 2

        }


        /// <summary>
        /// The type of the fulfillment.
        /// </summary>
        /// <value>The type of the fulfillment.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fulfillment" /> class.
        /// </summary>
        /// <param name="id">The generated id for the fulfillment..</param>
        /// <param name="code">The generated code for the fulfillment. Generated from the provided order ID.</param>
        /// <param name="type">The type of the fulfillment..</param>
        /// <param name="shipmentId">Unique identifier of the created shipment..</param>
        /// <param name="fulfilledByThirdParty">Defines if fulfillment is fulfilled by a third party..</param>
        /// <param name="orderPackagingId">Specifies which order packaging that has been used..</param>
        /// <param name="cancelled">Defines if fulfillment is cancelled..</param>
        /// <param name="createdAt">ISO 8601 datetime the object was created..</param>
        /// <param name="updatedAt">ISO 8601 datetime when the object was updated..</param>
        /// <param name="fulfillmentLines">Fulfilled lines for the sales_order..</param>
        public Fulfillment(int id = default(int), string code = default(string), TypeEnum? type = default(TypeEnum?), int shipmentId = default(int), bool fulfilledByThirdParty = default(bool), int orderPackagingId = default(int), bool cancelled = default(bool), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), List<FulfillmentFulfillmentLinesInner> fulfillmentLines = default(List<FulfillmentFulfillmentLinesInner>))
        {
            this.Id = id;
            this.Code = code;
            this.Type = type;
            this.ShipmentId = shipmentId;
            this.FulfilledByThirdParty = fulfilledByThirdParty;
            this.OrderPackagingId = orderPackagingId;
            this.Cancelled = cancelled;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.FulfillmentLines = fulfillmentLines;
        }

        /// <summary>
        /// The generated id for the fulfillment.
        /// </summary>
        /// <value>The generated id for the fulfillment.</value>
        /// <example>6684</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The generated code for the fulfillment. Generated from the provided order ID
        /// </summary>
        /// <value>The generated code for the fulfillment. Generated from the provided order ID</value>
        /// <example>&quot;27000-1&quot;</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Unique identifier of the created shipment.
        /// </summary>
        /// <value>Unique identifier of the created shipment.</value>
        /// <example>14500</example>
        [DataMember(Name = "shipment_id", EmitDefaultValue = false)]
        public int ShipmentId { get; set; }

        /// <summary>
        /// Defines if fulfillment is fulfilled by a third party.
        /// </summary>
        /// <value>Defines if fulfillment is fulfilled by a third party.</value>
        /// <example>false</example>
        [DataMember(Name = "fulfilled_by_third_party", EmitDefaultValue = true)]
        public bool FulfilledByThirdParty { get; set; }

        /// <summary>
        /// Specifies which order packaging that has been used.
        /// </summary>
        /// <value>Specifies which order packaging that has been used.</value>
        /// <example>16</example>
        [DataMember(Name = "order_packaging_id", EmitDefaultValue = false)]
        public int OrderPackagingId { get; set; }

        /// <summary>
        /// Defines if fulfillment is cancelled.
        /// </summary>
        /// <value>Defines if fulfillment is cancelled.</value>
        /// <example>false</example>
        [DataMember(Name = "cancelled", EmitDefaultValue = true)]
        public bool Cancelled { get; set; }

        /// <summary>
        /// ISO 8601 datetime the object was created.
        /// </summary>
        /// <value>ISO 8601 datetime the object was created.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// ISO 8601 datetime when the object was updated.
        /// </summary>
        /// <value>ISO 8601 datetime when the object was updated.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Fulfilled lines for the sales_order.
        /// </summary>
        /// <value>Fulfilled lines for the sales_order.</value>
        [DataMember(Name = "fulfillment_lines", EmitDefaultValue = false)]
        public List<FulfillmentFulfillmentLinesInner> FulfillmentLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fulfillment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  FulfilledByThirdParty: ").Append(FulfilledByThirdParty).Append("\n");
            sb.Append("  OrderPackagingId: ").Append(OrderPackagingId).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FulfillmentLines: ").Append(FulfillmentLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fulfillment);
        }

        /// <summary>
        /// Returns true if Fulfillment instances are equal
        /// </summary>
        /// <param name="input">Instance of Fulfillment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fulfillment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    this.ShipmentId.Equals(input.ShipmentId)
                ) && 
                (
                    this.FulfilledByThirdParty == input.FulfilledByThirdParty ||
                    this.FulfilledByThirdParty.Equals(input.FulfilledByThirdParty)
                ) && 
                (
                    this.OrderPackagingId == input.OrderPackagingId ||
                    this.OrderPackagingId.Equals(input.OrderPackagingId)
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    this.Cancelled.Equals(input.Cancelled)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.FulfillmentLines == input.FulfillmentLines ||
                    this.FulfillmentLines != null &&
                    input.FulfillmentLines != null &&
                    this.FulfillmentLines.SequenceEqual(input.FulfillmentLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.ShipmentId.GetHashCode();
                hashCode = (hashCode * 59) + this.FulfilledByThirdParty.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderPackagingId.GetHashCode();
                hashCode = (hashCode * 59) + this.Cancelled.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.FulfillmentLines != null)
                {
                    hashCode = (hashCode * 59) + this.FulfillmentLines.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
