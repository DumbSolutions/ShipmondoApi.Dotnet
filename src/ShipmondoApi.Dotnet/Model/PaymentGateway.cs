/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// PaymentGateway
    /// </summary>
    [DataContract(Name = "PaymentGateway")]
    public partial class PaymentGateway : IEquatable<PaymentGateway>, IValidatableObject
    {
        /// <summary>
        /// Specific code of the gateway used to refer to the provider.
        /// </summary>
        /// <value>Specific code of the gateway used to refer to the provider.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderEnum
        {
            /// <summary>
            /// Enum Epay for value: epay
            /// </summary>
            [EnumMember(Value = "epay")]
            Epay = 1,

            /// <summary>
            /// Enum QuickPay for value: quick_pay
            /// </summary>
            [EnumMember(Value = "quick_pay")]
            QuickPay = 2,

            /// <summary>
            /// Enum Stripe for value: stripe
            /// </summary>
            [EnumMember(Value = "stripe")]
            Stripe = 3,

            /// <summary>
            /// Enum Yourpay for value: yourpay
            /// </summary>
            [EnumMember(Value = "yourpay")]
            Yourpay = 4,

            /// <summary>
            /// Enum PensoPay for value: penso_pay
            /// </summary>
            [EnumMember(Value = "penso_pay")]
            PensoPay = 5,

            /// <summary>
            /// Enum Dibs for value: dibs
            /// </summary>
            [EnumMember(Value = "dibs")]
            Dibs = 6,

            /// <summary>
            /// Enum OnPay for value: on_pay
            /// </summary>
            [EnumMember(Value = "on_pay")]
            OnPay = 7,

            /// <summary>
            /// Enum Reepay for value: reepay
            /// </summary>
            [EnumMember(Value = "reepay")]
            Reepay = 8,

            /// <summary>
            /// Enum Klarna for value: klarna
            /// </summary>
            [EnumMember(Value = "klarna")]
            Klarna = 9,

            /// <summary>
            /// Enum ShopifyPayments for value: shopify_payments
            /// </summary>
            [EnumMember(Value = "shopify_payments")]
            ShopifyPayments = 10,

            /// <summary>
            /// Enum Paypal for value: paypal
            /// </summary>
            [EnumMember(Value = "paypal")]
            Paypal = 11,

            /// <summary>
            /// Enum DibsEasy for value: dibs_easy
            /// </summary>
            [EnumMember(Value = "dibs_easy")]
            DibsEasy = 12,

            /// <summary>
            /// Enum Paylike for value: paylike
            /// </summary>
            [EnumMember(Value = "paylike")]
            Paylike = 13,

            /// <summary>
            /// Enum BamboraCheckout for value: bambora_checkout
            /// </summary>
            [EnumMember(Value = "bambora_checkout")]
            BamboraCheckout = 14,

            /// <summary>
            /// Enum Anyday for value: anyday
            /// </summary>
            [EnumMember(Value = "anyday")]
            Anyday = 15,

            /// <summary>
            /// Enum Freepay for value: freepay
            /// </summary>
            [EnumMember(Value = "freepay")]
            Freepay = 16,

            /// <summary>
            /// Enum Swiipe for value: swiipe
            /// </summary>
            [EnumMember(Value = "swiipe")]
            Swiipe = 17,

            /// <summary>
            /// Enum ShipmondoPayments for value: shipmondo_payments
            /// </summary>
            [EnumMember(Value = "shipmondo_payments")]
            ShipmondoPayments = 18,

            /// <summary>
            /// Enum Vipps for value: vipps
            /// </summary>
            [EnumMember(Value = "vipps")]
            Vipps = 19

        }


        /// <summary>
        /// Specific code of the gateway used to refer to the provider.
        /// </summary>
        /// <value>Specific code of the gateway used to refer to the provider.</value>
        /// <example>&quot;quick_pay&quot;</example>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public ProviderEnum? Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGateway" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the object..</param>
        /// <param name="name">User-specified name of the payment gateway..</param>
        /// <param name="provider">Specific code of the gateway used to refer to the provider..</param>
        /// <param name="merchantNumber">Mechant number of the payment gateway..</param>
        public PaymentGateway(int id = default(int), string name = default(string), ProviderEnum? provider = default(ProviderEnum?), string merchantNumber = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Provider = provider;
            this.MerchantNumber = merchantNumber;
        }

        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        /// <value>Unique identifier of the object.</value>
        /// <example>5314</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// User-specified name of the payment gateway.
        /// </summary>
        /// <value>User-specified name of the payment gateway.</value>
        /// <example>&quot;QuickPay 1&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Mechant number of the payment gateway.
        /// </summary>
        /// <value>Mechant number of the payment gateway.</value>
        /// <example>&quot;12345678&quot;</example>
        [DataMember(Name = "merchant_number", EmitDefaultValue = false)]
        public string MerchantNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentGateway {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  MerchantNumber: ").Append(MerchantNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentGateway);
        }

        /// <summary>
        /// Returns true if PaymentGateway instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentGateway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentGateway input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Provider == input.Provider ||
                    this.Provider.Equals(input.Provider)
                ) && 
                (
                    this.MerchantNumber == input.MerchantNumber ||
                    (this.MerchantNumber != null &&
                    this.MerchantNumber.Equals(input.MerchantNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                if (this.MerchantNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
