/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateSalesOrderRequest
    /// </summary>
    [DataContract(Name = "CreateSalesOrderRequest")]
    public partial class CreateSalesOrderRequest : IEquatable<CreateSalesOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// If packing_slip_format is specified, the packing slips will be included in the response.
        /// </summary>
        /// <value>If packing_slip_format is specified, the packing slips will be included in the response.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackingSlipFormatEnum
        {
            /// <summary>
            /// Enum A4Pdf for value: a4_pdf
            /// </summary>
            [EnumMember(Value = "a4_pdf")]
            A4Pdf = 1,

            /// <summary>
            /// Enum _10x19Pdf for value: 10x19_pdf
            /// </summary>
            [EnumMember(Value = "10x19_pdf")]
            _10x19Pdf = 2

        }


        /// <summary>
        /// If packing_slip_format is specified, the packing slips will be included in the response.
        /// </summary>
        /// <value>If packing_slip_format is specified, the packing slips will be included in the response.</value>
        [DataMember(Name = "packing_slip_format", EmitDefaultValue = false)]
        public PackingSlipFormatEnum? PackingSlipFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSalesOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSalesOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSalesOrderRequest" /> class.
        /// </summary>
        /// <param name="orderId">Order ID for the sales order. (required).</param>
        /// <param name="orderedAt">ISO 8601 datetime the sales order was placed..</param>
        /// <param name="sourceName">Name of the source for the sales order..</param>
        /// <param name="orderNote">A note for the sales order..</param>
        /// <param name="archived">Defines whether or not the sales order is archived. (default to false).</param>
        /// <param name="shipmentTemplateId">ID of the provided shipment template. Specifies the product and services for the order.</param>
        /// <param name="returnShipmentTemplateId">ID of the provided return shipment template. Specifies the return product and services for the sales order..</param>
        /// <param name="salesOrderPackagingId">ID of the provided sales order packaging. The packaging specifies the dimensions for the order..</param>
        /// <param name="bookkeepingIntegrationId">ID of the provided bookkeeping integration. Allows the user to create invoices from the order..</param>
        /// <param name="packingSlipFormat">If packing_slip_format is specified, the packing slips will be included in the response..</param>
        /// <param name="enableCustoms">Defines if order should use customs information from the associated item when creating shipments. (default to false).</param>
        /// <param name="useItemWeight">Defines if item weight should be used when creating shipments. (default to true).</param>
        /// <param name="shipTo">shipTo (required).</param>
        /// <param name="billTo">billTo (required).</param>
        /// <param name="sender">sender.</param>
        /// <param name="paymentDetails">paymentDetails (required).</param>
        /// <param name="servicePoint">servicePoint.</param>
        /// <param name="orderLines">The order lines describe all the lines for the sales order, including items, shipping, and more. (required).</param>
        public CreateSalesOrderRequest(string orderId = default(string), DateTime orderedAt = default(DateTime), string sourceName = default(string), string orderNote = default(string), bool archived = false, int shipmentTemplateId = default(int), int returnShipmentTemplateId = default(int), int salesOrderPackagingId = default(int), int bookkeepingIntegrationId = default(int), PackingSlipFormatEnum? packingSlipFormat = default(PackingSlipFormatEnum?), bool enableCustoms = false, bool useItemWeight = true, SalesOrderShipToRequest shipTo = default(SalesOrderShipToRequest), SalesOrderBillToRequest billTo = default(SalesOrderBillToRequest), SenderRequest sender = default(SenderRequest), PaymentDetailsRequest paymentDetails = default(PaymentDetailsRequest), ServicePointSimple servicePoint = default(ServicePointSimple), List<OrderLineRequest> orderLines = default(List<OrderLineRequest>))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for CreateSalesOrderRequest and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "shipTo" is required (not null)
            if (shipTo == null)
            {
                throw new ArgumentNullException("shipTo is a required property for CreateSalesOrderRequest and cannot be null");
            }
            this.ShipTo = shipTo;
            // to ensure "billTo" is required (not null)
            if (billTo == null)
            {
                throw new ArgumentNullException("billTo is a required property for CreateSalesOrderRequest and cannot be null");
            }
            this.BillTo = billTo;
            // to ensure "paymentDetails" is required (not null)
            if (paymentDetails == null)
            {
                throw new ArgumentNullException("paymentDetails is a required property for CreateSalesOrderRequest and cannot be null");
            }
            this.PaymentDetails = paymentDetails;
            // to ensure "orderLines" is required (not null)
            if (orderLines == null)
            {
                throw new ArgumentNullException("orderLines is a required property for CreateSalesOrderRequest and cannot be null");
            }
            this.OrderLines = orderLines;
            this.OrderedAt = orderedAt;
            this.SourceName = sourceName;
            this.OrderNote = orderNote;
            this.Archived = archived;
            this.ShipmentTemplateId = shipmentTemplateId;
            this.ReturnShipmentTemplateId = returnShipmentTemplateId;
            this.SalesOrderPackagingId = salesOrderPackagingId;
            this.BookkeepingIntegrationId = bookkeepingIntegrationId;
            this.PackingSlipFormat = packingSlipFormat;
            this.EnableCustoms = enableCustoms;
            this.UseItemWeight = useItemWeight;
            this.Sender = sender;
            this.ServicePoint = servicePoint;
        }

        /// <summary>
        /// Order ID for the sales order.
        /// </summary>
        /// <value>Order ID for the sales order.</value>
        /// <example>&quot;27000&quot;</example>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// ISO 8601 datetime the sales order was placed.
        /// </summary>
        /// <value>ISO 8601 datetime the sales order was placed.</value>
        /// <example>&quot;2018-10-17T13:25:44.557Z&quot;</example>
        [DataMember(Name = "ordered_at", EmitDefaultValue = false)]
        public DateTime OrderedAt { get; set; }

        /// <summary>
        /// Name of the source for the sales order.
        /// </summary>
        /// <value>Name of the source for the sales order.</value>
        /// <example>&quot;Testcompany ApS&quot;</example>
        [DataMember(Name = "source_name", EmitDefaultValue = false)]
        public string SourceName { get; set; }

        /// <summary>
        /// A note for the sales order.
        /// </summary>
        /// <value>A note for the sales order.</value>
        /// <example>&quot;Note&quot;</example>
        [DataMember(Name = "order_note", EmitDefaultValue = false)]
        public string OrderNote { get; set; }

        /// <summary>
        /// Defines whether or not the sales order is archived.
        /// </summary>
        /// <value>Defines whether or not the sales order is archived.</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// ID of the provided shipment template. Specifies the product and services for the order
        /// </summary>
        /// <value>ID of the provided shipment template. Specifies the product and services for the order</value>
        /// <example>710</example>
        [DataMember(Name = "shipment_template_id", EmitDefaultValue = false)]
        public int ShipmentTemplateId { get; set; }

        /// <summary>
        /// ID of the provided return shipment template. Specifies the return product and services for the sales order.
        /// </summary>
        /// <value>ID of the provided return shipment template. Specifies the return product and services for the sales order.</value>
        /// <example>710</example>
        [DataMember(Name = "return_shipment_template_id", EmitDefaultValue = false)]
        public int ReturnShipmentTemplateId { get; set; }

        /// <summary>
        /// ID of the provided sales order packaging. The packaging specifies the dimensions for the order.
        /// </summary>
        /// <value>ID of the provided sales order packaging. The packaging specifies the dimensions for the order.</value>
        /// <example>11242</example>
        [DataMember(Name = "sales_order_packaging_id", EmitDefaultValue = false)]
        public int SalesOrderPackagingId { get; set; }

        /// <summary>
        /// ID of the provided bookkeeping integration. Allows the user to create invoices from the order.
        /// </summary>
        /// <value>ID of the provided bookkeeping integration. Allows the user to create invoices from the order.</value>
        /// <example>241</example>
        [DataMember(Name = "bookkeeping_integration_id", EmitDefaultValue = false)]
        public int BookkeepingIntegrationId { get; set; }

        /// <summary>
        /// Defines if order should use customs information from the associated item when creating shipments.
        /// </summary>
        /// <value>Defines if order should use customs information from the associated item when creating shipments.</value>
        [DataMember(Name = "enable_customs", EmitDefaultValue = true)]
        public bool EnableCustoms { get; set; }

        /// <summary>
        /// Defines if item weight should be used when creating shipments.
        /// </summary>
        /// <value>Defines if item weight should be used when creating shipments.</value>
        [DataMember(Name = "use_item_weight", EmitDefaultValue = true)]
        public bool UseItemWeight { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "ship_to", IsRequired = true, EmitDefaultValue = true)]
        public SalesOrderShipToRequest ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name = "bill_to", IsRequired = true, EmitDefaultValue = true)]
        public SalesOrderBillToRequest BillTo { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public SenderRequest Sender { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDetails
        /// </summary>
        [DataMember(Name = "payment_details", IsRequired = true, EmitDefaultValue = true)]
        public PaymentDetailsRequest PaymentDetails { get; set; }

        /// <summary>
        /// Gets or Sets ServicePoint
        /// </summary>
        [DataMember(Name = "service_point", EmitDefaultValue = false)]
        public ServicePointSimple ServicePoint { get; set; }

        /// <summary>
        /// The order lines describe all the lines for the sales order, including items, shipping, and more.
        /// </summary>
        /// <value>The order lines describe all the lines for the sales order, including items, shipping, and more.</value>
        [DataMember(Name = "order_lines", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderLineRequest> OrderLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSalesOrderRequest {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderedAt: ").Append(OrderedAt).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  OrderNote: ").Append(OrderNote).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ShipmentTemplateId: ").Append(ShipmentTemplateId).Append("\n");
            sb.Append("  ReturnShipmentTemplateId: ").Append(ReturnShipmentTemplateId).Append("\n");
            sb.Append("  SalesOrderPackagingId: ").Append(SalesOrderPackagingId).Append("\n");
            sb.Append("  BookkeepingIntegrationId: ").Append(BookkeepingIntegrationId).Append("\n");
            sb.Append("  PackingSlipFormat: ").Append(PackingSlipFormat).Append("\n");
            sb.Append("  EnableCustoms: ").Append(EnableCustoms).Append("\n");
            sb.Append("  UseItemWeight: ").Append(UseItemWeight).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  PaymentDetails: ").Append(PaymentDetails).Append("\n");
            sb.Append("  ServicePoint: ").Append(ServicePoint).Append("\n");
            sb.Append("  OrderLines: ").Append(OrderLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSalesOrderRequest);
        }

        /// <summary>
        /// Returns true if CreateSalesOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSalesOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSalesOrderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderedAt == input.OrderedAt ||
                    (this.OrderedAt != null &&
                    this.OrderedAt.Equals(input.OrderedAt))
                ) && 
                (
                    this.SourceName == input.SourceName ||
                    (this.SourceName != null &&
                    this.SourceName.Equals(input.SourceName))
                ) && 
                (
                    this.OrderNote == input.OrderNote ||
                    (this.OrderNote != null &&
                    this.OrderNote.Equals(input.OrderNote))
                ) && 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                ) && 
                (
                    this.ShipmentTemplateId == input.ShipmentTemplateId ||
                    this.ShipmentTemplateId.Equals(input.ShipmentTemplateId)
                ) && 
                (
                    this.ReturnShipmentTemplateId == input.ReturnShipmentTemplateId ||
                    this.ReturnShipmentTemplateId.Equals(input.ReturnShipmentTemplateId)
                ) && 
                (
                    this.SalesOrderPackagingId == input.SalesOrderPackagingId ||
                    this.SalesOrderPackagingId.Equals(input.SalesOrderPackagingId)
                ) && 
                (
                    this.BookkeepingIntegrationId == input.BookkeepingIntegrationId ||
                    this.BookkeepingIntegrationId.Equals(input.BookkeepingIntegrationId)
                ) && 
                (
                    this.PackingSlipFormat == input.PackingSlipFormat ||
                    this.PackingSlipFormat.Equals(input.PackingSlipFormat)
                ) && 
                (
                    this.EnableCustoms == input.EnableCustoms ||
                    this.EnableCustoms.Equals(input.EnableCustoms)
                ) && 
                (
                    this.UseItemWeight == input.UseItemWeight ||
                    this.UseItemWeight.Equals(input.UseItemWeight)
                ) && 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.PaymentDetails == input.PaymentDetails ||
                    (this.PaymentDetails != null &&
                    this.PaymentDetails.Equals(input.PaymentDetails))
                ) && 
                (
                    this.ServicePoint == input.ServicePoint ||
                    (this.ServicePoint != null &&
                    this.ServicePoint.Equals(input.ServicePoint))
                ) && 
                (
                    this.OrderLines == input.OrderLines ||
                    this.OrderLines != null &&
                    input.OrderLines != null &&
                    this.OrderLines.SequenceEqual(input.OrderLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.OrderedAt != null)
                {
                    hashCode = (hashCode * 59) + this.OrderedAt.GetHashCode();
                }
                if (this.SourceName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceName.GetHashCode();
                }
                if (this.OrderNote != null)
                {
                    hashCode = (hashCode * 59) + this.OrderNote.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                hashCode = (hashCode * 59) + this.ShipmentTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnShipmentTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.SalesOrderPackagingId.GetHashCode();
                hashCode = (hashCode * 59) + this.BookkeepingIntegrationId.GetHashCode();
                hashCode = (hashCode * 59) + this.PackingSlipFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableCustoms.GetHashCode();
                hashCode = (hashCode * 59) + this.UseItemWeight.GetHashCode();
                if (this.ShipTo != null)
                {
                    hashCode = (hashCode * 59) + this.ShipTo.GetHashCode();
                }
                if (this.BillTo != null)
                {
                    hashCode = (hashCode * 59) + this.BillTo.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.PaymentDetails != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDetails.GetHashCode();
                }
                if (this.ServicePoint != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePoint.GetHashCode();
                }
                if (this.OrderLines != null)
                {
                    hashCode = (hashCode * 59) + this.OrderLines.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
