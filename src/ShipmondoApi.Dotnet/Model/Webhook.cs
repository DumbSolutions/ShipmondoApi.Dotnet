/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Webhook
    /// </summary>
    [DataContract(Name = "Webhook")]
    public partial class Webhook : IEquatable<Webhook>, IValidatableObject
    {
        /// <summary>
        /// The action that webhook is hooked to.
        /// </summary>
        /// <value>The action that webhook is hooked to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Create for value: create
            /// </summary>
            [EnumMember(Value = "create")]
            Create = 1,

            /// <summary>
            /// Enum Cancel for value: cancel
            /// </summary>
            [EnumMember(Value = "cancel")]
            Cancel = 2,

            /// <summary>
            /// Enum StatusUpdate for value: status_update
            /// </summary>
            [EnumMember(Value = "status_update")]
            StatusUpdate = 3,

            /// <summary>
            /// Enum CreateFulfillment for value: create_fulfillment
            /// </summary>
            [EnumMember(Value = "create_fulfillment")]
            CreateFulfillment = 4,

            /// <summary>
            /// Enum CreateShipment for value: create_shipment
            /// </summary>
            [EnumMember(Value = "create_shipment")]
            CreateShipment = 5,

            /// <summary>
            /// Enum PaymentCaptured for value: payment_captured
            /// </summary>
            [EnumMember(Value = "payment_captured")]
            PaymentCaptured = 6,

            /// <summary>
            /// Enum PaymentRefunded for value: payment_refunded
            /// </summary>
            [EnumMember(Value = "payment_refunded")]
            PaymentRefunded = 7,

            /// <summary>
            /// Enum PaymentVoided for value: payment_voided
            /// </summary>
            [EnumMember(Value = "payment_voided")]
            PaymentVoided = 8,

            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 9,

            /// <summary>
            /// Enum Latest for value: latest
            /// </summary>
            [EnumMember(Value = "latest")]
            Latest = 10,

            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 11

        }


        /// <summary>
        /// The action that webhook is hooked to.
        /// </summary>
        /// <value>The action that webhook is hooked to.</value>
        /// <example>&quot;create&quot;</example>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// The name of the resource that webhook is hooked to.
        /// </summary>
        /// <value>The name of the resource that webhook is hooked to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceNameEnum
        {
            /// <summary>
            /// Enum Shipments for value: Shipments
            /// </summary>
            [EnumMember(Value = "Shipments")]
            Shipments = 1,

            /// <summary>
            /// Enum Drafts for value: Drafts
            /// </summary>
            [EnumMember(Value = "Drafts")]
            Drafts = 2,

            /// <summary>
            /// Enum Orders for value: Orders
            /// </summary>
            [EnumMember(Value = "Orders")]
            Orders = 3,

            /// <summary>
            /// Enum ShipmentMonitor for value: Shipment Monitor
            /// </summary>
            [EnumMember(Value = "Shipment Monitor")]
            ShipmentMonitor = 4

        }


        /// <summary>
        /// The name of the resource that webhook is hooked to.
        /// </summary>
        /// <value>The name of the resource that webhook is hooked to.</value>
        /// <example>&quot;Shipments&quot;</example>
        [DataMember(Name = "resource_name", EmitDefaultValue = false)]
        public ResourceNameEnum? ResourceName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the object..</param>
        /// <param name="endpoint">Endpoint the webhook sends request to..</param>
        /// <param name="active">Indicates if the webhook is active..</param>
        /// <param name="createdAt">ISO 8601 datetime the object was created..</param>
        /// <param name="updatedAt">ISO 8601 datetime when the object was updated..</param>
        /// <param name="name">User-specified name of the webhook..</param>
        /// <param name="action">The action that webhook is hooked to..</param>
        /// <param name="resourceName">The name of the resource that webhook is hooked to..</param>
        public Webhook(int id = default(int), string endpoint = default(string), bool active = default(bool), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string name = default(string), ActionEnum? action = default(ActionEnum?), ResourceNameEnum? resourceName = default(ResourceNameEnum?))
        {
            this.Id = id;
            this.Endpoint = endpoint;
            this.Active = active;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Name = name;
            this.Action = action;
            this.ResourceName = resourceName;
        }

        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        /// <value>Unique identifier of the object.</value>
        /// <example>1</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Endpoint the webhook sends request to.
        /// </summary>
        /// <value>Endpoint the webhook sends request to.</value>
        /// <example>&quot;https://example.com/webhook&quot;</example>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Indicates if the webhook is active.
        /// </summary>
        /// <value>Indicates if the webhook is active.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// ISO 8601 datetime the object was created.
        /// </summary>
        /// <value>ISO 8601 datetime the object was created.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// ISO 8601 datetime when the object was updated.
        /// </summary>
        /// <value>ISO 8601 datetime when the object was updated.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// User-specified name of the webhook.
        /// </summary>
        /// <value>User-specified name of the webhook.</value>
        /// <example>&quot;Example Name&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.ResourceName == input.ResourceName ||
                    this.ResourceName.Equals(input.ResourceName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Endpoint != null)
                {
                    hashCode = (hashCode * 59) + this.Endpoint.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                hashCode = (hashCode * 59) + this.ResourceName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
