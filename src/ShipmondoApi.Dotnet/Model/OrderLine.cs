/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// OrderLine
    /// </summary>
    [DataContract(Name = "OrderLine")]
    public partial class OrderLine : IEquatable<OrderLine>, IValidatableObject
    {
        /// <summary>
        /// Specificies the type of line.
        /// </summary>
        /// <value>Specificies the type of line.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineTypeEnum
        {
            /// <summary>
            /// Enum Item for value: item
            /// </summary>
            [EnumMember(Value = "item")]
            Item = 1,

            /// <summary>
            /// Enum Shipping for value: shipping
            /// </summary>
            [EnumMember(Value = "shipping")]
            Shipping = 2,

            /// <summary>
            /// Enum Discount for value: discount
            /// </summary>
            [EnumMember(Value = "discount")]
            Discount = 3,

            /// <summary>
            /// Enum GiftCard for value: gift_card
            /// </summary>
            [EnumMember(Value = "gift_card")]
            GiftCard = 4,

            /// <summary>
            /// Enum PaymentFee for value: payment_fee
            /// </summary>
            [EnumMember(Value = "payment_fee")]
            PaymentFee = 5

        }


        /// <summary>
        /// Specificies the type of line.
        /// </summary>
        /// <value>Specificies the type of line.</value>
        /// <example>&quot;item&quot;</example>
        [DataMember(Name = "line_type", EmitDefaultValue = false)]
        public LineTypeEnum? LineType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLine" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the object..</param>
        /// <param name="lineType">Specificies the type of line..</param>
        /// <param name="itemSku">Stock keeping unit (SKU) of the item.</param>
        /// <param name="itemVariantCode">Variant code of the item.</param>
        /// <param name="itemName">Name of the item.</param>
        /// <param name="quantity">The quantity of the item in the sales order.</param>
        /// <param name="unitPriceExcludingVat">Price excluding taxes of a single item in the order line.</param>
        /// <param name="discountAmountExcludingVat">Total discount of the items in the order line.</param>
        /// <param name="amountExcludingVat">Total price excluding taxes for the order line.</param>
        /// <param name="amountIncludingVat">Total price including taxes for the order line.</param>
        /// <param name="vatAmount">Total tax amount for the order line.</param>
        /// <param name="vatPercent">Tax percentage for the order line.</param>
        /// <param name="currencyCode">ISO 4217 currency code.</param>
        /// <param name="itemBarcode">Barcode of the item. Used when scanning item for pick..</param>
        /// <param name="itemBin">The bin/location where the item is located in the warehouse..</param>
        /// <param name="shippedQuantity">The quantity of the item that has been shipped/fulfilled..</param>
        /// <param name="unitWeight">The weight of a single item in the order line..</param>
        /// <param name="imageUrl">Image URL of the item that appears on the order or when picking. Will only be displayed if the URL is HTTPS..</param>
        /// <param name="costPrice">Unit cost price of the item as used for customs..</param>
        /// <param name="countryCodeOfOrigin">ISO 3166-1 alpha-2 country code of origin..</param>
        /// <param name="customsCommodityCode">Tariff code for the item. Used when creating shipments that require customs declaration..</param>
        /// <param name="customsDescription">Customs description for the item. Used when creating shipments that require customs declaration..</param>
        public OrderLine(int id = default(int), LineTypeEnum? lineType = default(LineTypeEnum?), string itemSku = default(string), string itemVariantCode = default(string), string itemName = default(string), string quantity = default(string), string unitPriceExcludingVat = default(string), string discountAmountExcludingVat = default(string), string amountExcludingVat = default(string), string amountIncludingVat = default(string), string vatAmount = default(string), string vatPercent = default(string), string currencyCode = default(string), string itemBarcode = default(string), string itemBin = default(string), string shippedQuantity = default(string), int unitWeight = default(int), string imageUrl = default(string), string costPrice = default(string), string countryCodeOfOrigin = default(string), string customsCommodityCode = default(string), string customsDescription = default(string))
        {
            this.Id = id;
            this.LineType = lineType;
            this.ItemSku = itemSku;
            this.ItemVariantCode = itemVariantCode;
            this.ItemName = itemName;
            this.Quantity = quantity;
            this.UnitPriceExcludingVat = unitPriceExcludingVat;
            this.DiscountAmountExcludingVat = discountAmountExcludingVat;
            this.AmountExcludingVat = amountExcludingVat;
            this.AmountIncludingVat = amountIncludingVat;
            this.VatAmount = vatAmount;
            this.VatPercent = vatPercent;
            this.CurrencyCode = currencyCode;
            this.ItemBarcode = itemBarcode;
            this.ItemBin = itemBin;
            this.ShippedQuantity = shippedQuantity;
            this.UnitWeight = unitWeight;
            this.ImageUrl = imageUrl;
            this.CostPrice = costPrice;
            this.CountryCodeOfOrigin = countryCodeOfOrigin;
            this.CustomsCommodityCode = customsCommodityCode;
            this.CustomsDescription = customsDescription;
        }

        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        /// <value>Unique identifier of the object.</value>
        /// <example>1234</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Stock keeping unit (SKU) of the item
        /// </summary>
        /// <value>Stock keeping unit (SKU) of the item</value>
        /// <example>&quot;TS001-WH&quot;</example>
        [DataMember(Name = "item_sku", EmitDefaultValue = false)]
        public string ItemSku { get; set; }

        /// <summary>
        /// Variant code of the item
        /// </summary>
        /// <value>Variant code of the item</value>
        /// <example>&quot;White&quot;</example>
        [DataMember(Name = "item_variant_code", EmitDefaultValue = false)]
        public string ItemVariantCode { get; set; }

        /// <summary>
        /// Name of the item
        /// </summary>
        /// <value>Name of the item</value>
        /// <example>&quot;T-Shirt&quot;</example>
        [DataMember(Name = "item_name", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// The quantity of the item in the sales order
        /// </summary>
        /// <value>The quantity of the item in the sales order</value>
        /// <example>&quot;2.0&quot;</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// Price excluding taxes of a single item in the order line
        /// </summary>
        /// <value>Price excluding taxes of a single item in the order line</value>
        /// <example>&quot;800.0&quot;</example>
        [DataMember(Name = "unit_price_excluding_vat", EmitDefaultValue = false)]
        public string UnitPriceExcludingVat { get; set; }

        /// <summary>
        /// Total discount of the items in the order line
        /// </summary>
        /// <value>Total discount of the items in the order line</value>
        /// <example>&quot;0.0&quot;</example>
        [DataMember(Name = "discount_amount_excluding_vat", EmitDefaultValue = false)]
        public string DiscountAmountExcludingVat { get; set; }

        /// <summary>
        /// Total price excluding taxes for the order line
        /// </summary>
        /// <value>Total price excluding taxes for the order line</value>
        /// <example>&quot;1600.0&quot;</example>
        [DataMember(Name = "amount_excluding_vat", EmitDefaultValue = false)]
        public string AmountExcludingVat { get; set; }

        /// <summary>
        /// Total price including taxes for the order line
        /// </summary>
        /// <value>Total price including taxes for the order line</value>
        /// <example>&quot;2000.0&quot;</example>
        [DataMember(Name = "amount_including_vat", EmitDefaultValue = false)]
        public string AmountIncludingVat { get; set; }

        /// <summary>
        /// Total tax amount for the order line
        /// </summary>
        /// <value>Total tax amount for the order line</value>
        /// <example>&quot;400.0&quot;</example>
        [DataMember(Name = "vat_amount", EmitDefaultValue = false)]
        public string VatAmount { get; set; }

        /// <summary>
        /// Tax percentage for the order line
        /// </summary>
        /// <value>Tax percentage for the order line</value>
        /// <example>&quot;0.25&quot;</example>
        [DataMember(Name = "vat_percent", EmitDefaultValue = false)]
        public string VatPercent { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>
        /// <value>ISO 4217 currency code</value>
        /// <example>&quot;DKK&quot;</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Barcode of the item. Used when scanning item for pick.
        /// </summary>
        /// <value>Barcode of the item. Used when scanning item for pick.</value>
        /// <example>&quot;12345678&quot;</example>
        [DataMember(Name = "item_barcode", EmitDefaultValue = false)]
        public string ItemBarcode { get; set; }

        /// <summary>
        /// The bin/location where the item is located in the warehouse.
        /// </summary>
        /// <value>The bin/location where the item is located in the warehouse.</value>
        /// <example>&quot;AB-001&quot;</example>
        [DataMember(Name = "item_bin", EmitDefaultValue = false)]
        public string ItemBin { get; set; }

        /// <summary>
        /// The quantity of the item that has been shipped/fulfilled.
        /// </summary>
        /// <value>The quantity of the item that has been shipped/fulfilled.</value>
        /// <example>&quot;0.0&quot;</example>
        [DataMember(Name = "shipped_quantity", EmitDefaultValue = false)]
        public string ShippedQuantity { get; set; }

        /// <summary>
        /// The weight of a single item in the order line.
        /// </summary>
        /// <value>The weight of a single item in the order line.</value>
        /// <example>2000</example>
        [DataMember(Name = "unit_weight", EmitDefaultValue = false)]
        public int UnitWeight { get; set; }

        /// <summary>
        /// Image URL of the item that appears on the order or when picking. Will only be displayed if the URL is HTTPS.
        /// </summary>
        /// <value>Image URL of the item that appears on the order or when picking. Will only be displayed if the URL is HTTPS.</value>
        /// <example>&quot;http://example.com/image&quot;</example>
        [DataMember(Name = "image_url", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Unit cost price of the item as used for customs.
        /// </summary>
        /// <value>Unit cost price of the item as used for customs.</value>
        /// <example>&quot;50.0&quot;</example>
        [DataMember(Name = "cost_price", EmitDefaultValue = false)]
        public string CostPrice { get; set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 country code of origin.
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code of origin.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "country_code_of_origin", EmitDefaultValue = false)]
        public string CountryCodeOfOrigin { get; set; }

        /// <summary>
        /// Tariff code for the item. Used when creating shipments that require customs declaration.
        /// </summary>
        /// <value>Tariff code for the item. Used when creating shipments that require customs declaration.</value>
        /// <example>&quot;123456&quot;</example>
        [DataMember(Name = "customs_commodity_code", EmitDefaultValue = false)]
        public string CustomsCommodityCode { get; set; }

        /// <summary>
        /// Customs description for the item. Used when creating shipments that require customs declaration.
        /// </summary>
        /// <value>Customs description for the item. Used when creating shipments that require customs declaration.</value>
        /// <example>&quot;Example contents&quot;</example>
        [DataMember(Name = "customs_description", EmitDefaultValue = false)]
        public string CustomsDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderLine {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  ItemSku: ").Append(ItemSku).Append("\n");
            sb.Append("  ItemVariantCode: ").Append(ItemVariantCode).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPriceExcludingVat: ").Append(UnitPriceExcludingVat).Append("\n");
            sb.Append("  DiscountAmountExcludingVat: ").Append(DiscountAmountExcludingVat).Append("\n");
            sb.Append("  AmountExcludingVat: ").Append(AmountExcludingVat).Append("\n");
            sb.Append("  AmountIncludingVat: ").Append(AmountIncludingVat).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  VatPercent: ").Append(VatPercent).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ItemBarcode: ").Append(ItemBarcode).Append("\n");
            sb.Append("  ItemBin: ").Append(ItemBin).Append("\n");
            sb.Append("  ShippedQuantity: ").Append(ShippedQuantity).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  CostPrice: ").Append(CostPrice).Append("\n");
            sb.Append("  CountryCodeOfOrigin: ").Append(CountryCodeOfOrigin).Append("\n");
            sb.Append("  CustomsCommodityCode: ").Append(CustomsCommodityCode).Append("\n");
            sb.Append("  CustomsDescription: ").Append(CustomsDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLine);
        }

        /// <summary>
        /// Returns true if OrderLine instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLine input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LineType == input.LineType ||
                    this.LineType.Equals(input.LineType)
                ) && 
                (
                    this.ItemSku == input.ItemSku ||
                    (this.ItemSku != null &&
                    this.ItemSku.Equals(input.ItemSku))
                ) && 
                (
                    this.ItemVariantCode == input.ItemVariantCode ||
                    (this.ItemVariantCode != null &&
                    this.ItemVariantCode.Equals(input.ItemVariantCode))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitPriceExcludingVat == input.UnitPriceExcludingVat ||
                    (this.UnitPriceExcludingVat != null &&
                    this.UnitPriceExcludingVat.Equals(input.UnitPriceExcludingVat))
                ) && 
                (
                    this.DiscountAmountExcludingVat == input.DiscountAmountExcludingVat ||
                    (this.DiscountAmountExcludingVat != null &&
                    this.DiscountAmountExcludingVat.Equals(input.DiscountAmountExcludingVat))
                ) && 
                (
                    this.AmountExcludingVat == input.AmountExcludingVat ||
                    (this.AmountExcludingVat != null &&
                    this.AmountExcludingVat.Equals(input.AmountExcludingVat))
                ) && 
                (
                    this.AmountIncludingVat == input.AmountIncludingVat ||
                    (this.AmountIncludingVat != null &&
                    this.AmountIncludingVat.Equals(input.AmountIncludingVat))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.VatPercent == input.VatPercent ||
                    (this.VatPercent != null &&
                    this.VatPercent.Equals(input.VatPercent))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ItemBarcode == input.ItemBarcode ||
                    (this.ItemBarcode != null &&
                    this.ItemBarcode.Equals(input.ItemBarcode))
                ) && 
                (
                    this.ItemBin == input.ItemBin ||
                    (this.ItemBin != null &&
                    this.ItemBin.Equals(input.ItemBin))
                ) && 
                (
                    this.ShippedQuantity == input.ShippedQuantity ||
                    (this.ShippedQuantity != null &&
                    this.ShippedQuantity.Equals(input.ShippedQuantity))
                ) && 
                (
                    this.UnitWeight == input.UnitWeight ||
                    this.UnitWeight.Equals(input.UnitWeight)
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.CostPrice == input.CostPrice ||
                    (this.CostPrice != null &&
                    this.CostPrice.Equals(input.CostPrice))
                ) && 
                (
                    this.CountryCodeOfOrigin == input.CountryCodeOfOrigin ||
                    (this.CountryCodeOfOrigin != null &&
                    this.CountryCodeOfOrigin.Equals(input.CountryCodeOfOrigin))
                ) && 
                (
                    this.CustomsCommodityCode == input.CustomsCommodityCode ||
                    (this.CustomsCommodityCode != null &&
                    this.CustomsCommodityCode.Equals(input.CustomsCommodityCode))
                ) && 
                (
                    this.CustomsDescription == input.CustomsDescription ||
                    (this.CustomsDescription != null &&
                    this.CustomsDescription.Equals(input.CustomsDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.LineType.GetHashCode();
                if (this.ItemSku != null)
                {
                    hashCode = (hashCode * 59) + this.ItemSku.GetHashCode();
                }
                if (this.ItemVariantCode != null)
                {
                    hashCode = (hashCode * 59) + this.ItemVariantCode.GetHashCode();
                }
                if (this.ItemName != null)
                {
                    hashCode = (hashCode * 59) + this.ItemName.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.UnitPriceExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.UnitPriceExcludingVat.GetHashCode();
                }
                if (this.DiscountAmountExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountAmountExcludingVat.GetHashCode();
                }
                if (this.AmountExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountExcludingVat.GetHashCode();
                }
                if (this.AmountIncludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountIncludingVat.GetHashCode();
                }
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                if (this.VatPercent != null)
                {
                    hashCode = (hashCode * 59) + this.VatPercent.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.ItemBarcode != null)
                {
                    hashCode = (hashCode * 59) + this.ItemBarcode.GetHashCode();
                }
                if (this.ItemBin != null)
                {
                    hashCode = (hashCode * 59) + this.ItemBin.GetHashCode();
                }
                if (this.ShippedQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.ShippedQuantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitWeight.GetHashCode();
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.CostPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CostPrice.GetHashCode();
                }
                if (this.CountryCodeOfOrigin != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCodeOfOrigin.GetHashCode();
                }
                if (this.CustomsCommodityCode != null)
                {
                    hashCode = (hashCode * 59) + this.CustomsCommodityCode.GetHashCode();
                }
                if (this.CustomsDescription != null)
                {
                    hashCode = (hashCode * 59) + this.CustomsDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
