/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// UpdateSalesOrderRequest
    /// </summary>
    [DataContract(Name = "UpdateSalesOrderRequest")]
    public partial class UpdateSalesOrderRequest : IEquatable<UpdateSalesOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSalesOrderRequest" /> class.
        /// </summary>
        /// <param name="shipmentTemplateId">ID of the provided shipment template. Specifies the product and services for the order..</param>
        /// <param name="returnShipmentTemplateId">ID of the provided return shipment template. Specifies the return product and services for the sales order..</param>
        /// <param name="salesOrderPackagingId">ID of the provided sales order packaging. The packaging specifies the dimensions for the sales order..</param>
        /// <param name="orderStatus">The status of the order in Shipmondo. Possible values: open, cancelled, on-hold.</param>
        /// <param name="enableCustoms">Defines if order should use customs information from the associated item when creating shipments. (default to false).</param>
        /// <param name="useItemWeight">Defines if item weight should be used when creating shipments. (default to true).</param>
        /// <param name="shipTo">shipTo.</param>
        /// <param name="billTo">billTo.</param>
        /// <param name="sender">sender.</param>
        /// <param name="servicePoint">servicePoint.</param>
        /// <param name="orderLines">Order lines for the order. If an order line ID is provided, it will update the existing line, otherwise a new line will be created. To remove an existing line, set the quantity to 0 when updating. Below are only updatable properties, see POST /sales_orders for create new order_line properties..</param>
        public UpdateSalesOrderRequest(int shipmentTemplateId = default(int), int returnShipmentTemplateId = default(int), int salesOrderPackagingId = default(int), string orderStatus = default(string), bool enableCustoms = false, bool useItemWeight = true, SalesOrderShipToRequest shipTo = default(SalesOrderShipToRequest), SalesOrderBillToRequest billTo = default(SalesOrderBillToRequest), Sender sender = default(Sender), ServicePointSimple servicePoint = default(ServicePointSimple), List<OrderLineUpdate> orderLines = default(List<OrderLineUpdate>))
        {
            this.ShipmentTemplateId = shipmentTemplateId;
            this.ReturnShipmentTemplateId = returnShipmentTemplateId;
            this.SalesOrderPackagingId = salesOrderPackagingId;
            this.OrderStatus = orderStatus;
            this.EnableCustoms = enableCustoms;
            this.UseItemWeight = useItemWeight;
            this.ShipTo = shipTo;
            this.BillTo = billTo;
            this.Sender = sender;
            this.ServicePoint = servicePoint;
            this.OrderLines = orderLines;
        }

        /// <summary>
        /// ID of the provided shipment template. Specifies the product and services for the order.
        /// </summary>
        /// <value>ID of the provided shipment template. Specifies the product and services for the order.</value>
        /// <example>710</example>
        [DataMember(Name = "shipment_template_id", EmitDefaultValue = false)]
        public int ShipmentTemplateId { get; set; }

        /// <summary>
        /// ID of the provided return shipment template. Specifies the return product and services for the sales order.
        /// </summary>
        /// <value>ID of the provided return shipment template. Specifies the return product and services for the sales order.</value>
        /// <example>710</example>
        [DataMember(Name = "return_shipment_template_id", EmitDefaultValue = false)]
        public int ReturnShipmentTemplateId { get; set; }

        /// <summary>
        /// ID of the provided sales order packaging. The packaging specifies the dimensions for the sales order.
        /// </summary>
        /// <value>ID of the provided sales order packaging. The packaging specifies the dimensions for the sales order.</value>
        /// <example>11242</example>
        [DataMember(Name = "sales_order_packaging_id", EmitDefaultValue = false)]
        public int SalesOrderPackagingId { get; set; }

        /// <summary>
        /// The status of the order in Shipmondo. Possible values: open, cancelled, on-hold
        /// </summary>
        /// <value>The status of the order in Shipmondo. Possible values: open, cancelled, on-hold</value>
        /// <example>&quot;open&quot;</example>
        [DataMember(Name = "order_status", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Defines if order should use customs information from the associated item when creating shipments.
        /// </summary>
        /// <value>Defines if order should use customs information from the associated item when creating shipments.</value>
        [DataMember(Name = "enable_customs", EmitDefaultValue = true)]
        public bool EnableCustoms { get; set; }

        /// <summary>
        /// Defines if item weight should be used when creating shipments.
        /// </summary>
        /// <value>Defines if item weight should be used when creating shipments.</value>
        [DataMember(Name = "use_item_weight", EmitDefaultValue = true)]
        public bool UseItemWeight { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "ship_to", EmitDefaultValue = false)]
        public SalesOrderShipToRequest ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name = "bill_to", EmitDefaultValue = false)]
        public SalesOrderBillToRequest BillTo { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public Sender Sender { get; set; }

        /// <summary>
        /// Gets or Sets ServicePoint
        /// </summary>
        [DataMember(Name = "service_point", EmitDefaultValue = false)]
        public ServicePointSimple ServicePoint { get; set; }

        /// <summary>
        /// Order lines for the order. If an order line ID is provided, it will update the existing line, otherwise a new line will be created. To remove an existing line, set the quantity to 0 when updating. Below are only updatable properties, see POST /sales_orders for create new order_line properties.
        /// </summary>
        /// <value>Order lines for the order. If an order line ID is provided, it will update the existing line, otherwise a new line will be created. To remove an existing line, set the quantity to 0 when updating. Below are only updatable properties, see POST /sales_orders for create new order_line properties.</value>
        [DataMember(Name = "order_lines", EmitDefaultValue = false)]
        public List<OrderLineUpdate> OrderLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSalesOrderRequest {\n");
            sb.Append("  ShipmentTemplateId: ").Append(ShipmentTemplateId).Append("\n");
            sb.Append("  ReturnShipmentTemplateId: ").Append(ReturnShipmentTemplateId).Append("\n");
            sb.Append("  SalesOrderPackagingId: ").Append(SalesOrderPackagingId).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  EnableCustoms: ").Append(EnableCustoms).Append("\n");
            sb.Append("  UseItemWeight: ").Append(UseItemWeight).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  ServicePoint: ").Append(ServicePoint).Append("\n");
            sb.Append("  OrderLines: ").Append(OrderLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSalesOrderRequest);
        }

        /// <summary>
        /// Returns true if UpdateSalesOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSalesOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSalesOrderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShipmentTemplateId == input.ShipmentTemplateId ||
                    this.ShipmentTemplateId.Equals(input.ShipmentTemplateId)
                ) && 
                (
                    this.ReturnShipmentTemplateId == input.ReturnShipmentTemplateId ||
                    this.ReturnShipmentTemplateId.Equals(input.ReturnShipmentTemplateId)
                ) && 
                (
                    this.SalesOrderPackagingId == input.SalesOrderPackagingId ||
                    this.SalesOrderPackagingId.Equals(input.SalesOrderPackagingId)
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.EnableCustoms == input.EnableCustoms ||
                    this.EnableCustoms.Equals(input.EnableCustoms)
                ) && 
                (
                    this.UseItemWeight == input.UseItemWeight ||
                    this.UseItemWeight.Equals(input.UseItemWeight)
                ) && 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.ServicePoint == input.ServicePoint ||
                    (this.ServicePoint != null &&
                    this.ServicePoint.Equals(input.ServicePoint))
                ) && 
                (
                    this.OrderLines == input.OrderLines ||
                    this.OrderLines != null &&
                    input.OrderLines != null &&
                    this.OrderLines.SequenceEqual(input.OrderLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ShipmentTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnShipmentTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.SalesOrderPackagingId.GetHashCode();
                if (this.OrderStatus != null)
                {
                    hashCode = (hashCode * 59) + this.OrderStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableCustoms.GetHashCode();
                hashCode = (hashCode * 59) + this.UseItemWeight.GetHashCode();
                if (this.ShipTo != null)
                {
                    hashCode = (hashCode * 59) + this.ShipTo.GetHashCode();
                }
                if (this.BillTo != null)
                {
                    hashCode = (hashCode * 59) + this.BillTo.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.ServicePoint != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePoint.GetHashCode();
                }
                if (this.OrderLines != null)
                {
                    hashCode = (hashCode * 59) + this.OrderLines.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
