/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateShipmentAdvanced
    /// </summary>
    [DataContract(Name = "CreateShipmentAdvanced")]
    public partial class CreateShipmentAdvanced : IEquatable<CreateShipmentAdvanced>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentAdvanced" /> class.
        /// </summary>
        /// <param name="testMode">For testing purpose. Shipment and labels generated are dummy and cannot be used. To create real shipments, remove this element or set it to be false.</param>
        /// <param name="ownAgreement">ownAgreement.</param>
        /// <param name="productCode">DHLE_EW equals DHL Express Express Worldwide.</param>
        /// <param name="serviceCodes">serviceCodes.</param>
        /// <param name="reference">reference.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="sender">sender.</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="pickUp">pickUp.</param>
        /// <param name="parcels">parcels.</param>
        public CreateShipmentAdvanced(bool testMode = default(bool), bool ownAgreement = default(bool), string productCode = default(string), string serviceCodes = default(string), string reference = default(string), string orderId = default(string), Sender sender = default(Sender), ShipmentReceiver receiver = default(ShipmentReceiver), PickUp pickUp = default(PickUp), List<ParcelAdvanced> parcels = default(List<ParcelAdvanced>))
        {
            this.TestMode = testMode;
            this.OwnAgreement = ownAgreement;
            this.ProductCode = productCode;
            this.ServiceCodes = serviceCodes;
            this.Reference = reference;
            this.OrderId = orderId;
            this.Sender = sender;
            this.Receiver = receiver;
            this.PickUp = pickUp;
            this.Parcels = parcels;
        }

        /// <summary>
        /// For testing purpose. Shipment and labels generated are dummy and cannot be used. To create real shipments, remove this element or set it to be false
        /// </summary>
        /// <value>For testing purpose. Shipment and labels generated are dummy and cannot be used. To create real shipments, remove this element or set it to be false</value>
        /// <example>true</example>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// Gets or Sets OwnAgreement
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "own_agreement", EmitDefaultValue = true)]
        public bool OwnAgreement { get; set; }

        /// <summary>
        /// DHLE_EW equals DHL Express Express Worldwide
        /// </summary>
        /// <value>DHLE_EW equals DHL Express Express Worldwide</value>
        /// <example>&quot;DHLE_EW&quot;</example>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCodes
        /// </summary>
        /// <example>&quot;EMAIL_NT,SMS_NT&quot;</example>
        [DataMember(Name = "service_codes", EmitDefaultValue = false)]
        public string ServiceCodes { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        /// <example>&quot;Webshop 5678&quot;</example>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        /// <example>&quot;1000002345&quot;</example>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public Sender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", EmitDefaultValue = false)]
        public ShipmentReceiver Receiver { get; set; }

        /// <summary>
        /// Gets or Sets PickUp
        /// </summary>
        [DataMember(Name = "pick_up", EmitDefaultValue = false)]
        public PickUp PickUp { get; set; }

        /// <summary>
        /// Gets or Sets Parcels
        /// </summary>
        [DataMember(Name = "parcels", EmitDefaultValue = false)]
        public List<ParcelAdvanced> Parcels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateShipmentAdvanced {\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  OwnAgreement: ").Append(OwnAgreement).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ServiceCodes: ").Append(ServiceCodes).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  PickUp: ").Append(PickUp).Append("\n");
            sb.Append("  Parcels: ").Append(Parcels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShipmentAdvanced);
        }

        /// <summary>
        /// Returns true if CreateShipmentAdvanced instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShipmentAdvanced to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShipmentAdvanced input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) && 
                (
                    this.OwnAgreement == input.OwnAgreement ||
                    this.OwnAgreement.Equals(input.OwnAgreement)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ServiceCodes == input.ServiceCodes ||
                    (this.ServiceCodes != null &&
                    this.ServiceCodes.Equals(input.ServiceCodes))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.PickUp == input.PickUp ||
                    (this.PickUp != null &&
                    this.PickUp.Equals(input.PickUp))
                ) && 
                (
                    this.Parcels == input.Parcels ||
                    this.Parcels != null &&
                    input.Parcels != null &&
                    this.Parcels.SequenceEqual(input.Parcels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnAgreement.GetHashCode();
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.ServiceCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCodes.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.PickUp != null)
                {
                    hashCode = (hashCode * 59) + this.PickUp.GetHashCode();
                }
                if (this.Parcels != null)
                {
                    hashCode = (hashCode * 59) + this.Parcels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
