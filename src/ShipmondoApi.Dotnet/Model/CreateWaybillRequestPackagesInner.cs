/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateWaybillRequestPackagesInner
    /// </summary>
    [DataContract(Name = "CreateWaybillRequest_packages_inner")]
    public partial class CreateWaybillRequestPackagesInner : IEquatable<CreateWaybillRequestPackagesInner>, IValidatableObject
    {
        /// <summary>
        /// Product code of the parcels that the pallet contains. If pallets contain multiple products, the codes must be comma-separated, e.g., \&quot;PDK_M,PDK_BP\&quot;.
        /// </summary>
        /// <value>Product code of the parcels that the pallet contains. If pallets contain multiple products, the codes must be comma-separated, e.g., \&quot;PDK_M,PDK_BP\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductCodeEnum
        {
            /// <summary>
            /// Enum BRIPPB for value: BRI_PPB
            /// </summary>
            [EnumMember(Value = "BRI_PPB")]
            BRIPPB = 1,

            /// <summary>
            /// Enum BRIBPB for value: BRI_BPB
            /// </summary>
            [EnumMember(Value = "BRI_BPB")]
            BRIBPB = 2,

            /// <summary>
            /// Enum PDKBP for value: PDK_BP
            /// </summary>
            [EnumMember(Value = "PDK_BP")]
            PDKBP = 3,

            /// <summary>
            /// Enum PDKM for value: PDK_M
            /// </summary>
            [EnumMember(Value = "PDK_M")]
            PDKM = 4,

            /// <summary>
            /// Enum PDKTB for value: PDK_TB
            /// </summary>
            [EnumMember(Value = "PDK_TB")]
            PDKTB = 5,

            /// <summary>
            /// Enum PDKPL for value: PDK_PL
            /// </summary>
            [EnumMember(Value = "PDK_PL")]
            PDKPL = 6

        }


        /// <summary>
        /// Product code of the parcels that the pallet contains. If pallets contain multiple products, the codes must be comma-separated, e.g., \&quot;PDK_M,PDK_BP\&quot;.
        /// </summary>
        /// <value>Product code of the parcels that the pallet contains. If pallets contain multiple products, the codes must be comma-separated, e.g., \&quot;PDK_M,PDK_BP\&quot;.</value>
        /// <example>&quot;BRI_PPB&quot;</example>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public ProductCodeEnum? ProductCode { get; set; }
        /// <summary>
        /// Type of pallet. Determines whether it is a pallet for individual parcel shipments or the shipment is the pallet itself.
        /// </summary>
        /// <value>Type of pallet. Determines whether it is a pallet for individual parcel shipments or the shipment is the pallet itself.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackageTypeEnum
        {
            /// <summary>
            /// Enum PARCEL for value: PARCEL
            /// </summary>
            [EnumMember(Value = "PARCEL")]
            PARCEL = 1,

            /// <summary>
            /// Enum PALLET for value: PALLET
            /// </summary>
            [EnumMember(Value = "PALLET")]
            PALLET = 2

        }


        /// <summary>
        /// Type of pallet. Determines whether it is a pallet for individual parcel shipments or the shipment is the pallet itself.
        /// </summary>
        /// <value>Type of pallet. Determines whether it is a pallet for individual parcel shipments or the shipment is the pallet itself.</value>
        /// <example>&quot;PARCEL&quot;</example>
        [DataMember(Name = "package_type", EmitDefaultValue = false)]
        public PackageTypeEnum? PackageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWaybillRequestPackagesInner" /> class.
        /// </summary>
        /// <param name="productCode">Product code of the parcels that the pallet contains. If pallets contain multiple products, the codes must be comma-separated, e.g., \&quot;PDK_M,PDK_BP\&quot;..</param>
        /// <param name="packageType">Type of pallet. Determines whether it is a pallet for individual parcel shipments or the shipment is the pallet itself..</param>
        /// <param name="amount">PARCEL: The amount of parcels in the pallet. PALLET: x amount of pallets. This is be split into x routing labels..</param>
        /// <param name="weight">Total weight of the pallet/parcels in grams.</param>
        public CreateWaybillRequestPackagesInner(ProductCodeEnum? productCode = default(ProductCodeEnum?), PackageTypeEnum? packageType = default(PackageTypeEnum?), int amount = default(int), int weight = default(int))
        {
            this.ProductCode = productCode;
            this.PackageType = packageType;
            this.Amount = amount;
            this.Weight = weight;
        }

        /// <summary>
        /// PARCEL: The amount of parcels in the pallet. PALLET: x amount of pallets. This is be split into x routing labels.
        /// </summary>
        /// <value>PARCEL: The amount of parcels in the pallet. PALLET: x amount of pallets. This is be split into x routing labels.</value>
        /// <example>3</example>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Total weight of the pallet/parcels in grams
        /// </summary>
        /// <value>Total weight of the pallet/parcels in grams</value>
        /// <example>1000</example>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWaybillRequestPackagesInner {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateWaybillRequestPackagesInner);
        }

        /// <summary>
        /// Returns true if CreateWaybillRequestPackagesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWaybillRequestPackagesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWaybillRequestPackagesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.PackageType == input.PackageType ||
                    this.PackageType.Equals(input.PackageType)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                hashCode = (hashCode * 59) + this.PackageType.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
