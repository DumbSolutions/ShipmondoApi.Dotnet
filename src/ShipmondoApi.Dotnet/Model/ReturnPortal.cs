/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// ReturnPortal
    /// </summary>
    [DataContract(Name = "ReturnPortal")]
    public partial class ReturnPortal : IEquatable<ReturnPortal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnPortal" /> class.
        /// </summary>
        /// <param name="id">ID of the return portal..</param>
        /// <param name="active">Whether the return portal is active and ready to use..</param>
        /// <param name="portalName">Last part of the URL to access the return portal: https://return.shipmondo.com/{portal_name}.</param>
        /// <param name="carrierCode">Carrier code for the carrier that is setup to the return portals..</param>
        public ReturnPortal(int id = default(int), bool active = default(bool), string portalName = default(string), string carrierCode = default(string))
        {
            this.Id = id;
            this.Active = active;
            this.PortalName = portalName;
            this.CarrierCode = carrierCode;
        }

        /// <summary>
        /// ID of the return portal.
        /// </summary>
        /// <value>ID of the return portal.</value>
        /// <example>43</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Whether the return portal is active and ready to use.
        /// </summary>
        /// <value>Whether the return portal is active and ready to use.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Last part of the URL to access the return portal: https://return.shipmondo.com/{portal_name}
        /// </summary>
        /// <value>Last part of the URL to access the return portal: https://return.shipmondo.com/{portal_name}</value>
        /// <example>&quot;mitfirma&quot;</example>
        [DataMember(Name = "portal_name", EmitDefaultValue = false)]
        public string PortalName { get; set; }

        /// <summary>
        /// Carrier code for the carrier that is setup to the return portals.
        /// </summary>
        /// <value>Carrier code for the carrier that is setup to the return portals.</value>
        /// <example>&quot;gls&quot;</example>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        [Obsolete]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnPortal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  PortalName: ").Append(PortalName).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnPortal);
        }

        /// <summary>
        /// Returns true if ReturnPortal instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnPortal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnPortal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.PortalName == input.PortalName ||
                    (this.PortalName != null &&
                    this.PortalName.Equals(input.PortalName))
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.PortalName != null)
                {
                    hashCode = (hashCode * 59) + this.PortalName.GetHashCode();
                }
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
