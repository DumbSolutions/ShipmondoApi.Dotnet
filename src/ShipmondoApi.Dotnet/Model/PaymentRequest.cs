/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// PaymentRequest
    /// </summary>
    [DataContract(Name = "PaymentRequest")]
    public partial class PaymentRequest : IEquatable<PaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Type related to the nature of the payment request.
        /// </summary>
        /// <value>Type related to the nature of the payment request.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineTypeEnum
        {
            /// <summary>
            /// Enum Shipment for value: shipment
            /// </summary>
            [EnumMember(Value = "shipment")]
            Shipment = 1,

            /// <summary>
            /// Enum Pickup for value: pickup
            /// </summary>
            [EnumMember(Value = "pickup")]
            Pickup = 2,

            /// <summary>
            /// Enum Fuel for value: fuel
            /// </summary>
            [EnumMember(Value = "fuel")]
            Fuel = 3,

            /// <summary>
            /// Enum Sulphur for value: sulphur
            /// </summary>
            [EnumMember(Value = "sulphur")]
            Sulphur = 4,

            /// <summary>
            /// Enum RoadToll for value: road_toll
            /// </summary>
            [EnumMember(Value = "road_toll")]
            RoadToll = 5,

            /// <summary>
            /// Enum NonCompliant for value: non_compliant
            /// </summary>
            [EnumMember(Value = "non_compliant")]
            NonCompliant = 6,

            /// <summary>
            /// Enum Oversize for value: oversize
            /// </summary>
            [EnumMember(Value = "oversize")]
            Oversize = 7,

            /// <summary>
            /// Enum IslandFee for value: island_fee
            /// </summary>
            [EnumMember(Value = "island_fee")]
            IslandFee = 8,

            /// <summary>
            /// Enum HangingGarment for value: hanging_garment
            /// </summary>
            [EnumMember(Value = "hanging_garment")]
            HangingGarment = 9,

            /// <summary>
            /// Enum AlternativeDelivery for value: alternative_delivery
            /// </summary>
            [EnumMember(Value = "alternative_delivery")]
            AlternativeDelivery = 10,

            /// <summary>
            /// Enum ReAddressing for value: re_addressing
            /// </summary>
            [EnumMember(Value = "re_addressing")]
            ReAddressing = 11,

            /// <summary>
            /// Enum UnfitForParcelShop for value: unfit_for_parcel_shop
            /// </summary>
            [EnumMember(Value = "unfit_for_parcel_shop")]
            UnfitForParcelShop = 12,

            /// <summary>
            /// Enum ReDelivery for value: re_delivery
            /// </summary>
            [EnumMember(Value = "re_delivery")]
            ReDelivery = 13,

            /// <summary>
            /// Enum ReturnFreight for value: return_freight
            /// </summary>
            [EnumMember(Value = "return_freight")]
            ReturnFreight = 14,

            /// <summary>
            /// Enum Overweight for value: overweight
            /// </summary>
            [EnumMember(Value = "overweight")]
            Overweight = 15,

            /// <summary>
            /// Enum HazardousGoodsService for value: hazardous_goods_service
            /// </summary>
            [EnumMember(Value = "hazardous_goods_service")]
            HazardousGoodsService = 16,

            /// <summary>
            /// Enum CustomsClearance for value: customs_clearance
            /// </summary>
            [EnumMember(Value = "customs_clearance")]
            CustomsClearance = 17,

            /// <summary>
            /// Enum RemoteArea for value: remote_area
            /// </summary>
            [EnumMember(Value = "remote_area")]
            RemoteArea = 18,

            /// <summary>
            /// Enum NotStackablePallet for value: not_stackable_pallet
            /// </summary>
            [EnumMember(Value = "not_stackable_pallet")]
            NotStackablePallet = 19,

            /// <summary>
            /// Enum TimeDefinite for value: time_definite
            /// </summary>
            [EnumMember(Value = "time_definite")]
            TimeDefinite = 20,

            /// <summary>
            /// Enum AddressCorrection for value: address_correction
            /// </summary>
            [EnumMember(Value = "address_correction")]
            AddressCorrection = 21,

            /// <summary>
            /// Enum CargoGodsFee for value: cargo_gods_fee
            /// </summary>
            [EnumMember(Value = "cargo_gods_fee")]
            CargoGodsFee = 22,

            /// <summary>
            /// Enum NoReply for value: no_reply
            /// </summary>
            [EnumMember(Value = "no_reply")]
            NoReply = 23,

            /// <summary>
            /// Enum MissingEdiData for value: missing_edi_data
            /// </summary>
            [EnumMember(Value = "missing_edi_data")]
            MissingEdiData = 24,

            /// <summary>
            /// Enum OversizeFifty for value: oversize_fifty
            /// </summary>
            [EnumMember(Value = "oversize_fifty")]
            OversizeFifty = 25,

            /// <summary>
            /// Enum Oversize60 for value: oversize_60
            /// </summary>
            [EnumMember(Value = "oversize_60")]
            Oversize60 = 26,

            /// <summary>
            /// Enum Oversize115 for value: oversize_115
            /// </summary>
            [EnumMember(Value = "oversize_115")]
            Oversize115 = 27,

            /// <summary>
            /// Enum Environmental for value: environmental
            /// </summary>
            [EnumMember(Value = "environmental")]
            Environmental = 28,

            /// <summary>
            /// Enum Security for value: security
            /// </summary>
            [EnumMember(Value = "security")]
            Security = 29,

            /// <summary>
            /// Enum CurrencyConversion for value: currency_conversion
            /// </summary>
            [EnumMember(Value = "currency_conversion")]
            CurrencyConversion = 30,

            /// <summary>
            /// Enum DropOffFee for value: drop_off_fee
            /// </summary>
            [EnumMember(Value = "drop_off_fee")]
            DropOffFee = 31,

            /// <summary>
            /// Enum BagOnDoor for value: bag_on_door
            /// </summary>
            [EnumMember(Value = "bag_on_door")]
            BagOnDoor = 32,

            /// <summary>
            /// Enum BarcodeUnreadable for value: barcode_unreadable
            /// </summary>
            [EnumMember(Value = "barcode_unreadable")]
            BarcodeUnreadable = 33,

            /// <summary>
            /// Enum BarcodeMisplaced for value: barcode_misplaced
            /// </summary>
            [EnumMember(Value = "barcode_misplaced")]
            BarcodeMisplaced = 34,

            /// <summary>
            /// Enum ShipmentInformationCorrection for value: shipment_information_correction
            /// </summary>
            [EnumMember(Value = "shipment_information_correction")]
            ShipmentInformationCorrection = 35,

            /// <summary>
            /// Enum SeasonalFee for value: seasonal_fee
            /// </summary>
            [EnumMember(Value = "seasonal_fee")]
            SeasonalFee = 36,

            /// <summary>
            /// Enum DeliveryObstacles for value: delivery_obstacles
            /// </summary>
            [EnumMember(Value = "delivery_obstacles")]
            DeliveryObstacles = 37,

            /// <summary>
            /// Enum ConversionFee for value: conversion_fee
            /// </summary>
            [EnumMember(Value = "conversion_fee")]
            ConversionFee = 38,

            /// <summary>
            /// Enum NonCollectedShipment for value: non_collected_shipment
            /// </summary>
            [EnumMember(Value = "non_collected_shipment")]
            NonCollectedShipment = 39,

            /// <summary>
            /// Enum EveningDelivery for value: evening_delivery
            /// </summary>
            [EnumMember(Value = "evening_delivery")]
            EveningDelivery = 40,

            /// <summary>
            /// Enum MissingMandatoryNotification for value: missing_mandatory_notification
            /// </summary>
            [EnumMember(Value = "missing_mandatory_notification")]
            MissingMandatoryNotification = 41,

            /// <summary>
            /// Enum GotlandFee for value: gotland_fee
            /// </summary>
            [EnumMember(Value = "gotland_fee")]
            GotlandFee = 42,

            /// <summary>
            /// Enum ColliFee for value: colli_fee
            /// </summary>
            [EnumMember(Value = "colli_fee")]
            ColliFee = 43,

            /// <summary>
            /// Enum Notification for value: notification
            /// </summary>
            [EnumMember(Value = "notification")]
            Notification = 44,

            /// <summary>
            /// Enum WarehouseRent for value: warehouse_rent
            /// </summary>
            [EnumMember(Value = "warehouse_rent")]
            WarehouseRent = 45,

            /// <summary>
            /// Enum ParcelInformationCorrection for value: parcel_information_correction
            /// </summary>
            [EnumMember(Value = "parcel_information_correction")]
            ParcelInformationCorrection = 46,

            /// <summary>
            /// Enum OutsideProductSpecification for value: outside_product_specification
            /// </summary>
            [EnumMember(Value = "outside_product_specification")]
            OutsideProductSpecification = 47,

            /// <summary>
            /// Enum SignatureAssurance for value: signature_assurance
            /// </summary>
            [EnumMember(Value = "signature_assurance")]
            SignatureAssurance = 48,

            /// <summary>
            /// Enum Brexit for value: brexit
            /// </summary>
            [EnumMember(Value = "brexit")]
            Brexit = 49,

            /// <summary>
            /// Enum PickupPrivate for value: pickup_private
            /// </summary>
            [EnumMember(Value = "pickup_private")]
            PickupPrivate = 50,

            /// <summary>
            /// Enum FreightAdjustment for value: freight_adjustment
            /// </summary>
            [EnumMember(Value = "freight_adjustment")]
            FreightAdjustment = 51,

            /// <summary>
            /// Enum Discount for value: discount
            /// </summary>
            [EnumMember(Value = "discount")]
            Discount = 52,

            /// <summary>
            /// Enum UseOfRefundedShipment for value: use_of_refunded_shipment
            /// </summary>
            [EnumMember(Value = "use_of_refunded_shipment")]
            UseOfRefundedShipment = 53,

            /// <summary>
            /// Enum BusinessToPrivate for value: business_to_private
            /// </summary>
            [EnumMember(Value = "business_to_private")]
            BusinessToPrivate = 54,

            /// <summary>
            /// Enum LabelReuse for value: label_reuse
            /// </summary>
            [EnumMember(Value = "label_reuse")]
            LabelReuse = 55,

            /// <summary>
            /// Enum ExcessWeight for value: excess_weight
            /// </summary>
            [EnumMember(Value = "excess_weight")]
            ExcessWeight = 56,

            /// <summary>
            /// Enum Others for value: others
            /// </summary>
            [EnumMember(Value = "others")]
            Others = 57,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 58

        }


        /// <summary>
        /// Type related to the nature of the payment request.
        /// </summary>
        /// <value>Type related to the nature of the payment request.</value>
        /// <example>&quot;non_compliant&quot;</example>
        [DataMember(Name = "line_type", EmitDefaultValue = false)]
        public LineTypeEnum? LineType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        /// <param name="id">ID of the payment request..</param>
        /// <param name="shipmentId">ID of the shipment that the payment request is related to..</param>
        /// <param name="reference">Information about the nature of the payment request..</param>
        /// <param name="lineType">Type related to the nature of the payment request..</param>
        /// <param name="amount">Amount to be paid..</param>
        /// <param name="currencyCode">Currency code of the amount..</param>
        /// <param name="createdAt">Date and time the payment request was created..</param>
        /// <param name="updatedAt">Date and time the payment request was last updated..</param>
        public PaymentRequest(int id = default(int), int shipmentId = default(int), string reference = default(string), LineTypeEnum? lineType = default(LineTypeEnum?), decimal amount = default(decimal), string currencyCode = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            this.Id = id;
            this.ShipmentId = shipmentId;
            this.Reference = reference;
            this.LineType = lineType;
            this.Amount = amount;
            this.CurrencyCode = currencyCode;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// ID of the payment request.
        /// </summary>
        /// <value>ID of the payment request.</value>
        /// <example>11460</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// ID of the shipment that the payment request is related to.
        /// </summary>
        /// <value>ID of the shipment that the payment request is related to.</value>
        /// <example>18651353</example>
        [DataMember(Name = "shipment_id", EmitDefaultValue = false)]
        public int ShipmentId { get; set; }

        /// <summary>
        /// Information about the nature of the payment request.
        /// </summary>
        /// <value>Information about the nature of the payment request.</value>
        /// <example>&quot;Non-compliant&quot;</example>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Amount to be paid.
        /// </summary>
        /// <value>Amount to be paid.</value>
        /// <example>22.5</example>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Currency code of the amount.
        /// </summary>
        /// <value>Currency code of the amount.</value>
        /// <example>&quot;DKK&quot;</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Date and time the payment request was created.
        /// </summary>
        /// <value>Date and time the payment request was created.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Date and time the payment request was last updated.
        /// </summary>
        /// <value>Date and time the payment request was last updated.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    this.ShipmentId.Equals(input.ShipmentId)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.LineType == input.LineType ||
                    this.LineType.Equals(input.LineType)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ShipmentId.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LineType.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
