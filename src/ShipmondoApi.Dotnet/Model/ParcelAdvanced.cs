/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// ParcelAdvanced
    /// </summary>
    [DataContract(Name = "ParcelAdvanced")]
    public partial class ParcelAdvanced : IEquatable<ParcelAdvanced>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelAdvanced" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParcelAdvanced() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelAdvanced" /> class.
        /// </summary>
        /// <param name="quantity">Number of parcels of this kind. Maximum quantity depends on the product. (default to 1).</param>
        /// <param name="weight">Weight in grams. (required).</param>
        /// <param name="length">Length in cm.</param>
        /// <param name="width">Width in cm.</param>
        /// <param name="height">Height in cm.</param>
        /// <param name="volume">Volume in cubic metres.</param>
        /// <param name="runningMetre">Running metre in metre.</param>
        /// <param name="description">Describes the contents of the parcel..</param>
        /// <param name="packaging">Package type for the parcel. Must be a valid package type for the customer..</param>
        /// <param name="dangerousGoods">dangerousGoods.</param>
        /// <param name="declaredValue">declaredValue.</param>
        public ParcelAdvanced(int quantity = 1, int weight = default(int), int length = default(int), int width = default(int), int height = default(int), decimal volume = default(decimal), decimal runningMetre = default(decimal), string description = default(string), string packaging = default(string), List<DangerousGood> dangerousGoods = default(List<DangerousGood>), DeclaredValue declaredValue = default(DeclaredValue))
        {
            this.Weight = weight;
            this.Quantity = quantity;
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.Volume = volume;
            this.RunningMetre = runningMetre;
            this.Description = description;
            this.Packaging = packaging;
            this.DangerousGoods = dangerousGoods;
            this.DeclaredValue = declaredValue;
        }

        /// <summary>
        /// Number of parcels of this kind. Maximum quantity depends on the product.
        /// </summary>
        /// <value>Number of parcels of this kind. Maximum quantity depends on the product.</value>
        /// <example>1</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Weight in grams.
        /// </summary>
        /// <value>Weight in grams.</value>
        /// <example>1000</example>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public int Weight { get; set; }

        /// <summary>
        /// Length in cm
        /// </summary>
        /// <value>Length in cm</value>
        /// <example>20</example>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public int Length { get; set; }

        /// <summary>
        /// Width in cm
        /// </summary>
        /// <value>Width in cm</value>
        /// <example>10</example>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Height in cm
        /// </summary>
        /// <value>Height in cm</value>
        /// <example>6</example>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Volume in cubic metres
        /// </summary>
        /// <value>Volume in cubic metres</value>
        /// <example>0.012</example>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public decimal Volume { get; set; }

        /// <summary>
        /// Running metre in metre
        /// </summary>
        /// <value>Running metre in metre</value>
        /// <example>1.25</example>
        [DataMember(Name = "running_metre", EmitDefaultValue = false)]
        public decimal RunningMetre { get; set; }

        /// <summary>
        /// Describes the contents of the parcel.
        /// </summary>
        /// <value>Describes the contents of the parcel.</value>
        /// <example>&quot;Bike accessories&quot;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Package type for the parcel. Must be a valid package type for the customer.
        /// </summary>
        /// <value>Package type for the parcel. Must be a valid package type for the customer.</value>
        /// <example>&quot;PL1&quot;</example>
        [DataMember(Name = "packaging", EmitDefaultValue = false)]
        public string Packaging { get; set; }

        /// <summary>
        /// Gets or Sets DangerousGoods
        /// </summary>
        [DataMember(Name = "dangerous_goods", EmitDefaultValue = false)]
        public List<DangerousGood> DangerousGoods { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name = "declared_value", EmitDefaultValue = false)]
        public DeclaredValue DeclaredValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParcelAdvanced {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  RunningMetre: ").Append(RunningMetre).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Packaging: ").Append(Packaging).Append("\n");
            sb.Append("  DangerousGoods: ").Append(DangerousGoods).Append("\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelAdvanced);
        }

        /// <summary>
        /// Returns true if ParcelAdvanced instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelAdvanced to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelAdvanced input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.RunningMetre == input.RunningMetre ||
                    this.RunningMetre.Equals(input.RunningMetre)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Packaging == input.Packaging ||
                    (this.Packaging != null &&
                    this.Packaging.Equals(input.Packaging))
                ) && 
                (
                    this.DangerousGoods == input.DangerousGoods ||
                    this.DangerousGoods != null &&
                    input.DangerousGoods != null &&
                    this.DangerousGoods.SequenceEqual(input.DangerousGoods)
                ) && 
                (
                    this.DeclaredValue == input.DeclaredValue ||
                    (this.DeclaredValue != null &&
                    this.DeclaredValue.Equals(input.DeclaredValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.Length.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.RunningMetre.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Packaging != null)
                {
                    hashCode = (hashCode * 59) + this.Packaging.GetHashCode();
                }
                if (this.DangerousGoods != null)
                {
                    hashCode = (hashCode * 59) + this.DangerousGoods.GetHashCode();
                }
                if (this.DeclaredValue != null)
                {
                    hashCode = (hashCode * 59) + this.DeclaredValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int) minimum
            if (this.Quantity < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            // Weight (int) minimum
            if (this.Weight < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Weight, must be a value greater than or equal to 1.", new [] { "Weight" });
            }

            // Length (int) minimum
            if (this.Length < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Length, must be a value greater than or equal to 1.", new [] { "Length" });
            }

            // Width (int) minimum
            if (this.Width < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value greater than or equal to 1.", new [] { "Width" });
            }

            // Height (int) minimum
            if (this.Height < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 1.", new [] { "Height" });
            }

            // Volume (decimal) minimum
            if (this.Volume < (decimal)0.001)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Volume, must be a value greater than or equal to 0.001.", new [] { "Volume" });
            }

            // RunningMetre (decimal) minimum
            if (this.RunningMetre < (decimal)0.001)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunningMetre, must be a value greater than or equal to 0.001.", new [] { "RunningMetre" });
            }

            yield break;
        }
    }

}
