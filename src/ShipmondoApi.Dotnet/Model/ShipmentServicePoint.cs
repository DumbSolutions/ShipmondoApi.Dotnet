/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// ShipmentServicePoint
    /// </summary>
    [DataContract(Name = "ShipmentServicePoint")]
    public partial class ShipmentServicePoint : IEquatable<ShipmentServicePoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentServicePoint" /> class.
        /// </summary>
        /// <param name="id">Identifier of the service point..</param>
        /// <param name="name">Name of the service point..</param>
        /// <param name="address1">Address line 1 of the service point..</param>
        /// <param name="address2">Address line 2 of the service point..</param>
        /// <param name="zipcode">Zip code of the service point..</param>
        /// <param name="city">City of the provided zipcode..</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code of the service point..</param>
        /// <param name="shippingAgent">Carrier code of the carrier that the service point belongs to..</param>
        public ShipmentServicePoint(string id = default(string), string name = default(string), string address1 = default(string), string address2 = default(string), string zipcode = default(string), string city = default(string), string countryCode = default(string), string shippingAgent = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Address1 = address1;
            this.Address2 = address2;
            this.Zipcode = zipcode;
            this.City = city;
            this.CountryCode = countryCode;
            this.ShippingAgent = shippingAgent;
        }

        /// <summary>
        /// Identifier of the service point.
        /// </summary>
        /// <value>Identifier of the service point.</value>
        /// <example>&quot;95558&quot;</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the service point.
        /// </summary>
        /// <value>Name of the service point.</value>
        /// <example>&quot;Påskeløkkens Købmand&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Address line 1 of the service point.
        /// </summary>
        /// <value>Address line 1 of the service point.</value>
        /// <example>&quot;Paaskeløkkevej 11&quot;</example>
        [DataMember(Name = "address1", EmitDefaultValue = false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Address line 2 of the service point.
        /// </summary>
        /// <value>Address line 2 of the service point.</value>
        [DataMember(Name = "address2", EmitDefaultValue = false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Zip code of the service point.
        /// </summary>
        /// <value>Zip code of the service point.</value>
        /// <example>&quot;5000&quot;</example>
        [DataMember(Name = "zipcode", EmitDefaultValue = false)]
        public string Zipcode { get; set; }

        /// <summary>
        /// City of the provided zipcode.
        /// </summary>
        /// <value>City of the provided zipcode.</value>
        /// <example>&quot;Odense C&quot;</example>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 country code of the service point.
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code of the service point.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Carrier code of the carrier that the service point belongs to.
        /// </summary>
        /// <value>Carrier code of the carrier that the service point belongs to.</value>
        /// <example>&quot;gls&quot;</example>
        [DataMember(Name = "shipping_agent", EmitDefaultValue = false)]
        public string ShippingAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentServicePoint {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  ShippingAgent: ").Append(ShippingAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentServicePoint);
        }

        /// <summary>
        /// Returns true if ShipmentServicePoint instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentServicePoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentServicePoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.ShippingAgent == input.ShippingAgent ||
                    (this.ShippingAgent != null &&
                    this.ShippingAgent.Equals(input.ShippingAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Address1 != null)
                {
                    hashCode = (hashCode * 59) + this.Address1.GetHashCode();
                }
                if (this.Address2 != null)
                {
                    hashCode = (hashCode * 59) + this.Address2.GetHashCode();
                }
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.ShippingAgent != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAgent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
