/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// GoodsLine
    /// </summary>
    [DataContract(Name = "GoodsLine")]
    public partial class GoodsLine : IEquatable<GoodsLine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GoodsLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsLine" /> class.
        /// </summary>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="country">Country of origin (required).</param>
        /// <param name="content">Description of the content (required).</param>
        /// <param name="commodityCode">Classification numbers for goods. For more visit vita.skat.dk (required).</param>
        /// <param name="unitValue">Unit value in declared currency (required).</param>
        /// <param name="unitWeight">Unit weight in gram (required).</param>
        public GoodsLine(int quantity = default(int), string country = default(string), string content = default(string), string commodityCode = default(string), decimal unitValue = default(decimal), int unitWeight = default(int))
        {
            this.Quantity = quantity;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for GoodsLine and cannot be null");
            }
            this.Country = country;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for GoodsLine and cannot be null");
            }
            this.Content = content;
            // to ensure "commodityCode" is required (not null)
            if (commodityCode == null)
            {
                throw new ArgumentNullException("commodityCode is a required property for GoodsLine and cannot be null");
            }
            this.CommodityCode = commodityCode;
            this.UnitValue = unitValue;
            this.UnitWeight = unitWeight;
        }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Country of origin
        /// </summary>
        /// <value>Country of origin</value>
        /// <example>&quot;CN&quot;</example>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Description of the content
        /// </summary>
        /// <value>Description of the content</value>
        /// <example>&quot;Textile shirt&quot;</example>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Classification numbers for goods. For more visit vita.skat.dk
        /// </summary>
        /// <value>Classification numbers for goods. For more visit vita.skat.dk</value>
        /// <example>&quot;8471000000&quot;</example>
        [DataMember(Name = "commodity_code", IsRequired = true, EmitDefaultValue = true)]
        public string CommodityCode { get; set; }

        /// <summary>
        /// Unit value in declared currency
        /// </summary>
        /// <value>Unit value in declared currency</value>
        /// <example>50.75</example>
        [DataMember(Name = "unit_value", IsRequired = true, EmitDefaultValue = true)]
        public decimal UnitValue { get; set; }

        /// <summary>
        /// Unit weight in gram
        /// </summary>
        /// <value>Unit weight in gram</value>
        /// <example>100</example>
        [DataMember(Name = "unit_weight", IsRequired = true, EmitDefaultValue = true)]
        public int UnitWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoodsLine {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CommodityCode: ").Append(CommodityCode).Append("\n");
            sb.Append("  UnitValue: ").Append(UnitValue).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoodsLine);
        }

        /// <summary>
        /// Returns true if GoodsLine instances are equal
        /// </summary>
        /// <param name="input">Instance of GoodsLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoodsLine input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.CommodityCode == input.CommodityCode ||
                    (this.CommodityCode != null &&
                    this.CommodityCode.Equals(input.CommodityCode))
                ) && 
                (
                    this.UnitValue == input.UnitValue ||
                    this.UnitValue.Equals(input.UnitValue)
                ) && 
                (
                    this.UnitWeight == input.UnitWeight ||
                    this.UnitWeight.Equals(input.UnitWeight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.CommodityCode != null)
                {
                    hashCode = (hashCode * 59) + this.CommodityCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitValue.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitWeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
