/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateShipmentRequest
    /// </summary>
    [DataContract(Name = "CreateShipmentRequest")]
    public partial class CreateShipmentRequest : IEquatable<CreateShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// If label_format is specified, the shipping labels will be included in the response. Defaults to what is setup for the user.
        /// </summary>
        /// <value>If label_format is specified, the shipping labels will be included in the response. Defaults to what is setup for the user.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            /// Enum A4Pdf for value: a4_pdf
            /// </summary>
            [EnumMember(Value = "a4_pdf")]
            A4Pdf = 1,

            /// <summary>
            /// Enum _10x19Pdf for value: 10x19_pdf
            /// </summary>
            [EnumMember(Value = "10x19_pdf")]
            _10x19Pdf = 2,

            /// <summary>
            /// Enum _10x19Png for value: 10x19_png
            /// </summary>
            [EnumMember(Value = "10x19_png")]
            _10x19Png = 3,

            /// <summary>
            /// Enum _10x19Zpl for value: 10x19_zpl
            /// </summary>
            [EnumMember(Value = "10x19_zpl")]
            _10x19Zpl = 4

        }


        /// <summary>
        /// If label_format is specified, the shipping labels will be included in the response. Defaults to what is setup for the user.
        /// </summary>
        /// <value>If label_format is specified, the shipping labels will be included in the response. Defaults to what is setup for the user.</value>
        [DataMember(Name = "label_format", EmitDefaultValue = false)]
        public LabelFormatEnum? LabelFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentRequest" /> class.
        /// </summary>
        /// <param name="testMode">For testing purposes. Shipment and labels generated are dummy and cannot be used. To create actual shipments, remove this element or set it to false..</param>
        /// <param name="ownAgreement">Whether or not the shipment should be booked your own agreement or Shipmondo&#39;s agreement. (required) (default to false).</param>
        /// <param name="customerNumber">Customer number for the agreement you wish to use. Mostly used if multiple agreements for the same carrier are set up on the account. Defaults to the agreement that was created first..</param>
        /// <param name="labelFormat">If label_format is specified, the shipping labels will be included in the response. Defaults to what is setup for the user..</param>
        /// <param name="productCode">Product code of the product of the shipment. (required).</param>
        /// <param name="serviceCodes">Comma-separated string of codes of services that are booked with the shipment. (required).</param>
        /// <param name="reference">Reference can be printed on the label and transferred to, e.g., carriers..</param>
        /// <param name="automaticSelectServicePoint">Whether or not the system should automatically select the service point closest to the receiver, when required. (default to false).</param>
        /// <param name="contents">General description of the contents of the shipment..</param>
        /// <param name="termOfTrade">Incoterm for the shipments, e.g., DDP when customs should be paid by the sender..</param>
        /// <param name="originShipmentId">ID of the origin shipment that the shipment is a return for..</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="pickUp">pickUp.</param>
        /// <param name="billTo">billTo.</param>
        /// <param name="servicePoint">servicePoint.</param>
        /// <param name="returnTo">returnTo.</param>
        /// <param name="parcels">parcels (required).</param>
        /// <param name="print">Print the label via the print client. Shipment labels can be sent out to the print queue automatically. Printer and format are specified in the print_at element. (default to false).</param>
        /// <param name="printAt">printAt.</param>
        /// <param name="sendLabel">sendLabel.</param>
        /// <param name="palletExchange">palletExchange.</param>
        /// <param name="customs">customs.</param>
        /// <param name="replaceHttpStatusCode">If replace_http_status_code is set to true, request will have HTTP status 200. The real HTTP status will be included in the response header as X-HTTP-Status-Code. This is to prevent runtime errors in some frameworks and make it possible to read the error messages. (default to false).</param>
        /// <param name="cod">cod.</param>
        /// <param name="dfm">dfm.</param>
        /// <param name="carrierInsurance">carrierInsurance.</param>
        public CreateShipmentRequest(bool testMode = default(bool), bool ownAgreement = false, string customerNumber = default(string), LabelFormatEnum? labelFormat = default(LabelFormatEnum?), string productCode = default(string), string serviceCodes = default(string), string reference = default(string), bool automaticSelectServicePoint = false, string contents = default(string), string termOfTrade = default(string), string originShipmentId = default(string), SenderRequest sender = default(SenderRequest), ReceiverRequest receiver = default(ReceiverRequest), ShipmentPickUpRequest pickUp = default(ShipmentPickUpRequest), ShipmentBillToRequest billTo = default(ShipmentBillToRequest), ServicePointSimple servicePoint = default(ServicePointSimple), ShipmentReturnToRequest returnTo = default(ShipmentReturnToRequest), List<ParcelAdvanced> parcels = default(List<ParcelAdvanced>), bool print = false, PrintAt printAt = default(PrintAt), SendLabel sendLabel = default(SendLabel), PalletExchange palletExchange = default(PalletExchange), CustomsRequest customs = default(CustomsRequest), bool replaceHttpStatusCode = false, CreateShipmentRequestCod cod = default(CreateShipmentRequestCod), CreateShipmentRequestDfm dfm = default(CreateShipmentRequestDfm), CreateShipmentRequestCarrierInsurance carrierInsurance = default(CreateShipmentRequestCarrierInsurance))
        {
            this.OwnAgreement = ownAgreement;
            // to ensure "productCode" is required (not null)
            if (productCode == null)
            {
                throw new ArgumentNullException("productCode is a required property for CreateShipmentRequest and cannot be null");
            }
            this.ProductCode = productCode;
            // to ensure "serviceCodes" is required (not null)
            if (serviceCodes == null)
            {
                throw new ArgumentNullException("serviceCodes is a required property for CreateShipmentRequest and cannot be null");
            }
            this.ServiceCodes = serviceCodes;
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for CreateShipmentRequest and cannot be null");
            }
            this.Sender = sender;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for CreateShipmentRequest and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "parcels" is required (not null)
            if (parcels == null)
            {
                throw new ArgumentNullException("parcels is a required property for CreateShipmentRequest and cannot be null");
            }
            this.Parcels = parcels;
            this.TestMode = testMode;
            this.CustomerNumber = customerNumber;
            this.LabelFormat = labelFormat;
            this.Reference = reference;
            this.AutomaticSelectServicePoint = automaticSelectServicePoint;
            this.Contents = contents;
            this.TermOfTrade = termOfTrade;
            this.OriginShipmentId = originShipmentId;
            this.PickUp = pickUp;
            this.BillTo = billTo;
            this.ServicePoint = servicePoint;
            this.ReturnTo = returnTo;
            this.Print = print;
            this.PrintAt = printAt;
            this.SendLabel = sendLabel;
            this.PalletExchange = palletExchange;
            this.Customs = customs;
            this.ReplaceHttpStatusCode = replaceHttpStatusCode;
            this.Cod = cod;
            this.Dfm = dfm;
            this.CarrierInsurance = carrierInsurance;
        }

        /// <summary>
        /// For testing purposes. Shipment and labels generated are dummy and cannot be used. To create actual shipments, remove this element or set it to false.
        /// </summary>
        /// <value>For testing purposes. Shipment and labels generated are dummy and cannot be used. To create actual shipments, remove this element or set it to false.</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// Whether or not the shipment should be booked your own agreement or Shipmondo&#39;s agreement.
        /// </summary>
        /// <value>Whether or not the shipment should be booked your own agreement or Shipmondo&#39;s agreement.</value>
        [DataMember(Name = "own_agreement", IsRequired = true, EmitDefaultValue = true)]
        public bool OwnAgreement { get; set; }

        /// <summary>
        /// Customer number for the agreement you wish to use. Mostly used if multiple agreements for the same carrier are set up on the account. Defaults to the agreement that was created first.
        /// </summary>
        /// <value>Customer number for the agreement you wish to use. Mostly used if multiple agreements for the same carrier are set up on the account. Defaults to the agreement that was created first.</value>
        [DataMember(Name = "customer_number", EmitDefaultValue = false)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Product code of the product of the shipment.
        /// </summary>
        /// <value>Product code of the product of the shipment.</value>
        /// <example>&quot;GLSDK_SD&quot;</example>
        [DataMember(Name = "product_code", IsRequired = true, EmitDefaultValue = true)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Comma-separated string of codes of services that are booked with the shipment.
        /// </summary>
        /// <value>Comma-separated string of codes of services that are booked with the shipment.</value>
        /// <example>&quot;EMAIL_NT,SMS_NT&quot;</example>
        [DataMember(Name = "service_codes", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceCodes { get; set; }

        /// <summary>
        /// Reference can be printed on the label and transferred to, e.g., carriers.
        /// </summary>
        /// <value>Reference can be printed on the label and transferred to, e.g., carriers.</value>
        /// <example>&quot;Order 10001&quot;</example>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Whether or not the system should automatically select the service point closest to the receiver, when required.
        /// </summary>
        /// <value>Whether or not the system should automatically select the service point closest to the receiver, when required.</value>
        [DataMember(Name = "automatic_select_service_point", EmitDefaultValue = true)]
        public bool AutomaticSelectServicePoint { get; set; }

        /// <summary>
        /// General description of the contents of the shipment.
        /// </summary>
        /// <value>General description of the contents of the shipment.</value>
        /// <example>&quot;Goods&quot;</example>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public string Contents { get; set; }

        /// <summary>
        /// Incoterm for the shipments, e.g., DDP when customs should be paid by the sender.
        /// </summary>
        /// <value>Incoterm for the shipments, e.g., DDP when customs should be paid by the sender.</value>
        /// <example>&quot;DAP&quot;</example>
        [DataMember(Name = "term_of_trade", EmitDefaultValue = false)]
        public string TermOfTrade { get; set; }

        /// <summary>
        /// ID of the origin shipment that the shipment is a return for.
        /// </summary>
        /// <value>ID of the origin shipment that the shipment is a return for.</value>
        /// <example>&quot;1000001235&quot;</example>
        [DataMember(Name = "origin_shipment_id", EmitDefaultValue = false)]
        public string OriginShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public SenderRequest Sender { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public ReceiverRequest Receiver { get; set; }

        /// <summary>
        /// Gets or Sets PickUp
        /// </summary>
        [DataMember(Name = "pick_up", EmitDefaultValue = false)]
        public ShipmentPickUpRequest PickUp { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name = "bill_to", EmitDefaultValue = false)]
        public ShipmentBillToRequest BillTo { get; set; }

        /// <summary>
        /// Gets or Sets ServicePoint
        /// </summary>
        [DataMember(Name = "service_point", EmitDefaultValue = false)]
        public ServicePointSimple ServicePoint { get; set; }

        /// <summary>
        /// Gets or Sets ReturnTo
        /// </summary>
        [DataMember(Name = "return_to", EmitDefaultValue = false)]
        public ShipmentReturnToRequest ReturnTo { get; set; }

        /// <summary>
        /// Gets or Sets Parcels
        /// </summary>
        [DataMember(Name = "parcels", IsRequired = true, EmitDefaultValue = true)]
        public List<ParcelAdvanced> Parcels { get; set; }

        /// <summary>
        /// Print the label via the print client. Shipment labels can be sent out to the print queue automatically. Printer and format are specified in the print_at element.
        /// </summary>
        /// <value>Print the label via the print client. Shipment labels can be sent out to the print queue automatically. Printer and format are specified in the print_at element.</value>
        [DataMember(Name = "print", EmitDefaultValue = true)]
        public bool Print { get; set; }

        /// <summary>
        /// Gets or Sets PrintAt
        /// </summary>
        [DataMember(Name = "print_at", EmitDefaultValue = false)]
        public PrintAt PrintAt { get; set; }

        /// <summary>
        /// Gets or Sets SendLabel
        /// </summary>
        [DataMember(Name = "send_label", EmitDefaultValue = false)]
        public SendLabel SendLabel { get; set; }

        /// <summary>
        /// Gets or Sets PalletExchange
        /// </summary>
        [DataMember(Name = "pallet_exchange", EmitDefaultValue = false)]
        public PalletExchange PalletExchange { get; set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [DataMember(Name = "customs", EmitDefaultValue = false)]
        public CustomsRequest Customs { get; set; }

        /// <summary>
        /// If replace_http_status_code is set to true, request will have HTTP status 200. The real HTTP status will be included in the response header as X-HTTP-Status-Code. This is to prevent runtime errors in some frameworks and make it possible to read the error messages.
        /// </summary>
        /// <value>If replace_http_status_code is set to true, request will have HTTP status 200. The real HTTP status will be included in the response header as X-HTTP-Status-Code. This is to prevent runtime errors in some frameworks and make it possible to read the error messages.</value>
        [DataMember(Name = "replace_http_status_code", EmitDefaultValue = true)]
        public bool ReplaceHttpStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets Cod
        /// </summary>
        [DataMember(Name = "cod", EmitDefaultValue = false)]
        public CreateShipmentRequestCod Cod { get; set; }

        /// <summary>
        /// Gets or Sets Dfm
        /// </summary>
        [DataMember(Name = "dfm", EmitDefaultValue = false)]
        public CreateShipmentRequestDfm Dfm { get; set; }

        /// <summary>
        /// Gets or Sets CarrierInsurance
        /// </summary>
        [DataMember(Name = "carrier_insurance", EmitDefaultValue = false)]
        public CreateShipmentRequestCarrierInsurance CarrierInsurance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateShipmentRequest {\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  OwnAgreement: ").Append(OwnAgreement).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ServiceCodes: ").Append(ServiceCodes).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  AutomaticSelectServicePoint: ").Append(AutomaticSelectServicePoint).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  TermOfTrade: ").Append(TermOfTrade).Append("\n");
            sb.Append("  OriginShipmentId: ").Append(OriginShipmentId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  PickUp: ").Append(PickUp).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  ServicePoint: ").Append(ServicePoint).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  Parcels: ").Append(Parcels).Append("\n");
            sb.Append("  Print: ").Append(Print).Append("\n");
            sb.Append("  PrintAt: ").Append(PrintAt).Append("\n");
            sb.Append("  SendLabel: ").Append(SendLabel).Append("\n");
            sb.Append("  PalletExchange: ").Append(PalletExchange).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("  ReplaceHttpStatusCode: ").Append(ReplaceHttpStatusCode).Append("\n");
            sb.Append("  Cod: ").Append(Cod).Append("\n");
            sb.Append("  Dfm: ").Append(Dfm).Append("\n");
            sb.Append("  CarrierInsurance: ").Append(CarrierInsurance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShipmentRequest);
        }

        /// <summary>
        /// Returns true if CreateShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShipmentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) && 
                (
                    this.OwnAgreement == input.OwnAgreement ||
                    this.OwnAgreement.Equals(input.OwnAgreement)
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.LabelFormat == input.LabelFormat ||
                    this.LabelFormat.Equals(input.LabelFormat)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ServiceCodes == input.ServiceCodes ||
                    (this.ServiceCodes != null &&
                    this.ServiceCodes.Equals(input.ServiceCodes))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.AutomaticSelectServicePoint == input.AutomaticSelectServicePoint ||
                    this.AutomaticSelectServicePoint.Equals(input.AutomaticSelectServicePoint)
                ) && 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                ) && 
                (
                    this.TermOfTrade == input.TermOfTrade ||
                    (this.TermOfTrade != null &&
                    this.TermOfTrade.Equals(input.TermOfTrade))
                ) && 
                (
                    this.OriginShipmentId == input.OriginShipmentId ||
                    (this.OriginShipmentId != null &&
                    this.OriginShipmentId.Equals(input.OriginShipmentId))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.PickUp == input.PickUp ||
                    (this.PickUp != null &&
                    this.PickUp.Equals(input.PickUp))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.ServicePoint == input.ServicePoint ||
                    (this.ServicePoint != null &&
                    this.ServicePoint.Equals(input.ServicePoint))
                ) && 
                (
                    this.ReturnTo == input.ReturnTo ||
                    (this.ReturnTo != null &&
                    this.ReturnTo.Equals(input.ReturnTo))
                ) && 
                (
                    this.Parcels == input.Parcels ||
                    this.Parcels != null &&
                    input.Parcels != null &&
                    this.Parcels.SequenceEqual(input.Parcels)
                ) && 
                (
                    this.Print == input.Print ||
                    this.Print.Equals(input.Print)
                ) && 
                (
                    this.PrintAt == input.PrintAt ||
                    (this.PrintAt != null &&
                    this.PrintAt.Equals(input.PrintAt))
                ) && 
                (
                    this.SendLabel == input.SendLabel ||
                    (this.SendLabel != null &&
                    this.SendLabel.Equals(input.SendLabel))
                ) && 
                (
                    this.PalletExchange == input.PalletExchange ||
                    (this.PalletExchange != null &&
                    this.PalletExchange.Equals(input.PalletExchange))
                ) && 
                (
                    this.Customs == input.Customs ||
                    (this.Customs != null &&
                    this.Customs.Equals(input.Customs))
                ) && 
                (
                    this.ReplaceHttpStatusCode == input.ReplaceHttpStatusCode ||
                    this.ReplaceHttpStatusCode.Equals(input.ReplaceHttpStatusCode)
                ) && 
                (
                    this.Cod == input.Cod ||
                    (this.Cod != null &&
                    this.Cod.Equals(input.Cod))
                ) && 
                (
                    this.Dfm == input.Dfm ||
                    (this.Dfm != null &&
                    this.Dfm.Equals(input.Dfm))
                ) && 
                (
                    this.CarrierInsurance == input.CarrierInsurance ||
                    (this.CarrierInsurance != null &&
                    this.CarrierInsurance.Equals(input.CarrierInsurance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnAgreement.GetHashCode();
                if (this.CustomerNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LabelFormat.GetHashCode();
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.ServiceCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCodes.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutomaticSelectServicePoint.GetHashCode();
                if (this.Contents != null)
                {
                    hashCode = (hashCode * 59) + this.Contents.GetHashCode();
                }
                if (this.TermOfTrade != null)
                {
                    hashCode = (hashCode * 59) + this.TermOfTrade.GetHashCode();
                }
                if (this.OriginShipmentId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginShipmentId.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.PickUp != null)
                {
                    hashCode = (hashCode * 59) + this.PickUp.GetHashCode();
                }
                if (this.BillTo != null)
                {
                    hashCode = (hashCode * 59) + this.BillTo.GetHashCode();
                }
                if (this.ServicePoint != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePoint.GetHashCode();
                }
                if (this.ReturnTo != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnTo.GetHashCode();
                }
                if (this.Parcels != null)
                {
                    hashCode = (hashCode * 59) + this.Parcels.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Print.GetHashCode();
                if (this.PrintAt != null)
                {
                    hashCode = (hashCode * 59) + this.PrintAt.GetHashCode();
                }
                if (this.SendLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SendLabel.GetHashCode();
                }
                if (this.PalletExchange != null)
                {
                    hashCode = (hashCode * 59) + this.PalletExchange.GetHashCode();
                }
                if (this.Customs != null)
                {
                    hashCode = (hashCode * 59) + this.Customs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReplaceHttpStatusCode.GetHashCode();
                if (this.Cod != null)
                {
                    hashCode = (hashCode * 59) + this.Cod.GetHashCode();
                }
                if (this.Dfm != null)
                {
                    hashCode = (hashCode * 59) + this.Dfm.GetHashCode();
                }
                if (this.CarrierInsurance != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierInsurance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
