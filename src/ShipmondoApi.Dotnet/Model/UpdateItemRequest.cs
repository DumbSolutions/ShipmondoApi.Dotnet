/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// UpdateItemRequest
    /// </summary>
    [DataContract(Name = "UpdateItemRequest")]
    public partial class UpdateItemRequest : IEquatable<UpdateItemRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItemRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the item..</param>
        /// <param name="variantCode">Variant code of the item..</param>
        /// <param name="barcode">Barcode of the item. Used when scanning item for pick..</param>
        /// <param name="bin">The bin/location where the item is located in the warehouse..</param>
        /// <param name="weight">Weight of the item in grams..</param>
        /// <param name="imageUrl">Image URL of the item that appears on the order or when picking. Will only be displayed if the URL is HTTPS..</param>
        /// <param name="countryCodeOfOrigin">ISO 3166-1 alpha-2 country code of origin..</param>
        /// <param name="currencyCode">ISO 4217 currency code..</param>
        /// <param name="customsCommodityCode">Tariff code for the item. Used when creating shipments that require customs declaration..</param>
        /// <param name="customsDescription">Customs description for the item. Used when creating shipments that require customs declaration..</param>
        /// <param name="_virtual">Describes if the item is a virtual item. (default to false).</param>
        public UpdateItemRequest(string name = default(string), string variantCode = default(string), string barcode = default(string), string bin = default(string), int weight = default(int), string imageUrl = default(string), string countryCodeOfOrigin = default(string), string currencyCode = default(string), string customsCommodityCode = default(string), string customsDescription = default(string), bool _virtual = false)
        {
            this.Name = name;
            this.VariantCode = variantCode;
            this.Barcode = barcode;
            this.Bin = bin;
            this.Weight = weight;
            this.ImageUrl = imageUrl;
            this.CountryCodeOfOrigin = countryCodeOfOrigin;
            this.CurrencyCode = currencyCode;
            this.CustomsCommodityCode = customsCommodityCode;
            this.CustomsDescription = customsDescription;
            this.Virtual = _virtual;
        }

        /// <summary>
        /// Name of the item.
        /// </summary>
        /// <value>Name of the item.</value>
        /// <example>&quot;T-Shirt&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Variant code of the item.
        /// </summary>
        /// <value>Variant code of the item.</value>
        /// <example>&quot;Large&quot;</example>
        [DataMember(Name = "variant_code", EmitDefaultValue = false)]
        public string VariantCode { get; set; }

        /// <summary>
        /// Barcode of the item. Used when scanning item for pick.
        /// </summary>
        /// <value>Barcode of the item. Used when scanning item for pick.</value>
        /// <example>&quot;1234567891011&quot;</example>
        [DataMember(Name = "barcode", EmitDefaultValue = false)]
        public string Barcode { get; set; }

        /// <summary>
        /// The bin/location where the item is located in the warehouse.
        /// </summary>
        /// <value>The bin/location where the item is located in the warehouse.</value>
        /// <example>&quot;123-a&quot;</example>
        [DataMember(Name = "bin", EmitDefaultValue = false)]
        public string Bin { get; set; }

        /// <summary>
        /// Weight of the item in grams.
        /// </summary>
        /// <value>Weight of the item in grams.</value>
        /// <example>1000</example>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Image URL of the item that appears on the order or when picking. Will only be displayed if the URL is HTTPS.
        /// </summary>
        /// <value>Image URL of the item that appears on the order or when picking. Will only be displayed if the URL is HTTPS.</value>
        /// <example>&quot;https://example.com/image.jpg&quot;</example>
        [DataMember(Name = "image_url", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 country code of origin.
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code of origin.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "country_code_of_origin", EmitDefaultValue = false)]
        public string CountryCodeOfOrigin { get; set; }

        /// <summary>
        /// ISO 4217 currency code.
        /// </summary>
        /// <value>ISO 4217 currency code.</value>
        /// <example>&quot;DKK&quot;</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Tariff code for the item. Used when creating shipments that require customs declaration.
        /// </summary>
        /// <value>Tariff code for the item. Used when creating shipments that require customs declaration.</value>
        /// <example>&quot;123456&quot;</example>
        [DataMember(Name = "customs_commodity_code", EmitDefaultValue = false)]
        public string CustomsCommodityCode { get; set; }

        /// <summary>
        /// Customs description for the item. Used when creating shipments that require customs declaration.
        /// </summary>
        /// <value>Customs description for the item. Used when creating shipments that require customs declaration.</value>
        /// <example>&quot;Example contents&quot;</example>
        [DataMember(Name = "customs_description", EmitDefaultValue = false)]
        public string CustomsDescription { get; set; }

        /// <summary>
        /// Describes if the item is a virtual item.
        /// </summary>
        /// <value>Describes if the item is a virtual item.</value>
        [DataMember(Name = "virtual", EmitDefaultValue = true)]
        public bool Virtual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateItemRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VariantCode: ").Append(VariantCode).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  CountryCodeOfOrigin: ").Append(CountryCodeOfOrigin).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomsCommodityCode: ").Append(CustomsCommodityCode).Append("\n");
            sb.Append("  CustomsDescription: ").Append(CustomsDescription).Append("\n");
            sb.Append("  Virtual: ").Append(Virtual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateItemRequest);
        }

        /// <summary>
        /// Returns true if UpdateItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateItemRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VariantCode == input.VariantCode ||
                    (this.VariantCode != null &&
                    this.VariantCode.Equals(input.VariantCode))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.CountryCodeOfOrigin == input.CountryCodeOfOrigin ||
                    (this.CountryCodeOfOrigin != null &&
                    this.CountryCodeOfOrigin.Equals(input.CountryCodeOfOrigin))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CustomsCommodityCode == input.CustomsCommodityCode ||
                    (this.CustomsCommodityCode != null &&
                    this.CustomsCommodityCode.Equals(input.CustomsCommodityCode))
                ) && 
                (
                    this.CustomsDescription == input.CustomsDescription ||
                    (this.CustomsDescription != null &&
                    this.CustomsDescription.Equals(input.CustomsDescription))
                ) && 
                (
                    this.Virtual == input.Virtual ||
                    this.Virtual.Equals(input.Virtual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VariantCode != null)
                {
                    hashCode = (hashCode * 59) + this.VariantCode.GetHashCode();
                }
                if (this.Barcode != null)
                {
                    hashCode = (hashCode * 59) + this.Barcode.GetHashCode();
                }
                if (this.Bin != null)
                {
                    hashCode = (hashCode * 59) + this.Bin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.CountryCodeOfOrigin != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCodeOfOrigin.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.CustomsCommodityCode != null)
                {
                    hashCode = (hashCode * 59) + this.CustomsCommodityCode.GetHashCode();
                }
                if (this.CustomsDescription != null)
                {
                    hashCode = (hashCode * 59) + this.CustomsDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Virtual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
