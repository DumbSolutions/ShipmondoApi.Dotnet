/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Account200Response
    /// </summary>
    [DataContract(Name = "account_200_response")]
    public partial class Account200Response : IEquatable<Account200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account200Response" /> class.
        /// </summary>
        /// <param name="name">Account name..</param>
        /// <param name="attention">Associated attention of the account..</param>
        /// <param name="address1">Account address 1..</param>
        /// <param name="address2">Account address 2..</param>
        /// <param name="zipCode">Account zip code..</param>
        /// <param name="city">Account city..</param>
        /// <param name="countryCode">Account country code..</param>
        /// <param name="phone">Account phone number..</param>
        /// <param name="email">Account email..</param>
        /// <param name="vatNo">Account vat number..</param>
        /// <param name="billingEmail">Account billing email..</param>
        /// <param name="homePage">Account home page..</param>
        /// <param name="updatedAt">Date and time of retrieval of account information..</param>
        public Account200Response(string name = default(string), string attention = default(string), string address1 = default(string), string address2 = default(string), string zipCode = default(string), string city = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string vatNo = default(string), string billingEmail = default(string), string homePage = default(string), DateTime updatedAt = default(DateTime))
        {
            this.Name = name;
            this.Attention = attention;
            this.Address1 = address1;
            this.Address2 = address2;
            this.ZipCode = zipCode;
            this.City = city;
            this.CountryCode = countryCode;
            this.Phone = phone;
            this.Email = email;
            this.VatNo = vatNo;
            this.BillingEmail = billingEmail;
            this.HomePage = homePage;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Account name.
        /// </summary>
        /// <value>Account name.</value>
        /// <example>&quot;Shipmondo&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Associated attention of the account.
        /// </summary>
        /// <value>Associated attention of the account.</value>
        /// <example>&quot;John Doe&quot;</example>
        [DataMember(Name = "attention", EmitDefaultValue = false)]
        public string Attention { get; set; }

        /// <summary>
        /// Account address 1.
        /// </summary>
        /// <value>Account address 1.</value>
        /// <example>&quot;Hvilehøjvej 25&quot;</example>
        [DataMember(Name = "address_1", EmitDefaultValue = false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Account address 2.
        /// </summary>
        /// <value>Account address 2.</value>
        /// <example>&quot;Hvilehøjvej 25&quot;</example>
        [DataMember(Name = "address_2", EmitDefaultValue = false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Account zip code.
        /// </summary>
        /// <value>Account zip code.</value>
        /// <example>&quot;5220&quot;</example>
        [DataMember(Name = "zip_code", EmitDefaultValue = false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Account city.
        /// </summary>
        /// <value>Account city.</value>
        /// <example>&quot;Odense SØ&quot;</example>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Account country code.
        /// </summary>
        /// <value>Account country code.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Account phone number.
        /// </summary>
        /// <value>Account phone number.</value>
        /// <example>&quot;70400407&quot;</example>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Account email.
        /// </summary>
        /// <value>Account email.</value>
        /// <example>&quot;contact@shipmondo.com&quot;</example>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Account vat number.
        /// </summary>
        /// <value>Account vat number.</value>
        /// <example>&quot;DK36399066&quot;</example>
        [DataMember(Name = "vat_no", EmitDefaultValue = false)]
        public string VatNo { get; set; }

        /// <summary>
        /// Account billing email.
        /// </summary>
        /// <value>Account billing email.</value>
        /// <example>&quot;contact@shipmondo.com&quot;</example>
        [DataMember(Name = "billing_email", EmitDefaultValue = false)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// Account home page.
        /// </summary>
        /// <value>Account home page.</value>
        /// <example>&quot;shipmondo.com&quot;</example>
        [DataMember(Name = "home_page", EmitDefaultValue = false)]
        public string HomePage { get; set; }

        /// <summary>
        /// Date and time of retrieval of account information.
        /// </summary>
        /// <value>Date and time of retrieval of account information.</value>
        /// <example>&quot;2017-06-18T22:00Z&quot;</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Account200Response {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attention: ").Append(Attention).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  VatNo: ").Append(VatNo).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  HomePage: ").Append(HomePage).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account200Response);
        }

        /// <summary>
        /// Returns true if Account200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of Account200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Attention == input.Attention ||
                    (this.Attention != null &&
                    this.Attention.Equals(input.Attention))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.VatNo == input.VatNo ||
                    (this.VatNo != null &&
                    this.VatNo.Equals(input.VatNo))
                ) && 
                (
                    this.BillingEmail == input.BillingEmail ||
                    (this.BillingEmail != null &&
                    this.BillingEmail.Equals(input.BillingEmail))
                ) && 
                (
                    this.HomePage == input.HomePage ||
                    (this.HomePage != null &&
                    this.HomePage.Equals(input.HomePage))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Attention != null)
                {
                    hashCode = (hashCode * 59) + this.Attention.GetHashCode();
                }
                if (this.Address1 != null)
                {
                    hashCode = (hashCode * 59) + this.Address1.GetHashCode();
                }
                if (this.Address2 != null)
                {
                    hashCode = (hashCode * 59) + this.Address2.GetHashCode();
                }
                if (this.ZipCode != null)
                {
                    hashCode = (hashCode * 59) + this.ZipCode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.VatNo != null)
                {
                    hashCode = (hashCode * 59) + this.VatNo.GetHashCode();
                }
                if (this.BillingEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BillingEmail.GetHashCode();
                }
                if (this.HomePage != null)
                {
                    hashCode = (hashCode * 59) + this.HomePage.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
