/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// ParcelSimple
    /// </summary>
    [DataContract(Name = "ParcelSimple")]
    public partial class ParcelSimple : IEquatable<ParcelSimple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelSimple" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParcelSimple() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelSimple" /> class.
        /// </summary>
        /// <param name="weight">Weight in grams. (required).</param>
        /// <param name="quantity">Number of parcels of this kind. Maximum quantity depends on the product. (default to 1).</param>
        public ParcelSimple(int weight = default(int), int quantity = 1)
        {
            this.Weight = weight;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Weight in grams.
        /// </summary>
        /// <value>Weight in grams.</value>
        /// <example>1000</example>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public int Weight { get; set; }

        /// <summary>
        /// Number of parcels of this kind. Maximum quantity depends on the product.
        /// </summary>
        /// <value>Number of parcels of this kind. Maximum quantity depends on the product.</value>
        /// <example>1</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParcelSimple {\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelSimple);
        }

        /// <summary>
        /// Returns true if ParcelSimple instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelSimple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelSimple input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int) minimum
            if (this.Quantity < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
