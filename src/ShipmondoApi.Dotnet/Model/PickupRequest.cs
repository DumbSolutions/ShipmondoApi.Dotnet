/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// PickupRequest
    /// </summary>
    [DataContract(Name = "PickupRequest")]
    public partial class PickupRequest : IEquatable<PickupRequest>, IValidatableObject
    {
        /// <summary>
        /// Current status of the pickup request.
        /// </summary>
        /// <value>Current status of the pickup request.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Unconfirmed for value: unconfirmed
            /// </summary>
            [EnumMember(Value = "unconfirmed")]
            Unconfirmed = 1,

            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 4

        }


        /// <summary>
        /// Current status of the pickup request.
        /// </summary>
        /// <value>Current status of the pickup request.</value>
        /// <example>&quot;confirmed&quot;</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PickupRequest" /> class.
        /// </summary>
        /// <param name="id">ID of the pickup request.</param>
        /// <param name="carrierCode">Carrier code for the carrier the pickup is requested for..</param>
        /// <param name="pickupAddress">pickupAddress.</param>
        /// <param name="confirmationNumber">Reference number for the pickup request. This should used as reference if contacting the carrier about the pickup..</param>
        /// <param name="status">Current status of the pickup request..</param>
        /// <param name="date">Requested pickup date..</param>
        /// <param name="readyBy">Requested pickup from this time. Ignore the date part of the date-time..</param>
        /// <param name="closedBy">Requested pickup before this time. Ignore the date part of the date-time..</param>
        /// <param name="packageLocation">Where on the address the packages should be picked up..</param>
        /// <param name="numberOfPieces">Number of pieces that should be picked up..</param>
        /// <param name="weight">Total weight of all shipments in the pickup request..</param>
        /// <param name="isResidential">Only valid for UPS. Whether or not the pickup address is a residential address. (default to false).</param>
        /// <param name="shipments">Shipments that is being picked up..</param>
        public PickupRequest(int id = default(int), string carrierCode = default(string), PickupRequestPickupAddress pickupAddress = default(PickupRequestPickupAddress), string confirmationNumber = default(string), StatusEnum? status = default(StatusEnum?), DateTime date = default(DateTime), DateTime readyBy = default(DateTime), DateTime closedBy = default(DateTime), string packageLocation = default(string), int numberOfPieces = default(int), int weight = default(int), bool isResidential = false, List<PickupRequestShipmentsInner> shipments = default(List<PickupRequestShipmentsInner>))
        {
            this.Id = id;
            this.CarrierCode = carrierCode;
            this.PickupAddress = pickupAddress;
            this.ConfirmationNumber = confirmationNumber;
            this.Status = status;
            this.Date = date;
            this.ReadyBy = readyBy;
            this.ClosedBy = closedBy;
            this.PackageLocation = packageLocation;
            this.NumberOfPieces = numberOfPieces;
            this.Weight = weight;
            this.IsResidential = isResidential;
            this.Shipments = shipments;
        }

        /// <summary>
        /// ID of the pickup request
        /// </summary>
        /// <value>ID of the pickup request</value>
        /// <example>15242</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Carrier code for the carrier the pickup is requested for.
        /// </summary>
        /// <value>Carrier code for the carrier the pickup is requested for.</value>
        /// <example>&quot;ups&quot;</example>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Gets or Sets PickupAddress
        /// </summary>
        [DataMember(Name = "pickup_address", EmitDefaultValue = false)]
        public PickupRequestPickupAddress PickupAddress { get; set; }

        /// <summary>
        /// Reference number for the pickup request. This should used as reference if contacting the carrier about the pickup.
        /// </summary>
        /// <value>Reference number for the pickup request. This should used as reference if contacting the carrier about the pickup.</value>
        /// <example>&quot;123C21B215M&quot;</example>
        [DataMember(Name = "confirmation_number", EmitDefaultValue = false)]
        public string ConfirmationNumber { get; set; }

        /// <summary>
        /// Requested pickup date.
        /// </summary>
        /// <value>Requested pickup date.</value>
        /// <example>&quot;Wed Feb 13 01:00:00 CET 2019&quot;</example>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Requested pickup from this time. Ignore the date part of the date-time.
        /// </summary>
        /// <value>Requested pickup from this time. Ignore the date part of the date-time.</value>
        /// <example>&quot;2000-01-01T08:00Z&quot;</example>
        [DataMember(Name = "ready_by", EmitDefaultValue = false)]
        public DateTime ReadyBy { get; set; }

        /// <summary>
        /// Requested pickup before this time. Ignore the date part of the date-time.
        /// </summary>
        /// <value>Requested pickup before this time. Ignore the date part of the date-time.</value>
        /// <example>&quot;2000-01-01T15:00Z&quot;</example>
        [DataMember(Name = "closed_by", EmitDefaultValue = false)]
        public DateTime ClosedBy { get; set; }

        /// <summary>
        /// Where on the address the packages should be picked up.
        /// </summary>
        /// <value>Where on the address the packages should be picked up.</value>
        /// <example>&quot;At the front door.&quot;</example>
        [DataMember(Name = "package_location", EmitDefaultValue = false)]
        public string PackageLocation { get; set; }

        /// <summary>
        /// Number of pieces that should be picked up.
        /// </summary>
        /// <value>Number of pieces that should be picked up.</value>
        /// <example>3</example>
        [DataMember(Name = "number_of_pieces", EmitDefaultValue = false)]
        public int NumberOfPieces { get; set; }

        /// <summary>
        /// Total weight of all shipments in the pickup request.
        /// </summary>
        /// <value>Total weight of all shipments in the pickup request.</value>
        /// <example>47000</example>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Only valid for UPS. Whether or not the pickup address is a residential address.
        /// </summary>
        /// <value>Only valid for UPS. Whether or not the pickup address is a residential address.</value>
        [DataMember(Name = "is_residential", EmitDefaultValue = true)]
        public bool IsResidential { get; set; }

        /// <summary>
        /// Shipments that is being picked up.
        /// </summary>
        /// <value>Shipments that is being picked up.</value>
        [DataMember(Name = "shipments", EmitDefaultValue = false)]
        public List<PickupRequestShipmentsInner> Shipments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PickupRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  PickupAddress: ").Append(PickupAddress).Append("\n");
            sb.Append("  ConfirmationNumber: ").Append(ConfirmationNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ReadyBy: ").Append(ReadyBy).Append("\n");
            sb.Append("  ClosedBy: ").Append(ClosedBy).Append("\n");
            sb.Append("  PackageLocation: ").Append(PackageLocation).Append("\n");
            sb.Append("  NumberOfPieces: ").Append(NumberOfPieces).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  IsResidential: ").Append(IsResidential).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PickupRequest);
        }

        /// <summary>
        /// Returns true if PickupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PickupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickupRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.PickupAddress == input.PickupAddress ||
                    (this.PickupAddress != null &&
                    this.PickupAddress.Equals(input.PickupAddress))
                ) && 
                (
                    this.ConfirmationNumber == input.ConfirmationNumber ||
                    (this.ConfirmationNumber != null &&
                    this.ConfirmationNumber.Equals(input.ConfirmationNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.ReadyBy == input.ReadyBy ||
                    (this.ReadyBy != null &&
                    this.ReadyBy.Equals(input.ReadyBy))
                ) && 
                (
                    this.ClosedBy == input.ClosedBy ||
                    (this.ClosedBy != null &&
                    this.ClosedBy.Equals(input.ClosedBy))
                ) && 
                (
                    this.PackageLocation == input.PackageLocation ||
                    (this.PackageLocation != null &&
                    this.PackageLocation.Equals(input.PackageLocation))
                ) && 
                (
                    this.NumberOfPieces == input.NumberOfPieces ||
                    this.NumberOfPieces.Equals(input.NumberOfPieces)
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.IsResidential == input.IsResidential ||
                    this.IsResidential.Equals(input.IsResidential)
                ) && 
                (
                    this.Shipments == input.Shipments ||
                    this.Shipments != null &&
                    input.Shipments != null &&
                    this.Shipments.SequenceEqual(input.Shipments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                if (this.PickupAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PickupAddress.GetHashCode();
                }
                if (this.ConfirmationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmationNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.ReadyBy != null)
                {
                    hashCode = (hashCode * 59) + this.ReadyBy.GetHashCode();
                }
                if (this.ClosedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedBy.GetHashCode();
                }
                if (this.PackageLocation != null)
                {
                    hashCode = (hashCode * 59) + this.PackageLocation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfPieces.GetHashCode();
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.IsResidential.GetHashCode();
                if (this.Shipments != null)
                {
                    hashCode = (hashCode * 59) + this.Shipments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
