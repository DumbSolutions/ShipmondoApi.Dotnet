/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Send out the label as PDF via email after booking.
    /// </summary>
    [DataContract(Name = "SendLabel")]
    public partial class SendLabel : IEquatable<SendLabel>, IValidatableObject
    {
        /// <summary>
        /// The label format that should be attached to the email.
        /// </summary>
        /// <value>The label format that should be attached to the email.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            /// Enum A4Pdf for value: a4_pdf
            /// </summary>
            [EnumMember(Value = "a4_pdf")]
            A4Pdf = 1,

            /// <summary>
            /// Enum _10x19Pdf for value: 10x19_pdf
            /// </summary>
            [EnumMember(Value = "10x19_pdf")]
            _10x19Pdf = 2

        }


        /// <summary>
        /// The label format that should be attached to the email.
        /// </summary>
        /// <value>The label format that should be attached to the email.</value>
        /// <example>&quot;a4_pdf&quot;</example>
        [DataMember(Name = "label_format", EmitDefaultValue = false)]
        public LabelFormatEnum? LabelFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendLabel" /> class.
        /// </summary>
        /// <param name="name">Name of the recipient of the label..</param>
        /// <param name="email">Email address of the recipient of the label, which the label should be sent to..</param>
        /// <param name="labelFormat">The label format that should be attached to the email..</param>
        public SendLabel(string name = default(string), string email = default(string), LabelFormatEnum? labelFormat = default(LabelFormatEnum?))
        {
            this.Name = name;
            this.Email = email;
            this.LabelFormat = labelFormat;
        }

        /// <summary>
        /// Name of the recipient of the label.
        /// </summary>
        /// <value>Name of the recipient of the label.</value>
        /// <example>&quot;Jim&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Email address of the recipient of the label, which the label should be sent to.
        /// </summary>
        /// <value>Email address of the recipient of the label, which the label should be sent to.</value>
        /// <example>&quot;jim@minvirksomhed.dk&quot;</example>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendLabel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendLabel);
        }

        /// <summary>
        /// Returns true if SendLabel instances are equal
        /// </summary>
        /// <param name="input">Instance of SendLabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendLabel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.LabelFormat == input.LabelFormat ||
                    this.LabelFormat.Equals(input.LabelFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LabelFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
