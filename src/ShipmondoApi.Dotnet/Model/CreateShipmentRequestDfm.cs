/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Special object for extra information when shipping with Danske Fragtm√¶nd. Otherwise it can be ignored.
    /// </summary>
    [DataContract(Name = "CreateShipmentRequest_dfm")]
    public partial class CreateShipmentRequestDfm : IEquatable<CreateShipmentRequestDfm>, IValidatableObject
    {
        /// <summary>
        /// Type of insurance to be booked.
        /// </summary>
        /// <value>Type of insurance to be booked.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsuranceTypeEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 3,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4

        }


        /// <summary>
        /// Type of insurance to be booked.
        /// </summary>
        /// <value>Type of insurance to be booked.</value>
        /// <example>&quot;A&quot;</example>
        [DataMember(Name = "insurance_type", EmitDefaultValue = false)]
        public InsuranceTypeEnum? InsuranceType { get; set; }
        /// <summary>
        /// Type of DOT used for the shipment.
        /// </summary>
        /// <value>Type of DOT used for the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DotTypeEnum
        {
            /// <summary>
            /// Enum DO1 for value: DO1
            /// </summary>
            [EnumMember(Value = "DO1")]
            DO1 = 1,

            /// <summary>
            /// Enum DO2 for value: DO2
            /// </summary>
            [EnumMember(Value = "DO2")]
            DO2 = 2,

            /// <summary>
            /// Enum DO3 for value: DO3
            /// </summary>
            [EnumMember(Value = "DO3")]
            DO3 = 3,

            /// <summary>
            /// Enum DO4 for value: DO4
            /// </summary>
            [EnumMember(Value = "DO4")]
            DO4 = 4

        }


        /// <summary>
        /// Type of DOT used for the shipment.
        /// </summary>
        /// <value>Type of DOT used for the shipment.</value>
        /// <example>&quot;DO1&quot;</example>
        [DataMember(Name = "dot_type", EmitDefaultValue = false)]
        public DotTypeEnum? DotType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentRequestDfm" /> class.
        /// </summary>
        /// <param name="insuranceType">Type of insurance to be booked..</param>
        /// <param name="insuranceAmount">Amount in DKK that should be insured for the shipment..</param>
        /// <param name="dotType">Type of DOT used for the shipment..</param>
        /// <param name="dotTime">Requested time of DOT delivery. Only valid for DO2, DO3 and DO4..</param>
        public CreateShipmentRequestDfm(InsuranceTypeEnum? insuranceType = default(InsuranceTypeEnum?), decimal insuranceAmount = default(decimal), DotTypeEnum? dotType = default(DotTypeEnum?), string dotTime = default(string))
        {
            this.InsuranceType = insuranceType;
            this.InsuranceAmount = insuranceAmount;
            this.DotType = dotType;
            this.DotTime = dotTime;
        }

        /// <summary>
        /// Amount in DKK that should be insured for the shipment.
        /// </summary>
        /// <value>Amount in DKK that should be insured for the shipment.</value>
        /// <example>1000</example>
        [DataMember(Name = "insurance_amount", EmitDefaultValue = false)]
        public decimal InsuranceAmount { get; set; }

        /// <summary>
        /// Requested time of DOT delivery. Only valid for DO2, DO3 and DO4.
        /// </summary>
        /// <value>Requested time of DOT delivery. Only valid for DO2, DO3 and DO4.</value>
        /// <example>&quot;15:00&quot;</example>
        [DataMember(Name = "dot_time", EmitDefaultValue = false)]
        public string DotTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateShipmentRequestDfm {\n");
            sb.Append("  InsuranceType: ").Append(InsuranceType).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  DotType: ").Append(DotType).Append("\n");
            sb.Append("  DotTime: ").Append(DotTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShipmentRequestDfm);
        }

        /// <summary>
        /// Returns true if CreateShipmentRequestDfm instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShipmentRequestDfm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShipmentRequestDfm input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InsuranceType == input.InsuranceType ||
                    this.InsuranceType.Equals(input.InsuranceType)
                ) && 
                (
                    this.InsuranceAmount == input.InsuranceAmount ||
                    this.InsuranceAmount.Equals(input.InsuranceAmount)
                ) && 
                (
                    this.DotType == input.DotType ||
                    this.DotType.Equals(input.DotType)
                ) && 
                (
                    this.DotTime == input.DotTime ||
                    (this.DotTime != null &&
                    this.DotTime.Equals(input.DotTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InsuranceType.GetHashCode();
                hashCode = (hashCode * 59) + this.InsuranceAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.DotType.GetHashCode();
                if (this.DotTime != null)
                {
                    hashCode = (hashCode * 59) + this.DotTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
