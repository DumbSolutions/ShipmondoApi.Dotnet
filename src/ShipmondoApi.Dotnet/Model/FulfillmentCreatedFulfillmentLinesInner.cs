/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// FulfillmentCreatedFulfillmentLinesInner
    /// </summary>
    [DataContract(Name = "FulfillmentCreated_fulfillment_lines_inner")]
    public partial class FulfillmentCreatedFulfillmentLinesInner : IEquatable<FulfillmentCreatedFulfillmentLinesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentCreatedFulfillmentLinesInner" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the fulfillment_line..</param>
        /// <param name="itemId">Unique identifier of the item..</param>
        /// <param name="itemVariantCode">The varient for the item.</param>
        /// <param name="itemSku">The sku of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <param name="shippedQuantity">The quantity of items you wanted to ship.</param>
        /// <param name="quantity">The quantity of the item in the sales order.</param>
        /// <param name="unitPriceExcludingVat">The price of each item, without tax.</param>
        /// <param name="unitPriceIncludingVat">The price of each item, with tax.</param>
        /// <param name="amountExcludingVat">Total price excluding taxes for the order line.</param>
        /// <param name="amountIncludingVat">Total price including taxes for the order line.</param>
        /// <param name="vatAmount">Total tax amount for the fulfillment line.</param>
        /// <param name="vatPercent">Average tax percentage..</param>
        /// <param name="currencyCode">ISO 4217 currency code of the order total..</param>
        /// <param name="orderLineId">The ID of the related order_line.</param>
        public FulfillmentCreatedFulfillmentLinesInner(int id = default(int), int itemId = default(int), string itemVariantCode = default(string), string itemSku = default(string), string itemName = default(string), int shippedQuantity = default(int), string quantity = default(string), string unitPriceExcludingVat = default(string), string unitPriceIncludingVat = default(string), string amountExcludingVat = default(string), string amountIncludingVat = default(string), string vatAmount = default(string), string vatPercent = default(string), string currencyCode = default(string), int orderLineId = default(int))
        {
            this.Id = id;
            this.ItemId = itemId;
            this.ItemVariantCode = itemVariantCode;
            this.ItemSku = itemSku;
            this.ItemName = itemName;
            this.ShippedQuantity = shippedQuantity;
            this.Quantity = quantity;
            this.UnitPriceExcludingVat = unitPriceExcludingVat;
            this.UnitPriceIncludingVat = unitPriceIncludingVat;
            this.AmountExcludingVat = amountExcludingVat;
            this.AmountIncludingVat = amountIncludingVat;
            this.VatAmount = vatAmount;
            this.VatPercent = vatPercent;
            this.CurrencyCode = currencyCode;
            this.OrderLineId = orderLineId;
        }

        /// <summary>
        /// Unique identifier of the fulfillment_line.
        /// </summary>
        /// <value>Unique identifier of the fulfillment_line.</value>
        /// <example>11120</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique identifier of the item.
        /// </summary>
        /// <value>Unique identifier of the item.</value>
        /// <example>1150</example>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public int ItemId { get; set; }

        /// <summary>
        /// The varient for the item
        /// </summary>
        /// <value>The varient for the item</value>
        /// <example>&quot;white&quot;</example>
        [DataMember(Name = "item_variant_code", EmitDefaultValue = false)]
        public string ItemVariantCode { get; set; }

        /// <summary>
        /// The sku of the item
        /// </summary>
        /// <value>The sku of the item</value>
        /// <example>&quot;shirt_white&quot;</example>
        [DataMember(Name = "item_sku", EmitDefaultValue = false)]
        public string ItemSku { get; set; }

        /// <summary>
        /// The name of the item
        /// </summary>
        /// <value>The name of the item</value>
        /// <example>&quot;t-shirt&quot;</example>
        [DataMember(Name = "item_name", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// The quantity of items you wanted to ship
        /// </summary>
        /// <value>The quantity of items you wanted to ship</value>
        [DataMember(Name = "shipped_quantity", EmitDefaultValue = false)]
        public int ShippedQuantity { get; set; }

        /// <summary>
        /// The quantity of the item in the sales order
        /// </summary>
        /// <value>The quantity of the item in the sales order</value>
        /// <example>&quot;2.0&quot;</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// The price of each item, without tax
        /// </summary>
        /// <value>The price of each item, without tax</value>
        /// <example>&quot;80.0&quot;</example>
        [DataMember(Name = "unit_price_excluding_vat", EmitDefaultValue = false)]
        public string UnitPriceExcludingVat { get; set; }

        /// <summary>
        /// The price of each item, with tax
        /// </summary>
        /// <value>The price of each item, with tax</value>
        /// <example>&quot;100.0&quot;</example>
        [DataMember(Name = "unit_price_including_vat", EmitDefaultValue = false)]
        public string UnitPriceIncludingVat { get; set; }

        /// <summary>
        /// Total price excluding taxes for the order line
        /// </summary>
        /// <value>Total price excluding taxes for the order line</value>
        /// <example>&quot;160.0&quot;</example>
        [DataMember(Name = "amount_excluding_vat", EmitDefaultValue = false)]
        public string AmountExcludingVat { get; set; }

        /// <summary>
        /// Total price including taxes for the order line
        /// </summary>
        /// <value>Total price including taxes for the order line</value>
        /// <example>&quot;200.0&quot;</example>
        [DataMember(Name = "amount_including_vat", EmitDefaultValue = false)]
        public string AmountIncludingVat { get; set; }

        /// <summary>
        /// Total tax amount for the fulfillment line
        /// </summary>
        /// <value>Total tax amount for the fulfillment line</value>
        /// <example>&quot;2.0&quot;</example>
        [DataMember(Name = "vat_amount", EmitDefaultValue = false)]
        public string VatAmount { get; set; }

        /// <summary>
        /// Average tax percentage.
        /// </summary>
        /// <value>Average tax percentage.</value>
        /// <example>&quot;0.25&quot;</example>
        [DataMember(Name = "vat_percent", EmitDefaultValue = false)]
        public string VatPercent { get; set; }

        /// <summary>
        /// ISO 4217 currency code of the order total.
        /// </summary>
        /// <value>ISO 4217 currency code of the order total.</value>
        /// <example>&quot;DKK&quot;</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The ID of the related order_line
        /// </summary>
        /// <value>The ID of the related order_line</value>
        /// <example>45891</example>
        [DataMember(Name = "order_line_id", EmitDefaultValue = false)]
        public int OrderLineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentCreatedFulfillmentLinesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemVariantCode: ").Append(ItemVariantCode).Append("\n");
            sb.Append("  ItemSku: ").Append(ItemSku).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ShippedQuantity: ").Append(ShippedQuantity).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPriceExcludingVat: ").Append(UnitPriceExcludingVat).Append("\n");
            sb.Append("  UnitPriceIncludingVat: ").Append(UnitPriceIncludingVat).Append("\n");
            sb.Append("  AmountExcludingVat: ").Append(AmountExcludingVat).Append("\n");
            sb.Append("  AmountIncludingVat: ").Append(AmountIncludingVat).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  VatPercent: ").Append(VatPercent).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  OrderLineId: ").Append(OrderLineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentCreatedFulfillmentLinesInner);
        }

        /// <summary>
        /// Returns true if FulfillmentCreatedFulfillmentLinesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentCreatedFulfillmentLinesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentCreatedFulfillmentLinesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    this.ItemId.Equals(input.ItemId)
                ) && 
                (
                    this.ItemVariantCode == input.ItemVariantCode ||
                    (this.ItemVariantCode != null &&
                    this.ItemVariantCode.Equals(input.ItemVariantCode))
                ) && 
                (
                    this.ItemSku == input.ItemSku ||
                    (this.ItemSku != null &&
                    this.ItemSku.Equals(input.ItemSku))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.ShippedQuantity == input.ShippedQuantity ||
                    this.ShippedQuantity.Equals(input.ShippedQuantity)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitPriceExcludingVat == input.UnitPriceExcludingVat ||
                    (this.UnitPriceExcludingVat != null &&
                    this.UnitPriceExcludingVat.Equals(input.UnitPriceExcludingVat))
                ) && 
                (
                    this.UnitPriceIncludingVat == input.UnitPriceIncludingVat ||
                    (this.UnitPriceIncludingVat != null &&
                    this.UnitPriceIncludingVat.Equals(input.UnitPriceIncludingVat))
                ) && 
                (
                    this.AmountExcludingVat == input.AmountExcludingVat ||
                    (this.AmountExcludingVat != null &&
                    this.AmountExcludingVat.Equals(input.AmountExcludingVat))
                ) && 
                (
                    this.AmountIncludingVat == input.AmountIncludingVat ||
                    (this.AmountIncludingVat != null &&
                    this.AmountIncludingVat.Equals(input.AmountIncludingVat))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.VatPercent == input.VatPercent ||
                    (this.VatPercent != null &&
                    this.VatPercent.Equals(input.VatPercent))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.OrderLineId == input.OrderLineId ||
                    this.OrderLineId.Equals(input.OrderLineId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                if (this.ItemVariantCode != null)
                {
                    hashCode = (hashCode * 59) + this.ItemVariantCode.GetHashCode();
                }
                if (this.ItemSku != null)
                {
                    hashCode = (hashCode * 59) + this.ItemSku.GetHashCode();
                }
                if (this.ItemName != null)
                {
                    hashCode = (hashCode * 59) + this.ItemName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShippedQuantity.GetHashCode();
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.UnitPriceExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.UnitPriceExcludingVat.GetHashCode();
                }
                if (this.UnitPriceIncludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.UnitPriceIncludingVat.GetHashCode();
                }
                if (this.AmountExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountExcludingVat.GetHashCode();
                }
                if (this.AmountIncludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountIncludingVat.GetHashCode();
                }
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                if (this.VatPercent != null)
                {
                    hashCode = (hashCode * 59) + this.VatPercent.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderLineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
