/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// DangerousGood
    /// </summary>
    [DataContract(Name = "DangerousGood")]
    public partial class DangerousGood : IEquatable<DangerousGood>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DangerousGood" /> class.
        /// </summary>
        /// <param name="_class">ADR class of the dangerous goods..</param>
        /// <param name="unNumber">UN number of the dangerous goods..</param>
        /// <param name="netWeight">Net weight in grams of the dangerous goods. Use either this or net_weight_kg..</param>
        /// <param name="netWeightKg">Net weight in kilograms of the dangerous goods. Use either this or net_weight..</param>
        /// <param name="quantity">Number of pieces of this kind of dangerous goods..</param>
        /// <param name="packaging">Packaging the dangerous goods are contained in..</param>
        /// <param name="description">Description of the dangerous goods..</param>
        /// <param name="tunnelRestrictionCode">Tunnel restriction code that applies to the dangerous goods..</param>
        /// <param name="packingGroup">Packing group that applies to the dangerous goods..</param>
        /// <param name="environmentallyHazardous">Whether or not the dangerous goods are hazardous to the environment..</param>
        public DangerousGood(string _class = default(string), string unNumber = default(string), int netWeight = default(int), decimal netWeightKg = default(decimal), int quantity = default(int), string packaging = default(string), string description = default(string), string tunnelRestrictionCode = default(string), string packingGroup = default(string), bool environmentallyHazardous = default(bool))
        {
            this.Class = _class;
            this.UnNumber = unNumber;
            this.NetWeight = netWeight;
            this.NetWeightKg = netWeightKg;
            this.Quantity = quantity;
            this.Packaging = packaging;
            this.Description = description;
            this.TunnelRestrictionCode = tunnelRestrictionCode;
            this.PackingGroup = packingGroup;
            this.EnvironmentallyHazardous = environmentallyHazardous;
        }

        /// <summary>
        /// ADR class of the dangerous goods.
        /// </summary>
        /// <value>ADR class of the dangerous goods.</value>
        /// <example>&quot;3&quot;</example>
        [DataMember(Name = "class", EmitDefaultValue = false)]
        public string Class { get; set; }

        /// <summary>
        /// UN number of the dangerous goods.
        /// </summary>
        /// <value>UN number of the dangerous goods.</value>
        /// <example>&quot;1202&quot;</example>
        [DataMember(Name = "un_number", EmitDefaultValue = false)]
        public string UnNumber { get; set; }

        /// <summary>
        /// Net weight in grams of the dangerous goods. Use either this or net_weight_kg.
        /// </summary>
        /// <value>Net weight in grams of the dangerous goods. Use either this or net_weight_kg.</value>
        /// <example>20100</example>
        [DataMember(Name = "net_weight", EmitDefaultValue = false)]
        public int NetWeight { get; set; }

        /// <summary>
        /// Net weight in kilograms of the dangerous goods. Use either this or net_weight.
        /// </summary>
        /// <value>Net weight in kilograms of the dangerous goods. Use either this or net_weight.</value>
        /// <example>20.1</example>
        [DataMember(Name = "net_weight_kg", EmitDefaultValue = false)]
        public decimal NetWeightKg { get; set; }

        /// <summary>
        /// Number of pieces of this kind of dangerous goods.
        /// </summary>
        /// <value>Number of pieces of this kind of dangerous goods.</value>
        /// <example>3</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Packaging the dangerous goods are contained in.
        /// </summary>
        /// <value>Packaging the dangerous goods are contained in.</value>
        /// <example>&quot;drums&quot;</example>
        [DataMember(Name = "packaging", EmitDefaultValue = false)]
        public string Packaging { get; set; }

        /// <summary>
        /// Description of the dangerous goods.
        /// </summary>
        /// <value>Description of the dangerous goods.</value>
        /// <example>&quot;DIESEL FUEL, &lt; 62Â°C (640K)&quot;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Tunnel restriction code that applies to the dangerous goods.
        /// </summary>
        /// <value>Tunnel restriction code that applies to the dangerous goods.</value>
        /// <example>&quot;A&quot;</example>
        [DataMember(Name = "tunnel_restriction_code", EmitDefaultValue = false)]
        public string TunnelRestrictionCode { get; set; }

        /// <summary>
        /// Packing group that applies to the dangerous goods.
        /// </summary>
        /// <value>Packing group that applies to the dangerous goods.</value>
        /// <example>&quot;III&quot;</example>
        [DataMember(Name = "packing_group", EmitDefaultValue = false)]
        public string PackingGroup { get; set; }

        /// <summary>
        /// Whether or not the dangerous goods are hazardous to the environment.
        /// </summary>
        /// <value>Whether or not the dangerous goods are hazardous to the environment.</value>
        [DataMember(Name = "environmentally_hazardous", EmitDefaultValue = true)]
        public bool EnvironmentallyHazardous { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DangerousGood {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  UnNumber: ").Append(UnNumber).Append("\n");
            sb.Append("  NetWeight: ").Append(NetWeight).Append("\n");
            sb.Append("  NetWeightKg: ").Append(NetWeightKg).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Packaging: ").Append(Packaging).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TunnelRestrictionCode: ").Append(TunnelRestrictionCode).Append("\n");
            sb.Append("  PackingGroup: ").Append(PackingGroup).Append("\n");
            sb.Append("  EnvironmentallyHazardous: ").Append(EnvironmentallyHazardous).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DangerousGood);
        }

        /// <summary>
        /// Returns true if DangerousGood instances are equal
        /// </summary>
        /// <param name="input">Instance of DangerousGood to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DangerousGood input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                ) && 
                (
                    this.UnNumber == input.UnNumber ||
                    (this.UnNumber != null &&
                    this.UnNumber.Equals(input.UnNumber))
                ) && 
                (
                    this.NetWeight == input.NetWeight ||
                    this.NetWeight.Equals(input.NetWeight)
                ) && 
                (
                    this.NetWeightKg == input.NetWeightKg ||
                    this.NetWeightKg.Equals(input.NetWeightKg)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Packaging == input.Packaging ||
                    (this.Packaging != null &&
                    this.Packaging.Equals(input.Packaging))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TunnelRestrictionCode == input.TunnelRestrictionCode ||
                    (this.TunnelRestrictionCode != null &&
                    this.TunnelRestrictionCode.Equals(input.TunnelRestrictionCode))
                ) && 
                (
                    this.PackingGroup == input.PackingGroup ||
                    (this.PackingGroup != null &&
                    this.PackingGroup.Equals(input.PackingGroup))
                ) && 
                (
                    this.EnvironmentallyHazardous == input.EnvironmentallyHazardous ||
                    this.EnvironmentallyHazardous.Equals(input.EnvironmentallyHazardous)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Class != null)
                {
                    hashCode = (hashCode * 59) + this.Class.GetHashCode();
                }
                if (this.UnNumber != null)
                {
                    hashCode = (hashCode * 59) + this.UnNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NetWeight.GetHashCode();
                hashCode = (hashCode * 59) + this.NetWeightKg.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Packaging != null)
                {
                    hashCode = (hashCode * 59) + this.Packaging.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.TunnelRestrictionCode != null)
                {
                    hashCode = (hashCode * 59) + this.TunnelRestrictionCode.GetHashCode();
                }
                if (this.PackingGroup != null)
                {
                    hashCode = (hashCode * 59) + this.PackingGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnvironmentallyHazardous.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
