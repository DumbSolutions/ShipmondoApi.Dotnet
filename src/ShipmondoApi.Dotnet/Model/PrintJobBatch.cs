/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// PrintJobBatch
    /// </summary>
    [DataContract(Name = "PrintJobBatch")]
    public partial class PrintJobBatch : IEquatable<PrintJobBatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJobBatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrintJobBatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJobBatch" /> class.
        /// </summary>
        /// <param name="hostName">The name of the computer/host to print at. (required).</param>
        /// <param name="printJobs">A list of print jobs to be printed in the specified order. (required).</param>
        public PrintJobBatch(string hostName = default(string), List<PrintJobBatchPrintJobsInner> printJobs = default(List<PrintJobBatchPrintJobsInner>))
        {
            // to ensure "hostName" is required (not null)
            if (hostName == null)
            {
                throw new ArgumentNullException("hostName is a required property for PrintJobBatch and cannot be null");
            }
            this.HostName = hostName;
            // to ensure "printJobs" is required (not null)
            if (printJobs == null)
            {
                throw new ArgumentNullException("printJobs is a required property for PrintJobBatch and cannot be null");
            }
            this.PrintJobs = printJobs;
        }

        /// <summary>
        /// The name of the computer/host to print at.
        /// </summary>
        /// <value>The name of the computer/host to print at.</value>
        /// <example>&quot;WAREHOUSE-PC-01&quot;</example>
        [DataMember(Name = "host_name", IsRequired = true, EmitDefaultValue = true)]
        public string HostName { get; set; }

        /// <summary>
        /// A list of print jobs to be printed in the specified order.
        /// </summary>
        /// <value>A list of print jobs to be printed in the specified order.</value>
        [DataMember(Name = "print_jobs", IsRequired = true, EmitDefaultValue = true)]
        public List<PrintJobBatchPrintJobsInner> PrintJobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintJobBatch {\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  PrintJobs: ").Append(PrintJobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintJobBatch);
        }

        /// <summary>
        /// Returns true if PrintJobBatch instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintJobBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintJobBatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.PrintJobs == input.PrintJobs ||
                    this.PrintJobs != null &&
                    input.PrintJobs != null &&
                    this.PrintJobs.SequenceEqual(input.PrintJobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HostName != null)
                {
                    hashCode = (hashCode * 59) + this.HostName.GetHashCode();
                }
                if (this.PrintJobs != null)
                {
                    hashCode = (hashCode * 59) + this.PrintJobs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
