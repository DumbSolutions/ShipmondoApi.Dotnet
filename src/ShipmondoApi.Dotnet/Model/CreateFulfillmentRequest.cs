/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateFulfillmentRequest
    /// </summary>
    [DataContract(Name = "CreateFulfillmentRequest")]
    public partial class CreateFulfillmentRequest : IEquatable<CreateFulfillmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFulfillmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentRequest" /> class.
        /// </summary>
        /// <param name="fulfilledByThirdParty">Defines if fulfillment is fulfilled by a third party. (default to false).</param>
        /// <param name="orderPackagingId">ID of a desired order_packaging. Specifies which order packaging to use..</param>
        /// <param name="fulfillmentLines">Lines to be fulfilled for the sales_order. (required).</param>
        public CreateFulfillmentRequest(bool fulfilledByThirdParty = false, int orderPackagingId = default(int), List<CreateFulfillmentRequestFulfillmentLinesInner> fulfillmentLines = default(List<CreateFulfillmentRequestFulfillmentLinesInner>))
        {
            // to ensure "fulfillmentLines" is required (not null)
            if (fulfillmentLines == null)
            {
                throw new ArgumentNullException("fulfillmentLines is a required property for CreateFulfillmentRequest and cannot be null");
            }
            this.FulfillmentLines = fulfillmentLines;
            this.FulfilledByThirdParty = fulfilledByThirdParty;
            this.OrderPackagingId = orderPackagingId;
        }

        /// <summary>
        /// Defines if fulfillment is fulfilled by a third party.
        /// </summary>
        /// <value>Defines if fulfillment is fulfilled by a third party.</value>
        [DataMember(Name = "fulfilled_by_third_party", EmitDefaultValue = true)]
        public bool FulfilledByThirdParty { get; set; }

        /// <summary>
        /// ID of a desired order_packaging. Specifies which order packaging to use.
        /// </summary>
        /// <value>ID of a desired order_packaging. Specifies which order packaging to use.</value>
        /// <example>16</example>
        [DataMember(Name = "order_packaging_id", EmitDefaultValue = false)]
        public int OrderPackagingId { get; set; }

        /// <summary>
        /// Lines to be fulfilled for the sales_order.
        /// </summary>
        /// <value>Lines to be fulfilled for the sales_order.</value>
        [DataMember(Name = "fulfillment_lines", IsRequired = true, EmitDefaultValue = true)]
        public List<CreateFulfillmentRequestFulfillmentLinesInner> FulfillmentLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFulfillmentRequest {\n");
            sb.Append("  FulfilledByThirdParty: ").Append(FulfilledByThirdParty).Append("\n");
            sb.Append("  OrderPackagingId: ").Append(OrderPackagingId).Append("\n");
            sb.Append("  FulfillmentLines: ").Append(FulfillmentLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFulfillmentRequest);
        }

        /// <summary>
        /// Returns true if CreateFulfillmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFulfillmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFulfillmentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FulfilledByThirdParty == input.FulfilledByThirdParty ||
                    this.FulfilledByThirdParty.Equals(input.FulfilledByThirdParty)
                ) && 
                (
                    this.OrderPackagingId == input.OrderPackagingId ||
                    this.OrderPackagingId.Equals(input.OrderPackagingId)
                ) && 
                (
                    this.FulfillmentLines == input.FulfillmentLines ||
                    this.FulfillmentLines != null &&
                    input.FulfillmentLines != null &&
                    this.FulfillmentLines.SequenceEqual(input.FulfillmentLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FulfilledByThirdParty.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderPackagingId.GetHashCode();
                if (this.FulfillmentLines != null)
                {
                    hashCode = (hashCode * 59) + this.FulfillmentLines.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
