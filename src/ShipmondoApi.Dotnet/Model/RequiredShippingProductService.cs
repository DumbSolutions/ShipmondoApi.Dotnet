/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// RequiredShippingProductService
    /// </summary>
    [DataContract(Name = "RequiredShippingProductService")]
    public partial class RequiredShippingProductService : IEquatable<RequiredShippingProductService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredShippingProductService" /> class.
        /// </summary>
        /// <param name="code">Service code to be included in the booking of shipments..</param>
        /// <param name="id">ID of the service. Used for booking in older versions of the API..</param>
        /// <param name="name">Name of the service..</param>
        /// <param name="requiredFields">Comma-separated string indicating fields that are required to book a shipment with the service..</param>
        /// <param name="optionalFields">Comma-separated string indicating fields that are optional to book a shipment with the service..</param>
        /// <param name="note">Information about the service..</param>
        public RequiredShippingProductService(string code = default(string), int id = default(int), string name = default(string), string requiredFields = default(string), string optionalFields = default(string), string note = default(string))
        {
            this.Code = code;
            this.Id = id;
            this.Name = name;
            this.RequiredFields = requiredFields;
            this.OptionalFields = optionalFields;
            this.Note = note;
        }

        /// <summary>
        /// Service code to be included in the booking of shipments.
        /// </summary>
        /// <value>Service code to be included in the booking of shipments.</value>
        /// <example>&quot;EMAIL_NT&quot;</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// ID of the service. Used for booking in older versions of the API.
        /// </summary>
        /// <value>ID of the service. Used for booking in older versions of the API.</value>
        /// <example>21</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the service.
        /// </summary>
        /// <value>Name of the service.</value>
        /// <example>&quot;Email notification&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Comma-separated string indicating fields that are required to book a shipment with the service.
        /// </summary>
        /// <value>Comma-separated string indicating fields that are required to book a shipment with the service.</value>
        /// <example>&quot;receiver_email&quot;</example>
        [DataMember(Name = "required_fields", EmitDefaultValue = false)]
        public string RequiredFields { get; set; }

        /// <summary>
        /// Comma-separated string indicating fields that are optional to book a shipment with the service.
        /// </summary>
        /// <value>Comma-separated string indicating fields that are optional to book a shipment with the service.</value>
        /// <example>&quot;delivery_instruction&quot;</example>
        [DataMember(Name = "optional_fields", EmitDefaultValue = false)]
        public string OptionalFields { get; set; }

        /// <summary>
        /// Information about the service.
        /// </summary>
        /// <value>Information about the service.</value>
        /// <example>&quot;Email notification is required&quot;</example>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequiredShippingProductService {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiredFields: ").Append(RequiredFields).Append("\n");
            sb.Append("  OptionalFields: ").Append(OptionalFields).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequiredShippingProductService);
        }

        /// <summary>
        /// Returns true if RequiredShippingProductService instances are equal
        /// </summary>
        /// <param name="input">Instance of RequiredShippingProductService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequiredShippingProductService input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RequiredFields == input.RequiredFields ||
                    (this.RequiredFields != null &&
                    this.RequiredFields.Equals(input.RequiredFields))
                ) && 
                (
                    this.OptionalFields == input.OptionalFields ||
                    (this.OptionalFields != null &&
                    this.OptionalFields.Equals(input.OptionalFields))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RequiredFields != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredFields.GetHashCode();
                }
                if (this.OptionalFields != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalFields.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
