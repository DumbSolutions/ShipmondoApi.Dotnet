/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Printer
    /// </summary>
    [DataContract(Name = "Printer")]
    public partial class Printer : IEquatable<Printer>, IValidatableObject
    {
        /// <summary>
        /// The given format of the printer
        /// </summary>
        /// <value>The given format of the printer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            /// Enum Zpl for value: zpl
            /// </summary>
            [EnumMember(Value = "zpl")]
            Zpl = 1,

            /// <summary>
            /// Enum _10x19 for value: 10x19
            /// </summary>
            [EnumMember(Value = "10x19")]
            _10x19 = 2,

            /// <summary>
            /// Enum A4 for value: a4
            /// </summary>
            [EnumMember(Value = "a4")]
            A4 = 3

        }


        /// <summary>
        /// The given format of the printer
        /// </summary>
        /// <value>The given format of the printer</value>
        /// <example>&quot;zpl&quot;</example>
        [DataMember(Name = "label_format", EmitDefaultValue = false)]
        public LabelFormatEnum? LabelFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Printer" /> class.
        /// </summary>
        /// <param name="name">User-specified name of the printer..</param>
        /// <param name="hostname">The name of the computer/host from which the printer is accessed..</param>
        /// <param name="printer">The name of the printer as it appears on the computer/host..</param>
        /// <param name="labelFormat">The given format of the printer.</param>
        /// <param name="defaultPrinter">Indicates if the printer is default for shipments (default to false).</param>
        /// <param name="defaultDocumentPrinter">Indicates if the printer is default for printing documents such as proforma invoices. (default to false).</param>
        /// <param name="defaultPickDocumentPrinter">Indicates if the printer is default for printing pick documents such as packing slips and pick path documents. (default to false).</param>
        /// <param name="autoPrint">autoPrint (default to false).</param>
        /// <param name="staffAccountId">The identifier for the related staff account..</param>
        public Printer(string name = default(string), string hostname = default(string), string printer = default(string), LabelFormatEnum? labelFormat = default(LabelFormatEnum?), bool defaultPrinter = false, bool defaultDocumentPrinter = false, bool defaultPickDocumentPrinter = false, bool autoPrint = false, int staffAccountId = default(int))
        {
            this.Name = name;
            this.Hostname = hostname;
            this._Printer = printer;
            this.LabelFormat = labelFormat;
            this.DefaultPrinter = defaultPrinter;
            this.DefaultDocumentPrinter = defaultDocumentPrinter;
            this.DefaultPickDocumentPrinter = defaultPickDocumentPrinter;
            this.AutoPrint = autoPrint;
            this.StaffAccountId = staffAccountId;
        }

        /// <summary>
        /// User-specified name of the printer.
        /// </summary>
        /// <value>User-specified name of the printer.</value>
        /// <example>&quot;Warehouse Printer 02&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the computer/host from which the printer is accessed.
        /// </summary>
        /// <value>The name of the computer/host from which the printer is accessed.</value>
        /// <example>&quot;WAREHOUSE-PC-01&quot;</example>
        [DataMember(Name = "hostname", EmitDefaultValue = false)]
        public string Hostname { get; set; }

        /// <summary>
        /// The name of the printer as it appears on the computer/host.
        /// </summary>
        /// <value>The name of the printer as it appears on the computer/host.</value>
        /// <example>&quot;GK420D&quot;</example>
        [DataMember(Name = "printer", EmitDefaultValue = false)]
        public string _Printer { get; set; }

        /// <summary>
        /// Indicates if the printer is default for shipments
        /// </summary>
        /// <value>Indicates if the printer is default for shipments</value>
        [DataMember(Name = "default_printer", EmitDefaultValue = true)]
        public bool DefaultPrinter { get; set; }

        /// <summary>
        /// Indicates if the printer is default for printing documents such as proforma invoices.
        /// </summary>
        /// <value>Indicates if the printer is default for printing documents such as proforma invoices.</value>
        [DataMember(Name = "default_document_printer", EmitDefaultValue = true)]
        public bool DefaultDocumentPrinter { get; set; }

        /// <summary>
        /// Indicates if the printer is default for printing pick documents such as packing slips and pick path documents.
        /// </summary>
        /// <value>Indicates if the printer is default for printing pick documents such as packing slips and pick path documents.</value>
        [DataMember(Name = "default_pick_document_printer", EmitDefaultValue = true)]
        public bool DefaultPickDocumentPrinter { get; set; }

        /// <summary>
        /// Gets or Sets AutoPrint
        /// </summary>
        [DataMember(Name = "auto_print", EmitDefaultValue = true)]
        [Obsolete]
        public bool AutoPrint { get; set; }

        /// <summary>
        /// The identifier for the related staff account.
        /// </summary>
        /// <value>The identifier for the related staff account.</value>
        /// <example>7</example>
        [DataMember(Name = "staff_account_id", EmitDefaultValue = false)]
        public int StaffAccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Printer {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  _Printer: ").Append(_Printer).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  DefaultPrinter: ").Append(DefaultPrinter).Append("\n");
            sb.Append("  DefaultDocumentPrinter: ").Append(DefaultDocumentPrinter).Append("\n");
            sb.Append("  DefaultPickDocumentPrinter: ").Append(DefaultPickDocumentPrinter).Append("\n");
            sb.Append("  AutoPrint: ").Append(AutoPrint).Append("\n");
            sb.Append("  StaffAccountId: ").Append(StaffAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Printer);
        }

        /// <summary>
        /// Returns true if Printer instances are equal
        /// </summary>
        /// <param name="input">Instance of Printer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Printer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this._Printer == input._Printer ||
                    (this._Printer != null &&
                    this._Printer.Equals(input._Printer))
                ) && 
                (
                    this.LabelFormat == input.LabelFormat ||
                    this.LabelFormat.Equals(input.LabelFormat)
                ) && 
                (
                    this.DefaultPrinter == input.DefaultPrinter ||
                    this.DefaultPrinter.Equals(input.DefaultPrinter)
                ) && 
                (
                    this.DefaultDocumentPrinter == input.DefaultDocumentPrinter ||
                    this.DefaultDocumentPrinter.Equals(input.DefaultDocumentPrinter)
                ) && 
                (
                    this.DefaultPickDocumentPrinter == input.DefaultPickDocumentPrinter ||
                    this.DefaultPickDocumentPrinter.Equals(input.DefaultPickDocumentPrinter)
                ) && 
                (
                    this.AutoPrint == input.AutoPrint ||
                    this.AutoPrint.Equals(input.AutoPrint)
                ) && 
                (
                    this.StaffAccountId == input.StaffAccountId ||
                    this.StaffAccountId.Equals(input.StaffAccountId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Hostname != null)
                {
                    hashCode = (hashCode * 59) + this.Hostname.GetHashCode();
                }
                if (this._Printer != null)
                {
                    hashCode = (hashCode * 59) + this._Printer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LabelFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultPrinter.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultDocumentPrinter.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultPickDocumentPrinter.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoPrint.GetHashCode();
                hashCode = (hashCode * 59) + this.StaffAccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
