/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateQuoteListRequest
    /// </summary>
    [DataContract(Name = "CreateQuoteListRequest")]
    public partial class CreateQuoteListRequest : IEquatable<CreateQuoteListRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateQuoteListRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateQuoteListRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateQuoteListRequest" /> class.
        /// </summary>
        /// <param name="sender">sender (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="parcels">parcels (required).</param>
        public CreateQuoteListRequest(QuoteSender sender = default(QuoteSender), QuoteReceiver receiver = default(QuoteReceiver), List<ParcelAdvanced> parcels = default(List<ParcelAdvanced>))
        {
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for CreateQuoteListRequest and cannot be null");
            }
            this.Sender = sender;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for CreateQuoteListRequest and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "parcels" is required (not null)
            if (parcels == null)
            {
                throw new ArgumentNullException("parcels is a required property for CreateQuoteListRequest and cannot be null");
            }
            this.Parcels = parcels;
        }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public QuoteSender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public QuoteReceiver Receiver { get; set; }

        /// <summary>
        /// Gets or Sets Parcels
        /// </summary>
        [DataMember(Name = "parcels", IsRequired = true, EmitDefaultValue = true)]
        public List<ParcelAdvanced> Parcels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateQuoteListRequest {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Parcels: ").Append(Parcels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateQuoteListRequest);
        }

        /// <summary>
        /// Returns true if CreateQuoteListRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateQuoteListRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateQuoteListRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Parcels == input.Parcels ||
                    this.Parcels != null &&
                    input.Parcels != null &&
                    this.Parcels.SequenceEqual(input.Parcels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.Parcels != null)
                {
                    hashCode = (hashCode * 59) + this.Parcels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
