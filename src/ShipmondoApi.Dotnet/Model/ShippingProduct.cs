/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// ShippingProduct
    /// </summary>
    [DataContract(Name = "ShippingProduct")]
    public partial class ShippingProduct : IEquatable<ShippingProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingProduct" /> class.
        /// </summary>
        /// <param name="code">Product code used when referring to the specific product..</param>
        /// <param name="id">ID of the product. Only used in older version of the Shipmondo API..</param>
        /// <param name="name">Name of the product..</param>
        /// <param name="available">Is the product available to book on either own agreements or Shipmondo&#39;s agreement?.</param>
        /// <param name="ownAgreementAvailable">Is the product available to book on own agreements?.</param>
        /// <param name="customerNumbers">Customer numbers associated with own available agreements. If none available then an empty array is returned.</param>
        /// <param name="customsDeclarationRequired">Does the product require customs information to book?.</param>
        /// <param name="servicePointAvailable">Can the product be booked with a service point?.</param>
        /// <param name="servicePointRequired">Is service point required to book this product?.</param>
        /// <param name="expectedTransitTime">The expected transit time of the product..</param>
        /// <param name="senderCountryCode">ISO 3166-1 alpha-2 country code that the product is sent from..</param>
        /// <param name="receiverCountryCode">ISO 3166-1 alpha-2 country code that the product is sent to..</param>
        /// <param name="requiredFields">Comma-separated string indicating fields that are required to book a shipment with the product..</param>
        /// <param name="optionalFields">Comma-separated string indicating fields that are optional to book a shipment with the product..</param>
        /// <param name="requiredParcelFields">Comma-separated string indicating fields that are required (for the objects in the \&quot;parcels\&quot; array) when booking a shipment with the product..</param>
        /// <param name="optionalParcelFields">Comma-separated string indicating fields that are optional (for the objects in the \&quot;parcels\&quot; array) when booking a shipment with the product..</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="destinationCountry">destinationCountry.</param>
        /// <param name="availableServices">availableServices.</param>
        /// <param name="requiredServices">requiredServices.</param>
        /// <param name="weightIntervals">Weight intervals available for use on shipment with this product using Shipmondo&#39;s agreement..</param>
        /// <param name="taWeightIntervals">Weight intervals available for use on shipments with this product using your own carrier agreement..</param>
        /// <param name="allowedIncoterms">Array of allowed Incoterms for the specific product. If empty all Incoterms are allowed..</param>
        public ShippingProduct(string code = default(string), int id = default(int), string name = default(string), bool available = default(bool), bool ownAgreementAvailable = default(bool), List<ShippingProductCustomerNumbersInner> customerNumbers = default(List<ShippingProductCustomerNumbersInner>), bool customsDeclarationRequired = default(bool), bool servicePointAvailable = default(bool), bool servicePointRequired = default(bool), string expectedTransitTime = default(string), string senderCountryCode = default(string), string receiverCountryCode = default(string), string requiredFields = default(string), string optionalFields = default(string), string requiredParcelFields = default(string), string optionalParcelFields = default(string), Carrier carrier = default(Carrier), Country destinationCountry = default(Country), List<ShippingProductService> availableServices = default(List<ShippingProductService>), List<RequiredShippingProductService> requiredServices = default(List<RequiredShippingProductService>), List<WeightInterval> weightIntervals = default(List<WeightInterval>), List<WeightInterval> taWeightIntervals = default(List<WeightInterval>), List<string> allowedIncoterms = default(List<string>))
        {
            this.Code = code;
            this.Id = id;
            this.Name = name;
            this.Available = available;
            this.OwnAgreementAvailable = ownAgreementAvailable;
            this.CustomerNumbers = customerNumbers;
            this.CustomsDeclarationRequired = customsDeclarationRequired;
            this.ServicePointAvailable = servicePointAvailable;
            this.ServicePointRequired = servicePointRequired;
            this.ExpectedTransitTime = expectedTransitTime;
            this.SenderCountryCode = senderCountryCode;
            this.ReceiverCountryCode = receiverCountryCode;
            this.RequiredFields = requiredFields;
            this.OptionalFields = optionalFields;
            this.RequiredParcelFields = requiredParcelFields;
            this.OptionalParcelFields = optionalParcelFields;
            this.Carrier = carrier;
            this.DestinationCountry = destinationCountry;
            this.AvailableServices = availableServices;
            this.RequiredServices = requiredServices;
            this.WeightIntervals = weightIntervals;
            this.TaWeightIntervals = taWeightIntervals;
            this.AllowedIncoterms = allowedIncoterms;
        }

        /// <summary>
        /// Product code used when referring to the specific product.
        /// </summary>
        /// <value>Product code used when referring to the specific product.</value>
        /// <example>&quot;GLSDK_SD&quot;</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// ID of the product. Only used in older version of the Shipmondo API.
        /// </summary>
        /// <value>ID of the product. Only used in older version of the Shipmondo API.</value>
        /// <example>19</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the product.
        /// </summary>
        /// <value>Name of the product.</value>
        /// <example>&quot;Shop Delivery&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Is the product available to book on either own agreements or Shipmondo&#39;s agreement?
        /// </summary>
        /// <value>Is the product available to book on either own agreements or Shipmondo&#39;s agreement?</value>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        [Obsolete]
        public bool Available { get; set; }

        /// <summary>
        /// Is the product available to book on own agreements?
        /// </summary>
        /// <value>Is the product available to book on own agreements?</value>
        [DataMember(Name = "own_agreement_available", EmitDefaultValue = true)]
        public bool OwnAgreementAvailable { get; set; }

        /// <summary>
        /// Customer numbers associated with own available agreements. If none available then an empty array is returned
        /// </summary>
        /// <value>Customer numbers associated with own available agreements. If none available then an empty array is returned</value>
        [DataMember(Name = "customer_numbers", EmitDefaultValue = false)]
        public List<ShippingProductCustomerNumbersInner> CustomerNumbers { get; set; }

        /// <summary>
        /// Does the product require customs information to book?
        /// </summary>
        /// <value>Does the product require customs information to book?</value>
        [DataMember(Name = "customs_declaration_required", EmitDefaultValue = true)]
        public bool CustomsDeclarationRequired { get; set; }

        /// <summary>
        /// Can the product be booked with a service point?
        /// </summary>
        /// <value>Can the product be booked with a service point?</value>
        [DataMember(Name = "service_point_available", EmitDefaultValue = true)]
        public bool ServicePointAvailable { get; set; }

        /// <summary>
        /// Is service point required to book this product?
        /// </summary>
        /// <value>Is service point required to book this product?</value>
        [DataMember(Name = "service_point_required", EmitDefaultValue = true)]
        public bool ServicePointRequired { get; set; }

        /// <summary>
        /// The expected transit time of the product.
        /// </summary>
        /// <value>The expected transit time of the product.</value>
        /// <example>&quot;1-2 days&quot;</example>
        [DataMember(Name = "expected_transit_time", EmitDefaultValue = false)]
        public string ExpectedTransitTime { get; set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 country code that the product is sent from.
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code that the product is sent from.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "sender_country_code", EmitDefaultValue = false)]
        public string SenderCountryCode { get; set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 country code that the product is sent to.
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code that the product is sent to.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "receiver_country_code", EmitDefaultValue = false)]
        public string ReceiverCountryCode { get; set; }

        /// <summary>
        /// Comma-separated string indicating fields that are required to book a shipment with the product.
        /// </summary>
        /// <value>Comma-separated string indicating fields that are required to book a shipment with the product.</value>
        /// <example>&quot;receiver_mobile,service_point_id&quot;</example>
        [DataMember(Name = "required_fields", EmitDefaultValue = false)]
        public string RequiredFields { get; set; }

        /// <summary>
        /// Comma-separated string indicating fields that are optional to book a shipment with the product.
        /// </summary>
        /// <value>Comma-separated string indicating fields that are optional to book a shipment with the product.</value>
        /// <example>&quot;delivery_instruction,pickup_date&quot;</example>
        [DataMember(Name = "optional_fields", EmitDefaultValue = false)]
        public string OptionalFields { get; set; }

        /// <summary>
        /// Comma-separated string indicating fields that are required (for the objects in the \&quot;parcels\&quot; array) when booking a shipment with the product.
        /// </summary>
        /// <value>Comma-separated string indicating fields that are required (for the objects in the \&quot;parcels\&quot; array) when booking a shipment with the product.</value>
        /// <example>&quot;quantity,weight&quot;</example>
        [DataMember(Name = "required_parcel_fields", EmitDefaultValue = false)]
        public string RequiredParcelFields { get; set; }

        /// <summary>
        /// Comma-separated string indicating fields that are optional (for the objects in the \&quot;parcels\&quot; array) when booking a shipment with the product.
        /// </summary>
        /// <value>Comma-separated string indicating fields that are optional (for the objects in the \&quot;parcels\&quot; array) when booking a shipment with the product.</value>
        /// <example>&quot;height,length,width&quot;</example>
        [DataMember(Name = "optional_parcel_fields", EmitDefaultValue = false)]
        public string OptionalParcelFields { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name = "carrier", EmitDefaultValue = false)]
        public Carrier Carrier { get; set; }

        /// <summary>
        /// Gets or Sets DestinationCountry
        /// </summary>
        [DataMember(Name = "destination_country", EmitDefaultValue = false)]
        public Country DestinationCountry { get; set; }

        /// <summary>
        /// Gets or Sets AvailableServices
        /// </summary>
        [DataMember(Name = "available_services", EmitDefaultValue = false)]
        public List<ShippingProductService> AvailableServices { get; set; }

        /// <summary>
        /// Gets or Sets RequiredServices
        /// </summary>
        [DataMember(Name = "required_services", EmitDefaultValue = false)]
        public List<RequiredShippingProductService> RequiredServices { get; set; }

        /// <summary>
        /// Weight intervals available for use on shipment with this product using Shipmondo&#39;s agreement.
        /// </summary>
        /// <value>Weight intervals available for use on shipment with this product using Shipmondo&#39;s agreement.</value>
        [DataMember(Name = "weight_intervals", EmitDefaultValue = false)]
        public List<WeightInterval> WeightIntervals { get; set; }

        /// <summary>
        /// Weight intervals available for use on shipments with this product using your own carrier agreement.
        /// </summary>
        /// <value>Weight intervals available for use on shipments with this product using your own carrier agreement.</value>
        [DataMember(Name = "ta_weight_intervals", EmitDefaultValue = false)]
        public List<WeightInterval> TaWeightIntervals { get; set; }

        /// <summary>
        /// Array of allowed Incoterms for the specific product. If empty all Incoterms are allowed.
        /// </summary>
        /// <value>Array of allowed Incoterms for the specific product. If empty all Incoterms are allowed.</value>
        [DataMember(Name = "allowed_incoterms", EmitDefaultValue = false)]
        public List<string> AllowedIncoterms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingProduct {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  OwnAgreementAvailable: ").Append(OwnAgreementAvailable).Append("\n");
            sb.Append("  CustomerNumbers: ").Append(CustomerNumbers).Append("\n");
            sb.Append("  CustomsDeclarationRequired: ").Append(CustomsDeclarationRequired).Append("\n");
            sb.Append("  ServicePointAvailable: ").Append(ServicePointAvailable).Append("\n");
            sb.Append("  ServicePointRequired: ").Append(ServicePointRequired).Append("\n");
            sb.Append("  ExpectedTransitTime: ").Append(ExpectedTransitTime).Append("\n");
            sb.Append("  SenderCountryCode: ").Append(SenderCountryCode).Append("\n");
            sb.Append("  ReceiverCountryCode: ").Append(ReceiverCountryCode).Append("\n");
            sb.Append("  RequiredFields: ").Append(RequiredFields).Append("\n");
            sb.Append("  OptionalFields: ").Append(OptionalFields).Append("\n");
            sb.Append("  RequiredParcelFields: ").Append(RequiredParcelFields).Append("\n");
            sb.Append("  OptionalParcelFields: ").Append(OptionalParcelFields).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  DestinationCountry: ").Append(DestinationCountry).Append("\n");
            sb.Append("  AvailableServices: ").Append(AvailableServices).Append("\n");
            sb.Append("  RequiredServices: ").Append(RequiredServices).Append("\n");
            sb.Append("  WeightIntervals: ").Append(WeightIntervals).Append("\n");
            sb.Append("  TaWeightIntervals: ").Append(TaWeightIntervals).Append("\n");
            sb.Append("  AllowedIncoterms: ").Append(AllowedIncoterms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingProduct);
        }

        /// <summary>
        /// Returns true if ShippingProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingProduct input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.OwnAgreementAvailable == input.OwnAgreementAvailable ||
                    this.OwnAgreementAvailable.Equals(input.OwnAgreementAvailable)
                ) && 
                (
                    this.CustomerNumbers == input.CustomerNumbers ||
                    this.CustomerNumbers != null &&
                    input.CustomerNumbers != null &&
                    this.CustomerNumbers.SequenceEqual(input.CustomerNumbers)
                ) && 
                (
                    this.CustomsDeclarationRequired == input.CustomsDeclarationRequired ||
                    this.CustomsDeclarationRequired.Equals(input.CustomsDeclarationRequired)
                ) && 
                (
                    this.ServicePointAvailable == input.ServicePointAvailable ||
                    this.ServicePointAvailable.Equals(input.ServicePointAvailable)
                ) && 
                (
                    this.ServicePointRequired == input.ServicePointRequired ||
                    this.ServicePointRequired.Equals(input.ServicePointRequired)
                ) && 
                (
                    this.ExpectedTransitTime == input.ExpectedTransitTime ||
                    (this.ExpectedTransitTime != null &&
                    this.ExpectedTransitTime.Equals(input.ExpectedTransitTime))
                ) && 
                (
                    this.SenderCountryCode == input.SenderCountryCode ||
                    (this.SenderCountryCode != null &&
                    this.SenderCountryCode.Equals(input.SenderCountryCode))
                ) && 
                (
                    this.ReceiverCountryCode == input.ReceiverCountryCode ||
                    (this.ReceiverCountryCode != null &&
                    this.ReceiverCountryCode.Equals(input.ReceiverCountryCode))
                ) && 
                (
                    this.RequiredFields == input.RequiredFields ||
                    (this.RequiredFields != null &&
                    this.RequiredFields.Equals(input.RequiredFields))
                ) && 
                (
                    this.OptionalFields == input.OptionalFields ||
                    (this.OptionalFields != null &&
                    this.OptionalFields.Equals(input.OptionalFields))
                ) && 
                (
                    this.RequiredParcelFields == input.RequiredParcelFields ||
                    (this.RequiredParcelFields != null &&
                    this.RequiredParcelFields.Equals(input.RequiredParcelFields))
                ) && 
                (
                    this.OptionalParcelFields == input.OptionalParcelFields ||
                    (this.OptionalParcelFields != null &&
                    this.OptionalParcelFields.Equals(input.OptionalParcelFields))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.DestinationCountry == input.DestinationCountry ||
                    (this.DestinationCountry != null &&
                    this.DestinationCountry.Equals(input.DestinationCountry))
                ) && 
                (
                    this.AvailableServices == input.AvailableServices ||
                    this.AvailableServices != null &&
                    input.AvailableServices != null &&
                    this.AvailableServices.SequenceEqual(input.AvailableServices)
                ) && 
                (
                    this.RequiredServices == input.RequiredServices ||
                    this.RequiredServices != null &&
                    input.RequiredServices != null &&
                    this.RequiredServices.SequenceEqual(input.RequiredServices)
                ) && 
                (
                    this.WeightIntervals == input.WeightIntervals ||
                    this.WeightIntervals != null &&
                    input.WeightIntervals != null &&
                    this.WeightIntervals.SequenceEqual(input.WeightIntervals)
                ) && 
                (
                    this.TaWeightIntervals == input.TaWeightIntervals ||
                    this.TaWeightIntervals != null &&
                    input.TaWeightIntervals != null &&
                    this.TaWeightIntervals.SequenceEqual(input.TaWeightIntervals)
                ) && 
                (
                    this.AllowedIncoterms == input.AllowedIncoterms ||
                    this.AllowedIncoterms != null &&
                    input.AllowedIncoterms != null &&
                    this.AllowedIncoterms.SequenceEqual(input.AllowedIncoterms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnAgreementAvailable.GetHashCode();
                if (this.CustomerNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerNumbers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomsDeclarationRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.ServicePointAvailable.GetHashCode();
                hashCode = (hashCode * 59) + this.ServicePointRequired.GetHashCode();
                if (this.ExpectedTransitTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedTransitTime.GetHashCode();
                }
                if (this.SenderCountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.SenderCountryCode.GetHashCode();
                }
                if (this.ReceiverCountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiverCountryCode.GetHashCode();
                }
                if (this.RequiredFields != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredFields.GetHashCode();
                }
                if (this.OptionalFields != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalFields.GetHashCode();
                }
                if (this.RequiredParcelFields != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredParcelFields.GetHashCode();
                }
                if (this.OptionalParcelFields != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalParcelFields.GetHashCode();
                }
                if (this.Carrier != null)
                {
                    hashCode = (hashCode * 59) + this.Carrier.GetHashCode();
                }
                if (this.DestinationCountry != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationCountry.GetHashCode();
                }
                if (this.AvailableServices != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableServices.GetHashCode();
                }
                if (this.RequiredServices != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredServices.GetHashCode();
                }
                if (this.WeightIntervals != null)
                {
                    hashCode = (hashCode * 59) + this.WeightIntervals.GetHashCode();
                }
                if (this.TaWeightIntervals != null)
                {
                    hashCode = (hashCode * 59) + this.TaWeightIntervals.GetHashCode();
                }
                if (this.AllowedIncoterms != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedIncoterms.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
