/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// BookkeepingIntegration
    /// </summary>
    [DataContract(Name = "BookkeepingIntegration")]
    public partial class BookkeepingIntegration : IEquatable<BookkeepingIntegration>, IValidatableObject
    {
        /// <summary>
        /// Code of the bookkeeping platform that is integrated to. Used to refer to the provider.
        /// </summary>
        /// <value>Code of the bookkeeping platform that is integrated to. Used to refer to the provider.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum Economic for value: economic
            /// </summary>
            [EnumMember(Value = "economic")]
            Economic = 1,

            /// <summary>
            /// Enum Billy for value: billy
            /// </summary>
            [EnumMember(Value = "billy")]
            Billy = 2,

            /// <summary>
            /// Enum Dinero for value: dinero
            /// </summary>
            [EnumMember(Value = "dinero")]
            Dinero = 3

        }


        /// <summary>
        /// Code of the bookkeeping platform that is integrated to. Used to refer to the provider.
        /// </summary>
        /// <value>Code of the bookkeeping platform that is integrated to. Used to refer to the provider.</value>
        /// <example>&quot;economic&quot;</example>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        public PlatformEnum? Platform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BookkeepingIntegration" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the object..</param>
        /// <param name="name">User-specified name of the bookkeeping integration..</param>
        /// <param name="platform">Code of the bookkeeping platform that is integrated to. Used to refer to the provider..</param>
        public BookkeepingIntegration(int id = default(int), string name = default(string), PlatformEnum? platform = default(PlatformEnum?))
        {
            this.Id = id;
            this.Name = name;
            this.Platform = platform;
        }

        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        /// <value>Unique identifier of the object.</value>
        /// <example>12160</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// User-specified name of the bookkeeping integration.
        /// </summary>
        /// <value>User-specified name of the bookkeeping integration.</value>
        /// <example>&quot;Testcompany Bookkeeping&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookkeepingIntegration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookkeepingIntegration);
        }

        /// <summary>
        /// Returns true if BookkeepingIntegration instances are equal
        /// </summary>
        /// <param name="input">Instance of BookkeepingIntegration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookkeepingIntegration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Platform == input.Platform ||
                    this.Platform.Equals(input.Platform)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Platform.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
