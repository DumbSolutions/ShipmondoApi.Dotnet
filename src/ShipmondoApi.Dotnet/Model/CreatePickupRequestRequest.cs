/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreatePickupRequestRequest
    /// </summary>
    [DataContract(Name = "CreatePickupRequestRequest")]
    public partial class CreatePickupRequestRequest : IEquatable<CreatePickupRequestRequest>, IValidatableObject
    {
        /// <summary>
        /// Carrier code for the carrier the pickup should be requested for.
        /// </summary>
        /// <value>Carrier code for the carrier the pickup should be requested for.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierCodeEnum
        {
            /// <summary>
            /// Enum FedEx for value: fed_ex
            /// </summary>
            [EnumMember(Value = "fed_ex")]
            FedEx = 1,

            /// <summary>
            /// Enum Ups for value: ups
            /// </summary>
            [EnumMember(Value = "ups")]
            Ups = 2,

            /// <summary>
            /// Enum DhlExpress for value: dhl_express
            /// </summary>
            [EnumMember(Value = "dhl_express")]
            DhlExpress = 3,

            /// <summary>
            /// Enum Geodis for value: geodis
            /// </summary>
            [EnumMember(Value = "geodis")]
            Geodis = 4,

            /// <summary>
            /// Enum DhlFreightSe for value: dhl_freight_se
            /// </summary>
            [EnumMember(Value = "dhl_freight_se")]
            DhlFreightSe = 5,

            /// <summary>
            /// Enum PostNord for value: post_nord
            /// </summary>
            [EnumMember(Value = "post_nord")]
            PostNord = 6,

            /// <summary>
            /// Enum Bring for value: bring
            /// </summary>
            [EnumMember(Value = "bring")]
            Bring = 7

        }


        /// <summary>
        /// Carrier code for the carrier the pickup should be requested for.
        /// </summary>
        /// <value>Carrier code for the carrier the pickup should be requested for.</value>
        /// <example>&quot;ups&quot;</example>
        [DataMember(Name = "carrier_code", IsRequired = true, EmitDefaultValue = true)]
        public CarrierCodeEnum CarrierCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePickupRequestRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePickupRequestRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePickupRequestRequest" /> class.
        /// </summary>
        /// <param name="carrierCode">Carrier code for the carrier the pickup should be requested for. (required).</param>
        /// <param name="pickupAddress">pickupAddress (required).</param>
        /// <param name="packageLocation">Where on the address the packages should be picked up. (required).</param>
        /// <param name="readyBy">When shipments are ready for pickup. Pickup date is taken from the date given here. (required).</param>
        /// <param name="closedBy">When shipments should be picked up by. The date part is ignored. (required).</param>
        /// <param name="shipmentIds">IDs of the shipments you wish to be picked up. (required).</param>
        /// <param name="isResidential">Only used for UPS. Whether the pickup address is residential or not. (default to false).</param>
        public CreatePickupRequestRequest(CarrierCodeEnum carrierCode = default(CarrierCodeEnum), CreatePickupRequestRequestPickupAddress pickupAddress = default(CreatePickupRequestRequestPickupAddress), string packageLocation = default(string), DateTime readyBy = default(DateTime), DateTime closedBy = default(DateTime), List<int> shipmentIds = default(List<int>), bool isResidential = false)
        {
            this.CarrierCode = carrierCode;
            // to ensure "pickupAddress" is required (not null)
            if (pickupAddress == null)
            {
                throw new ArgumentNullException("pickupAddress is a required property for CreatePickupRequestRequest and cannot be null");
            }
            this.PickupAddress = pickupAddress;
            // to ensure "packageLocation" is required (not null)
            if (packageLocation == null)
            {
                throw new ArgumentNullException("packageLocation is a required property for CreatePickupRequestRequest and cannot be null");
            }
            this.PackageLocation = packageLocation;
            this.ReadyBy = readyBy;
            this.ClosedBy = closedBy;
            // to ensure "shipmentIds" is required (not null)
            if (shipmentIds == null)
            {
                throw new ArgumentNullException("shipmentIds is a required property for CreatePickupRequestRequest and cannot be null");
            }
            this.ShipmentIds = shipmentIds;
            this.IsResidential = isResidential;
        }

        /// <summary>
        /// Gets or Sets PickupAddress
        /// </summary>
        [DataMember(Name = "pickup_address", IsRequired = true, EmitDefaultValue = true)]
        public CreatePickupRequestRequestPickupAddress PickupAddress { get; set; }

        /// <summary>
        /// Where on the address the packages should be picked up.
        /// </summary>
        /// <value>Where on the address the packages should be picked up.</value>
        /// <example>&quot;At the front door&quot;</example>
        [DataMember(Name = "package_location", IsRequired = true, EmitDefaultValue = true)]
        public string PackageLocation { get; set; }

        /// <summary>
        /// When shipments are ready for pickup. Pickup date is taken from the date given here.
        /// </summary>
        /// <value>When shipments are ready for pickup. Pickup date is taken from the date given here.</value>
        /// <example>&quot;2019-02-14T08:00Z&quot;</example>
        [DataMember(Name = "ready_by", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ReadyBy { get; set; }

        /// <summary>
        /// When shipments should be picked up by. The date part is ignored.
        /// </summary>
        /// <value>When shipments should be picked up by. The date part is ignored.</value>
        /// <example>&quot;2019-02-14T15:00Z&quot;</example>
        [DataMember(Name = "closed_by", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ClosedBy { get; set; }

        /// <summary>
        /// IDs of the shipments you wish to be picked up.
        /// </summary>
        /// <value>IDs of the shipments you wish to be picked up.</value>
        [DataMember(Name = "shipment_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<int> ShipmentIds { get; set; }

        /// <summary>
        /// Only used for UPS. Whether the pickup address is residential or not.
        /// </summary>
        /// <value>Only used for UPS. Whether the pickup address is residential or not.</value>
        [DataMember(Name = "is_residential", EmitDefaultValue = true)]
        public bool IsResidential { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePickupRequestRequest {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  PickupAddress: ").Append(PickupAddress).Append("\n");
            sb.Append("  PackageLocation: ").Append(PackageLocation).Append("\n");
            sb.Append("  ReadyBy: ").Append(ReadyBy).Append("\n");
            sb.Append("  ClosedBy: ").Append(ClosedBy).Append("\n");
            sb.Append("  ShipmentIds: ").Append(ShipmentIds).Append("\n");
            sb.Append("  IsResidential: ").Append(IsResidential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePickupRequestRequest);
        }

        /// <summary>
        /// Returns true if CreatePickupRequestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePickupRequestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePickupRequestRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CarrierCode == input.CarrierCode ||
                    this.CarrierCode.Equals(input.CarrierCode)
                ) && 
                (
                    this.PickupAddress == input.PickupAddress ||
                    (this.PickupAddress != null &&
                    this.PickupAddress.Equals(input.PickupAddress))
                ) && 
                (
                    this.PackageLocation == input.PackageLocation ||
                    (this.PackageLocation != null &&
                    this.PackageLocation.Equals(input.PackageLocation))
                ) && 
                (
                    this.ReadyBy == input.ReadyBy ||
                    (this.ReadyBy != null &&
                    this.ReadyBy.Equals(input.ReadyBy))
                ) && 
                (
                    this.ClosedBy == input.ClosedBy ||
                    (this.ClosedBy != null &&
                    this.ClosedBy.Equals(input.ClosedBy))
                ) && 
                (
                    this.ShipmentIds == input.ShipmentIds ||
                    this.ShipmentIds != null &&
                    input.ShipmentIds != null &&
                    this.ShipmentIds.SequenceEqual(input.ShipmentIds)
                ) && 
                (
                    this.IsResidential == input.IsResidential ||
                    this.IsResidential.Equals(input.IsResidential)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                if (this.PickupAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PickupAddress.GetHashCode();
                }
                if (this.PackageLocation != null)
                {
                    hashCode = (hashCode * 59) + this.PackageLocation.GetHashCode();
                }
                if (this.ReadyBy != null)
                {
                    hashCode = (hashCode * 59) + this.ReadyBy.GetHashCode();
                }
                if (this.ClosedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedBy.GetHashCode();
                }
                if (this.ShipmentIds != null)
                {
                    hashCode = (hashCode * 59) + this.ShipmentIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsResidential.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
