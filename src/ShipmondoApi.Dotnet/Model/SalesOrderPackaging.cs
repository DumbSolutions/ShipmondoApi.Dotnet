/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// SalesOrderPackaging
    /// </summary>
    [DataContract(Name = "SalesOrderPackaging")]
    public partial class SalesOrderPackaging : IEquatable<SalesOrderPackaging>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderPackaging" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the object..</param>
        /// <param name="name">User-specified name of the packaging..</param>
        /// <param name="barcode">Barcode of the item, which is used when scanning item for pick. Will be displayed as a code 128 barcode..</param>
        /// <param name="weight">Weight of the order packaging in grams..</param>
        /// <param name="length">Length of the order packaging in cm..</param>
        /// <param name="height">Height of the order packaging in cm..</param>
        /// <param name="width">Width of the order packaging in cm..</param>
        public SalesOrderPackaging(int id = default(int), string name = default(string), string barcode = default(string), int weight = default(int), int length = default(int), int height = default(int), int width = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.Barcode = barcode;
            this.Weight = weight;
            this.Length = length;
            this.Height = height;
            this.Width = width;
        }

        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        /// <value>Unique identifier of the object.</value>
        /// <example>11460</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// User-specified name of the packaging.
        /// </summary>
        /// <value>User-specified name of the packaging.</value>
        /// <example>&quot;Standard Packaging&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Barcode of the item, which is used when scanning item for pick. Will be displayed as a code 128 barcode.
        /// </summary>
        /// <value>Barcode of the item, which is used when scanning item for pick. Will be displayed as a code 128 barcode.</value>
        /// <example>&quot;AB12345334&quot;</example>
        [DataMember(Name = "barcode", EmitDefaultValue = false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Weight of the order packaging in grams.
        /// </summary>
        /// <value>Weight of the order packaging in grams.</value>
        /// <example>1000</example>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Length of the order packaging in cm.
        /// </summary>
        /// <value>Length of the order packaging in cm.</value>
        /// <example>10</example>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public int Length { get; set; }

        /// <summary>
        /// Height of the order packaging in cm.
        /// </summary>
        /// <value>Height of the order packaging in cm.</value>
        /// <example>10</example>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Width of the order packaging in cm.
        /// </summary>
        /// <value>Width of the order packaging in cm.</value>
        /// <example>10</example>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesOrderPackaging {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesOrderPackaging);
        }

        /// <summary>
        /// Returns true if SalesOrderPackaging instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesOrderPackaging to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesOrderPackaging input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Barcode != null)
                {
                    hashCode = (hashCode * 59) + this.Barcode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.Length.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
