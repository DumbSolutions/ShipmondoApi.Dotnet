/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Shipment
    /// </summary>
    [DataContract(Name = "Shipment")]
    public partial class Shipment : IEquatable<Shipment>, IValidatableObject
    {
        /// <summary>
        /// The type of the source from which the shipment has been created
        /// </summary>
        /// <value>The type of the source from which the shipment has been created</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceTypeEnum
        {
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 1,

            /// <summary>
            /// Enum Imported for value: imported
            /// </summary>
            [EnumMember(Value = "imported")]
            Imported = 2,

            /// <summary>
            /// Enum Fulfillment for value: fulfillment
            /// </summary>
            [EnumMember(Value = "fulfillment")]
            Fulfillment = 3,

            /// <summary>
            /// Enum Return for value: return
            /// </summary>
            [EnumMember(Value = "return")]
            Return = 4,

            /// <summary>
            /// Enum Repurchase for value: repurchase
            /// </summary>
            [EnumMember(Value = "repurchase")]
            Repurchase = 5,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 6,

            /// <summary>
            /// Enum AddressBook for value: address_book
            /// </summary>
            [EnumMember(Value = "address_book")]
            AddressBook = 7

        }


        /// <summary>
        /// The type of the source from which the shipment has been created
        /// </summary>
        /// <value>The type of the source from which the shipment has been created</value>
        /// <example>&quot;manual&quot;</example>
        [DataMember(Name = "source_type", EmitDefaultValue = false)]
        public SourceTypeEnum? SourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="id">ID of the shipment..</param>
        /// <param name="createdAt">Date and time the shipment was created..</param>
        /// <param name="updatedAt">Date and time the shipment was last updated..</param>
        /// <param name="carrierCode">Carrier code referring to the carrier of the shipment..</param>
        /// <param name="description">Text to describe the shipment, which can be used when presenting it..</param>
        /// <param name="contents">General description of the contents of the shipment..</param>
        /// <param name="termOfTrade">Incoterm for the shipments, e.g., DDP when customs should be paid by the sender..</param>
        /// <param name="productId">ID of the product of the shipment..</param>
        /// <param name="services">Comma-separated string of IDs of services that are booked with the shipment..</param>
        /// <param name="productCode">Product code of the product of the shipment..</param>
        /// <param name="serviceCodes">Comma-separated string of codes of services that is booked with the shipment..</param>
        /// <param name="price">Price of the shipment including VAT..</param>
        /// <param name="reference">Sender&#39;s reference of the shipment..</param>
        /// <param name="orderId">Order no. from webshop, if shipment is based on an order or draft in Shipmondo..</param>
        /// <param name="pkgNo">Carrier&#39;s shipment number, referring to the whole shipment..</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="sender">sender.</param>
        /// <param name="parcels">parcels.</param>
        /// <param name="servicePoint">servicePoint.</param>
        /// <param name="pickUp">pickUp.</param>
        /// <param name="billTo">billTo.</param>
        /// <param name="paperlessTrade">If the shipment is created with paperless trade, then it is not necessary to print out physical proforma invoice. (default to false).</param>
        /// <param name="labellessCode">If labelless is supported on the certain shipment by the carrier, then this element will be available with the code that can be written on the parcel..</param>
        /// <param name="sourceId">ID of the source of the shipment from which it has been created..</param>
        /// <param name="sourceType">The type of the source from which the shipment has been created.</param>
        /// <param name="returnShipmentId">ID of the return shipment that has been created for the shipment..</param>
        /// <param name="originShipmentId">ID of the origin shipment that the shipment was created as return for..</param>
        /// <param name="carrierInsurance">carrierInsurance.</param>
        /// <param name="waybillReference">Reference of the bulk waybill that the shipment is included in..</param>
        public Shipment(int id = default(int), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string carrierCode = default(string), string description = default(string), string contents = default(string), string termOfTrade = default(string), int productId = default(int), string services = default(string), string productCode = default(string), string serviceCodes = default(string), decimal price = default(decimal), string reference = default(string), string orderId = default(string), string pkgNo = default(string), ShipmentReceiver receiver = default(ShipmentReceiver), ShipmentSender sender = default(ShipmentSender), List<Parcel> parcels = default(List<Parcel>), ShipmentServicePoint servicePoint = default(ShipmentServicePoint), PickUp pickUp = default(PickUp), ShipmentBillTo billTo = default(ShipmentBillTo), bool paperlessTrade = false, string labellessCode = default(string), string sourceId = default(string), SourceTypeEnum? sourceType = default(SourceTypeEnum?), string returnShipmentId = default(string), string originShipmentId = default(string), ShipmentCarrierInsurance carrierInsurance = default(ShipmentCarrierInsurance), string waybillReference = default(string))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.CarrierCode = carrierCode;
            this.Description = description;
            this.Contents = contents;
            this.TermOfTrade = termOfTrade;
            this.ProductId = productId;
            this.Services = services;
            this.ProductCode = productCode;
            this.ServiceCodes = serviceCodes;
            this.Price = price;
            this.Reference = reference;
            this.OrderId = orderId;
            this.PkgNo = pkgNo;
            this.Receiver = receiver;
            this.Sender = sender;
            this.Parcels = parcels;
            this.ServicePoint = servicePoint;
            this.PickUp = pickUp;
            this.BillTo = billTo;
            this.PaperlessTrade = paperlessTrade;
            this.LabellessCode = labellessCode;
            this.SourceId = sourceId;
            this.SourceType = sourceType;
            this.ReturnShipmentId = returnShipmentId;
            this.OriginShipmentId = originShipmentId;
            this.CarrierInsurance = carrierInsurance;
            this.WaybillReference = waybillReference;
        }

        /// <summary>
        /// ID of the shipment.
        /// </summary>
        /// <value>ID of the shipment.</value>
        /// <example>1168</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Date and time the shipment was created.
        /// </summary>
        /// <value>Date and time the shipment was created.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Date and time the shipment was last updated.
        /// </summary>
        /// <value>Date and time the shipment was last updated.</value>
        /// <example>&quot;2017-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Carrier code referring to the carrier of the shipment.
        /// </summary>
        /// <value>Carrier code referring to the carrier of the shipment.</value>
        /// <example>&quot;gls&quot;</example>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Text to describe the shipment, which can be used when presenting it.
        /// </summary>
        /// <value>Text to describe the shipment, which can be used when presenting it.</value>
        /// <example>&quot;ShopDelivery&quot;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// General description of the contents of the shipment.
        /// </summary>
        /// <value>General description of the contents of the shipment.</value>
        /// <example>&quot;Goods&quot;</example>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public string Contents { get; set; }

        /// <summary>
        /// Incoterm for the shipments, e.g., DDP when customs should be paid by the sender.
        /// </summary>
        /// <value>Incoterm for the shipments, e.g., DDP when customs should be paid by the sender.</value>
        /// <example>&quot;DAP&quot;</example>
        [DataMember(Name = "term_of_trade", EmitDefaultValue = false)]
        public string TermOfTrade { get; set; }

        /// <summary>
        /// ID of the product of the shipment.
        /// </summary>
        /// <value>ID of the product of the shipment.</value>
        /// <example>64</example>
        [DataMember(Name = "product_id", EmitDefaultValue = false)]
        public int ProductId { get; set; }

        /// <summary>
        /// Comma-separated string of IDs of services that are booked with the shipment.
        /// </summary>
        /// <value>Comma-separated string of IDs of services that are booked with the shipment.</value>
        /// <example>&quot;23,24&quot;</example>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public string Services { get; set; }

        /// <summary>
        /// Product code of the product of the shipment.
        /// </summary>
        /// <value>Product code of the product of the shipment.</value>
        /// <example>&quot;GLSDK_SD&quot;</example>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Comma-separated string of codes of services that is booked with the shipment.
        /// </summary>
        /// <value>Comma-separated string of codes of services that is booked with the shipment.</value>
        /// <example>&quot;EMAIL_NT,SMS_NT&quot;</example>
        [DataMember(Name = "service_codes", EmitDefaultValue = false)]
        public string ServiceCodes { get; set; }

        /// <summary>
        /// Price of the shipment including VAT.
        /// </summary>
        /// <value>Price of the shipment including VAT.</value>
        /// <example>42.5</example>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Sender&#39;s reference of the shipment.
        /// </summary>
        /// <value>Sender&#39;s reference of the shipment.</value>
        /// <example>&quot;5678123&quot;</example>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Order no. from webshop, if shipment is based on an order or draft in Shipmondo.
        /// </summary>
        /// <value>Order no. from webshop, if shipment is based on an order or draft in Shipmondo.</value>
        /// <example>&quot;5678123&quot;</example>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Carrier&#39;s shipment number, referring to the whole shipment.
        /// </summary>
        /// <value>Carrier&#39;s shipment number, referring to the whole shipment.</value>
        /// <example>&quot;6064518784&quot;</example>
        [DataMember(Name = "pkg_no", EmitDefaultValue = false)]
        public string PkgNo { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", EmitDefaultValue = false)]
        public ShipmentReceiver Receiver { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public ShipmentSender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Parcels
        /// </summary>
        [DataMember(Name = "parcels", EmitDefaultValue = false)]
        public List<Parcel> Parcels { get; set; }

        /// <summary>
        /// Gets or Sets ServicePoint
        /// </summary>
        [DataMember(Name = "service_point", EmitDefaultValue = false)]
        public ShipmentServicePoint ServicePoint { get; set; }

        /// <summary>
        /// Gets or Sets PickUp
        /// </summary>
        [DataMember(Name = "pick_up", EmitDefaultValue = false)]
        public PickUp PickUp { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name = "bill_to", EmitDefaultValue = false)]
        public ShipmentBillTo BillTo { get; set; }

        /// <summary>
        /// If the shipment is created with paperless trade, then it is not necessary to print out physical proforma invoice.
        /// </summary>
        /// <value>If the shipment is created with paperless trade, then it is not necessary to print out physical proforma invoice.</value>
        [DataMember(Name = "paperless_trade", EmitDefaultValue = true)]
        public bool PaperlessTrade { get; set; }

        /// <summary>
        /// If labelless is supported on the certain shipment by the carrier, then this element will be available with the code that can be written on the parcel.
        /// </summary>
        /// <value>If labelless is supported on the certain shipment by the carrier, then this element will be available with the code that can be written on the parcel.</value>
        /// <example>&quot;123-4567-890&quot;</example>
        [DataMember(Name = "labelless_code", EmitDefaultValue = false)]
        public string LabellessCode { get; set; }

        /// <summary>
        /// ID of the source of the shipment from which it has been created.
        /// </summary>
        /// <value>ID of the source of the shipment from which it has been created.</value>
        /// <example>&quot;1000001234&quot;</example>
        [DataMember(Name = "source_id", EmitDefaultValue = false)]
        public string SourceId { get; set; }

        /// <summary>
        /// ID of the return shipment that has been created for the shipment.
        /// </summary>
        /// <value>ID of the return shipment that has been created for the shipment.</value>
        /// <example>&quot;1000001234&quot;</example>
        [DataMember(Name = "return_shipment_id", EmitDefaultValue = false)]
        public string ReturnShipmentId { get; set; }

        /// <summary>
        /// ID of the origin shipment that the shipment was created as return for.
        /// </summary>
        /// <value>ID of the origin shipment that the shipment was created as return for.</value>
        /// <example>&quot;1000001235&quot;</example>
        [DataMember(Name = "origin_shipment_id", EmitDefaultValue = false)]
        public string OriginShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierInsurance
        /// </summary>
        [DataMember(Name = "carrier_insurance", EmitDefaultValue = false)]
        public ShipmentCarrierInsurance CarrierInsurance { get; set; }

        /// <summary>
        /// Reference of the bulk waybill that the shipment is included in.
        /// </summary>
        /// <value>Reference of the bulk waybill that the shipment is included in.</value>
        /// <example>&quot;CS000000000NO&quot;</example>
        [DataMember(Name = "waybill_reference", EmitDefaultValue = false)]
        public string WaybillReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  TermOfTrade: ").Append(TermOfTrade).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ServiceCodes: ").Append(ServiceCodes).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PkgNo: ").Append(PkgNo).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Parcels: ").Append(Parcels).Append("\n");
            sb.Append("  ServicePoint: ").Append(ServicePoint).Append("\n");
            sb.Append("  PickUp: ").Append(PickUp).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  PaperlessTrade: ").Append(PaperlessTrade).Append("\n");
            sb.Append("  LabellessCode: ").Append(LabellessCode).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  ReturnShipmentId: ").Append(ReturnShipmentId).Append("\n");
            sb.Append("  OriginShipmentId: ").Append(OriginShipmentId).Append("\n");
            sb.Append("  CarrierInsurance: ").Append(CarrierInsurance).Append("\n");
            sb.Append("  WaybillReference: ").Append(WaybillReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shipment);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                ) && 
                (
                    this.TermOfTrade == input.TermOfTrade ||
                    (this.TermOfTrade != null &&
                    this.TermOfTrade.Equals(input.TermOfTrade))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ServiceCodes == input.ServiceCodes ||
                    (this.ServiceCodes != null &&
                    this.ServiceCodes.Equals(input.ServiceCodes))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PkgNo == input.PkgNo ||
                    (this.PkgNo != null &&
                    this.PkgNo.Equals(input.PkgNo))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Parcels == input.Parcels ||
                    this.Parcels != null &&
                    input.Parcels != null &&
                    this.Parcels.SequenceEqual(input.Parcels)
                ) && 
                (
                    this.ServicePoint == input.ServicePoint ||
                    (this.ServicePoint != null &&
                    this.ServicePoint.Equals(input.ServicePoint))
                ) && 
                (
                    this.PickUp == input.PickUp ||
                    (this.PickUp != null &&
                    this.PickUp.Equals(input.PickUp))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.PaperlessTrade == input.PaperlessTrade ||
                    this.PaperlessTrade.Equals(input.PaperlessTrade)
                ) && 
                (
                    this.LabellessCode == input.LabellessCode ||
                    (this.LabellessCode != null &&
                    this.LabellessCode.Equals(input.LabellessCode))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    this.SourceType.Equals(input.SourceType)
                ) && 
                (
                    this.ReturnShipmentId == input.ReturnShipmentId ||
                    (this.ReturnShipmentId != null &&
                    this.ReturnShipmentId.Equals(input.ReturnShipmentId))
                ) && 
                (
                    this.OriginShipmentId == input.OriginShipmentId ||
                    (this.OriginShipmentId != null &&
                    this.OriginShipmentId.Equals(input.OriginShipmentId))
                ) && 
                (
                    this.CarrierInsurance == input.CarrierInsurance ||
                    (this.CarrierInsurance != null &&
                    this.CarrierInsurance.Equals(input.CarrierInsurance))
                ) && 
                (
                    this.WaybillReference == input.WaybillReference ||
                    (this.WaybillReference != null &&
                    this.WaybillReference.Equals(input.WaybillReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Contents != null)
                {
                    hashCode = (hashCode * 59) + this.Contents.GetHashCode();
                }
                if (this.TermOfTrade != null)
                {
                    hashCode = (hashCode * 59) + this.TermOfTrade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                if (this.Services != null)
                {
                    hashCode = (hashCode * 59) + this.Services.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.ServiceCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCodes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.PkgNo != null)
                {
                    hashCode = (hashCode * 59) + this.PkgNo.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Parcels != null)
                {
                    hashCode = (hashCode * 59) + this.Parcels.GetHashCode();
                }
                if (this.ServicePoint != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePoint.GetHashCode();
                }
                if (this.PickUp != null)
                {
                    hashCode = (hashCode * 59) + this.PickUp.GetHashCode();
                }
                if (this.BillTo != null)
                {
                    hashCode = (hashCode * 59) + this.BillTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaperlessTrade.GetHashCode();
                if (this.LabellessCode != null)
                {
                    hashCode = (hashCode * 59) + this.LabellessCode.GetHashCode();
                }
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceType.GetHashCode();
                if (this.ReturnShipmentId != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnShipmentId.GetHashCode();
                }
                if (this.OriginShipmentId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginShipmentId.GetHashCode();
                }
                if (this.CarrierInsurance != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierInsurance.GetHashCode();
                }
                if (this.WaybillReference != null)
                {
                    hashCode = (hashCode * 59) + this.WaybillReference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
