/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Label
    /// </summary>
    [DataContract(Name = "Label")]
    public partial class Label : IEquatable<Label>, IValidatableObject
    {
        /// <summary>
        /// File format for the returned data
        /// </summary>
        /// <value>File format for the returned data</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileFormatEnum
        {
            /// <summary>
            /// Enum Pdf for value: pdf
            /// </summary>
            [EnumMember(Value = "pdf")]
            Pdf = 1,

            /// <summary>
            /// Enum Png for value: png
            /// </summary>
            [EnumMember(Value = "png")]
            Png = 2,

            /// <summary>
            /// Enum Zpl for value: zpl
            /// </summary>
            [EnumMember(Value = "zpl")]
            Zpl = 3

        }


        /// <summary>
        /// File format for the returned data
        /// </summary>
        /// <value>File format for the returned data</value>
        /// <example>&quot;pdf&quot;</example>
        [DataMember(Name = "file_format", EmitDefaultValue = false)]
        public FileFormatEnum? FileFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        /// <param name="base64">Data encoded in Base64 format.</param>
        /// <param name="fileFormat">File format for the returned data.</param>
        public Label(string base64 = default(string), FileFormatEnum? fileFormat = default(FileFormatEnum?))
        {
            this.Base64 = base64;
            this.FileFormat = fileFormat;
        }

        /// <summary>
        /// Data encoded in Base64 format
        /// </summary>
        /// <value>Data encoded in Base64 format</value>
        /// <example>&quot;JVBERi0xLjMKJf//////AAAAAA...&quot;</example>
        [DataMember(Name = "base64", EmitDefaultValue = false)]
        public string Base64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Label {\n");
            sb.Append("  Base64: ").Append(Base64).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Label);
        }

        /// <summary>
        /// Returns true if Label instances are equal
        /// </summary>
        /// <param name="input">Instance of Label to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Label input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Base64 == input.Base64 ||
                    (this.Base64 != null &&
                    this.Base64.Equals(input.Base64))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    this.FileFormat.Equals(input.FileFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Base64 != null)
                {
                    hashCode = (hashCode * 59) + this.Base64.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
