/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// PaymentDetails
    /// </summary>
    [DataContract(Name = "PaymentDetails")]
    public partial class PaymentDetails : IEquatable<PaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="amountExcludingVat">Total price excluding taxes of the sales order..</param>
        /// <param name="amountIncludingVat">Total price including taxes of the sales order..</param>
        /// <param name="authorizedAmount">The amount authorized by the payment gateway..</param>
        /// <param name="currencyCode">ISO 4217 currency code of the order total..</param>
        /// <param name="vatAmount">Total amount of taxes for the order..</param>
        /// <param name="vatPercent">Average tax percentage..</param>
        /// <param name="paymentMethod">The method by which the order was paid..</param>
        /// <param name="transactionId">Transaction ID of the payment as specified by the associated payment gateway..</param>
        /// <param name="paymentGatewayId">ID of the provided payment gateway. Used to capture and void payments from Shipmondo..</param>
        public PaymentDetails(string amountExcludingVat = default(string), string amountIncludingVat = default(string), string authorizedAmount = default(string), string currencyCode = default(string), string vatAmount = default(string), string vatPercent = default(string), string paymentMethod = default(string), string transactionId = default(string), string paymentGatewayId = default(string))
        {
            this.AmountExcludingVat = amountExcludingVat;
            this.AmountIncludingVat = amountIncludingVat;
            this.AuthorizedAmount = authorizedAmount;
            this.CurrencyCode = currencyCode;
            this.VatAmount = vatAmount;
            this.VatPercent = vatPercent;
            this.PaymentMethod = paymentMethod;
            this.TransactionId = transactionId;
            this.PaymentGatewayId = paymentGatewayId;
        }

        /// <summary>
        /// Total price excluding taxes of the sales order.
        /// </summary>
        /// <value>Total price excluding taxes of the sales order.</value>
        /// <example>&quot;1600.0&quot;</example>
        [DataMember(Name = "amount_excluding_vat", EmitDefaultValue = false)]
        public string AmountExcludingVat { get; set; }

        /// <summary>
        /// Total price including taxes of the sales order.
        /// </summary>
        /// <value>Total price including taxes of the sales order.</value>
        /// <example>&quot;2000.0&quot;</example>
        [DataMember(Name = "amount_including_vat", EmitDefaultValue = false)]
        public string AmountIncludingVat { get; set; }

        /// <summary>
        /// The amount authorized by the payment gateway.
        /// </summary>
        /// <value>The amount authorized by the payment gateway.</value>
        /// <example>&quot;2000.0&quot;</example>
        [DataMember(Name = "authorized_amount", EmitDefaultValue = false)]
        public string AuthorizedAmount { get; set; }

        /// <summary>
        /// ISO 4217 currency code of the order total.
        /// </summary>
        /// <value>ISO 4217 currency code of the order total.</value>
        /// <example>&quot;DKK&quot;</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Total amount of taxes for the order.
        /// </summary>
        /// <value>Total amount of taxes for the order.</value>
        /// <example>&quot;400.0&quot;</example>
        [DataMember(Name = "vat_amount", EmitDefaultValue = false)]
        public string VatAmount { get; set; }

        /// <summary>
        /// Average tax percentage.
        /// </summary>
        /// <value>Average tax percentage.</value>
        /// <example>&quot;0.25&quot;</example>
        [DataMember(Name = "vat_percent", EmitDefaultValue = false)]
        public string VatPercent { get; set; }

        /// <summary>
        /// The method by which the order was paid.
        /// </summary>
        /// <value>The method by which the order was paid.</value>
        /// <example>&quot;quickpay&quot;</example>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Transaction ID of the payment as specified by the associated payment gateway.
        /// </summary>
        /// <value>Transaction ID of the payment as specified by the associated payment gateway.</value>
        /// <example>&quot;123456789&quot;</example>
        [DataMember(Name = "transaction_id", EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// ID of the provided payment gateway. Used to capture and void payments from Shipmondo.
        /// </summary>
        /// <value>ID of the provided payment gateway. Used to capture and void payments from Shipmondo.</value>
        /// <example>&quot;4012&quot;</example>
        [DataMember(Name = "payment_gateway_id", EmitDefaultValue = false)]
        public string PaymentGatewayId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetails {\n");
            sb.Append("  AmountExcludingVat: ").Append(AmountExcludingVat).Append("\n");
            sb.Append("  AmountIncludingVat: ").Append(AmountIncludingVat).Append("\n");
            sb.Append("  AuthorizedAmount: ").Append(AuthorizedAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  VatPercent: ").Append(VatPercent).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  PaymentGatewayId: ").Append(PaymentGatewayId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDetails);
        }

        /// <summary>
        /// Returns true if PaymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountExcludingVat == input.AmountExcludingVat ||
                    (this.AmountExcludingVat != null &&
                    this.AmountExcludingVat.Equals(input.AmountExcludingVat))
                ) && 
                (
                    this.AmountIncludingVat == input.AmountIncludingVat ||
                    (this.AmountIncludingVat != null &&
                    this.AmountIncludingVat.Equals(input.AmountIncludingVat))
                ) && 
                (
                    this.AuthorizedAmount == input.AuthorizedAmount ||
                    (this.AuthorizedAmount != null &&
                    this.AuthorizedAmount.Equals(input.AuthorizedAmount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.VatPercent == input.VatPercent ||
                    (this.VatPercent != null &&
                    this.VatPercent.Equals(input.VatPercent))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.PaymentGatewayId == input.PaymentGatewayId ||
                    (this.PaymentGatewayId != null &&
                    this.PaymentGatewayId.Equals(input.PaymentGatewayId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountExcludingVat.GetHashCode();
                }
                if (this.AmountIncludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountIncludingVat.GetHashCode();
                }
                if (this.AuthorizedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedAmount.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                if (this.VatPercent != null)
                {
                    hashCode = (hashCode * 59) + this.VatPercent.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.PaymentGatewayId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentGatewayId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
