/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// CreateDraftShipmentRequest
    /// </summary>
    [DataContract(Name = "CreateDraftShipmentRequest")]
    public partial class CreateDraftShipmentRequest : IEquatable<CreateDraftShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDraftShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDraftShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDraftShipmentRequest" /> class.
        /// </summary>
        /// <param name="smsNotification">True if SMS notification should be used when creating shipment. (default to false).</param>
        /// <param name="emailNotification">True if email notification should be used when creating shipment. (default to false).</param>
        /// <param name="orderId">The external order id for draft shipment. It will appear as a reference on the shipment created from the draft if no reference is set..</param>
        /// <param name="reference">The external reference for which the object has been created. It will appear as a reference on the shipment created from the draft..</param>
        /// <param name="source">The source of the draft shipment..</param>
        /// <param name="carrierCode">The code of the carrier that should be used when creating a shipment from the draft..</param>
        /// <param name="productCode">The code of the carrier product that should be used when creating a shipment from the draft..</param>
        /// <param name="serviceCodes">The codes of the carrier product services that should be used when creating a shipment from the draft..</param>
        /// <param name="shipmentTemplateId">ID of the shipment template that should be used when creating a shipment. It contains information such as carrier product, services, parcels, weight, and more..</param>
        /// <param name="returnShipmentTemplateId">ID of the provided return shipment template. Specifies the return product and services for the sales order..</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="servicePoint">servicePoint.</param>
        public CreateDraftShipmentRequest(bool smsNotification = false, bool emailNotification = false, string orderId = default(string), string reference = default(string), string source = default(string), string carrierCode = default(string), string productCode = default(string), string serviceCodes = default(string), int shipmentTemplateId = default(int), int returnShipmentTemplateId = default(int), SenderRequest sender = default(SenderRequest), ReceiverRequest receiver = default(ReceiverRequest), ServicePointSimple servicePoint = default(ServicePointSimple))
        {
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for CreateDraftShipmentRequest and cannot be null");
            }
            this.Sender = sender;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for CreateDraftShipmentRequest and cannot be null");
            }
            this.Receiver = receiver;
            this.SmsNotification = smsNotification;
            this.EmailNotification = emailNotification;
            this.OrderId = orderId;
            this.Reference = reference;
            this.Source = source;
            this.CarrierCode = carrierCode;
            this.ProductCode = productCode;
            this.ServiceCodes = serviceCodes;
            this.ShipmentTemplateId = shipmentTemplateId;
            this.ReturnShipmentTemplateId = returnShipmentTemplateId;
            this.ServicePoint = servicePoint;
        }

        /// <summary>
        /// True if SMS notification should be used when creating shipment.
        /// </summary>
        /// <value>True if SMS notification should be used when creating shipment.</value>
        [DataMember(Name = "sms_notification", EmitDefaultValue = true)]
        public bool SmsNotification { get; set; }

        /// <summary>
        /// True if email notification should be used when creating shipment.
        /// </summary>
        /// <value>True if email notification should be used when creating shipment.</value>
        [DataMember(Name = "email_notification", EmitDefaultValue = true)]
        public bool EmailNotification { get; set; }

        /// <summary>
        /// The external order id for draft shipment. It will appear as a reference on the shipment created from the draft if no reference is set.
        /// </summary>
        /// <value>The external order id for draft shipment. It will appear as a reference on the shipment created from the draft if no reference is set.</value>
        /// <example>&quot;1000002345&quot;</example>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The external reference for which the object has been created. It will appear as a reference on the shipment created from the draft.
        /// </summary>
        /// <value>The external reference for which the object has been created. It will appear as a reference on the shipment created from the draft.</value>
        /// <example>&quot;Webshop 5678&quot;</example>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// The source of the draft shipment.
        /// </summary>
        /// <value>The source of the draft shipment.</value>
        /// <example>&quot;API&quot;</example>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// The code of the carrier that should be used when creating a shipment from the draft.
        /// </summary>
        /// <value>The code of the carrier that should be used when creating a shipment from the draft.</value>
        /// <example>&quot;gls&quot;</example>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The code of the carrier product that should be used when creating a shipment from the draft.
        /// </summary>
        /// <value>The code of the carrier product that should be used when creating a shipment from the draft.</value>
        /// <example>&quot;GLSDK_SD&quot;</example>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// The codes of the carrier product services that should be used when creating a shipment from the draft.
        /// </summary>
        /// <value>The codes of the carrier product services that should be used when creating a shipment from the draft.</value>
        /// <example>&quot;EMAIL_NT,SMS_NT&quot;</example>
        [DataMember(Name = "service_codes", EmitDefaultValue = false)]
        public string ServiceCodes { get; set; }

        /// <summary>
        /// ID of the shipment template that should be used when creating a shipment. It contains information such as carrier product, services, parcels, weight, and more.
        /// </summary>
        /// <value>ID of the shipment template that should be used when creating a shipment. It contains information such as carrier product, services, parcels, weight, and more.</value>
        /// <example>710</example>
        [DataMember(Name = "shipment_template_id", EmitDefaultValue = false)]
        public int ShipmentTemplateId { get; set; }

        /// <summary>
        /// ID of the provided return shipment template. Specifies the return product and services for the sales order.
        /// </summary>
        /// <value>ID of the provided return shipment template. Specifies the return product and services for the sales order.</value>
        /// <example>710</example>
        [DataMember(Name = "return_shipment_template_id", EmitDefaultValue = false)]
        public int ReturnShipmentTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public SenderRequest Sender { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public ReceiverRequest Receiver { get; set; }

        /// <summary>
        /// Gets or Sets ServicePoint
        /// </summary>
        [DataMember(Name = "service_point", EmitDefaultValue = false)]
        public ServicePointSimple ServicePoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDraftShipmentRequest {\n");
            sb.Append("  SmsNotification: ").Append(SmsNotification).Append("\n");
            sb.Append("  EmailNotification: ").Append(EmailNotification).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ServiceCodes: ").Append(ServiceCodes).Append("\n");
            sb.Append("  ShipmentTemplateId: ").Append(ShipmentTemplateId).Append("\n");
            sb.Append("  ReturnShipmentTemplateId: ").Append(ReturnShipmentTemplateId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  ServicePoint: ").Append(ServicePoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDraftShipmentRequest);
        }

        /// <summary>
        /// Returns true if CreateDraftShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDraftShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDraftShipmentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SmsNotification == input.SmsNotification ||
                    this.SmsNotification.Equals(input.SmsNotification)
                ) && 
                (
                    this.EmailNotification == input.EmailNotification ||
                    this.EmailNotification.Equals(input.EmailNotification)
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ServiceCodes == input.ServiceCodes ||
                    (this.ServiceCodes != null &&
                    this.ServiceCodes.Equals(input.ServiceCodes))
                ) && 
                (
                    this.ShipmentTemplateId == input.ShipmentTemplateId ||
                    this.ShipmentTemplateId.Equals(input.ShipmentTemplateId)
                ) && 
                (
                    this.ReturnShipmentTemplateId == input.ReturnShipmentTemplateId ||
                    this.ReturnShipmentTemplateId.Equals(input.ReturnShipmentTemplateId)
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.ServicePoint == input.ServicePoint ||
                    (this.ServicePoint != null &&
                    this.ServicePoint.Equals(input.ServicePoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SmsNotification.GetHashCode();
                hashCode = (hashCode * 59) + this.EmailNotification.GetHashCode();
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.ServiceCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCodes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShipmentTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnShipmentTemplateId.GetHashCode();
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.ServicePoint != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePoint.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
