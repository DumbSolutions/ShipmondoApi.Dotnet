/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Custom details used to generate proforma invoice or sent directly to the carrier. This object is only used for shipments where customs declaration is required.
    /// </summary>
    [DataContract(Name = "CustomsRequest")]
    public partial class CustomsRequest : IEquatable<CustomsRequest>, IValidatableObject
    {
        /// <summary>
        /// Reason for exporting the goods.
        /// </summary>
        /// <value>Reason for exporting the goods.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExportReasonEnum
        {
            /// <summary>
            /// Enum SaleOfGoods for value: sale_of_goods
            /// </summary>
            [EnumMember(Value = "sale_of_goods")]
            SaleOfGoods = 1,

            /// <summary>
            /// Enum Gift for value: gift
            /// </summary>
            [EnumMember(Value = "gift")]
            Gift = 2,

            /// <summary>
            /// Enum Documents for value: documents
            /// </summary>
            [EnumMember(Value = "documents")]
            Documents = 3,

            /// <summary>
            /// Enum CommercialSamples for value: commercial_samples
            /// </summary>
            [EnumMember(Value = "commercial_samples")]
            CommercialSamples = 4,

            /// <summary>
            /// Enum ReturnedGoods for value: returned_goods
            /// </summary>
            [EnumMember(Value = "returned_goods")]
            ReturnedGoods = 5,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 6

        }


        /// <summary>
        /// Reason for exporting the goods.
        /// </summary>
        /// <value>Reason for exporting the goods.</value>
        /// <example>&quot;other&quot;</example>
        [DataMember(Name = "export_reason", EmitDefaultValue = false)]
        public ExportReasonEnum? ExportReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsRequest" /> class.
        /// </summary>
        /// <param name="exportReason">Reason for exporting the goods. (default to ExportReasonEnum.Other).</param>
        /// <param name="termOfTrade">Incoterm for the shipments, e.g., DDP when customs should be paid by the sender. (default to &quot;DAP&quot;).</param>
        /// <param name="currencyCode">Currency code for prices declared in goods.</param>
        /// <param name="billedToCustomInvoiceText">A custom text for the shipment importer. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Importer\&quot; if filled..</param>
        /// <param name="senderCustomInvoiceText">A custom text for the shipment sender. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Sender\&quot; if filled..</param>
        /// <param name="receiverCustomInvoiceText">A custom text for the shipment receiver. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Delivery to\&quot; if filled..</param>
        /// <param name="goods">goods.</param>
        public CustomsRequest(ExportReasonEnum? exportReason = ExportReasonEnum.Other, string termOfTrade = @"DAP", string currencyCode = default(string), string billedToCustomInvoiceText = default(string), string senderCustomInvoiceText = default(string), string receiverCustomInvoiceText = default(string), List<CustomsGood> goods = default(List<CustomsGood>))
        {
            this.ExportReason = exportReason;
            // use default value if no "termOfTrade" provided
            this.TermOfTrade = termOfTrade ?? @"DAP";
            this.CurrencyCode = currencyCode;
            this.BilledToCustomInvoiceText = billedToCustomInvoiceText;
            this.SenderCustomInvoiceText = senderCustomInvoiceText;
            this.ReceiverCustomInvoiceText = receiverCustomInvoiceText;
            this.Goods = goods;
        }

        /// <summary>
        /// Incoterm for the shipments, e.g., DDP when customs should be paid by the sender.
        /// </summary>
        /// <value>Incoterm for the shipments, e.g., DDP when customs should be paid by the sender.</value>
        /// <example>&quot;DAP&quot;</example>
        [DataMember(Name = "term_of_trade", EmitDefaultValue = false)]
        public string TermOfTrade { get; set; }

        /// <summary>
        /// Currency code for prices declared in goods
        /// </summary>
        /// <value>Currency code for prices declared in goods</value>
        /// <example>&quot;DKK&quot;</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// A custom text for the shipment importer. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Importer\&quot; if filled.
        /// </summary>
        /// <value>A custom text for the shipment importer. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Importer\&quot; if filled.</value>
        /// <example>&quot;Key code: ABC123&quot;</example>
        [DataMember(Name = "billed_to_custom_invoice_text", EmitDefaultValue = false)]
        public string BilledToCustomInvoiceText { get; set; }

        /// <summary>
        /// A custom text for the shipment sender. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Sender\&quot; if filled.
        /// </summary>
        /// <value>A custom text for the shipment sender. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Sender\&quot; if filled.</value>
        /// <example>&quot;Key code: ABC123&quot;</example>
        [DataMember(Name = "sender_custom_invoice_text", EmitDefaultValue = false)]
        public string SenderCustomInvoiceText { get; set; }

        /// <summary>
        /// A custom text for the shipment receiver. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Delivery to\&quot; if filled.
        /// </summary>
        /// <value>A custom text for the shipment receiver. Will not be transmitted to carriers, but will appear on proforma/commercial invoice under \&quot;Delivery to\&quot; if filled.</value>
        /// <example>&quot;Key code: ABC123&quot;</example>
        [DataMember(Name = "receiver_custom_invoice_text", EmitDefaultValue = false)]
        public string ReceiverCustomInvoiceText { get; set; }

        /// <summary>
        /// Gets or Sets Goods
        /// </summary>
        [DataMember(Name = "goods", EmitDefaultValue = false)]
        public List<CustomsGood> Goods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomsRequest {\n");
            sb.Append("  ExportReason: ").Append(ExportReason).Append("\n");
            sb.Append("  TermOfTrade: ").Append(TermOfTrade).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  BilledToCustomInvoiceText: ").Append(BilledToCustomInvoiceText).Append("\n");
            sb.Append("  SenderCustomInvoiceText: ").Append(SenderCustomInvoiceText).Append("\n");
            sb.Append("  ReceiverCustomInvoiceText: ").Append(ReceiverCustomInvoiceText).Append("\n");
            sb.Append("  Goods: ").Append(Goods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomsRequest);
        }

        /// <summary>
        /// Returns true if CustomsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExportReason == input.ExportReason ||
                    this.ExportReason.Equals(input.ExportReason)
                ) && 
                (
                    this.TermOfTrade == input.TermOfTrade ||
                    (this.TermOfTrade != null &&
                    this.TermOfTrade.Equals(input.TermOfTrade))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.BilledToCustomInvoiceText == input.BilledToCustomInvoiceText ||
                    (this.BilledToCustomInvoiceText != null &&
                    this.BilledToCustomInvoiceText.Equals(input.BilledToCustomInvoiceText))
                ) && 
                (
                    this.SenderCustomInvoiceText == input.SenderCustomInvoiceText ||
                    (this.SenderCustomInvoiceText != null &&
                    this.SenderCustomInvoiceText.Equals(input.SenderCustomInvoiceText))
                ) && 
                (
                    this.ReceiverCustomInvoiceText == input.ReceiverCustomInvoiceText ||
                    (this.ReceiverCustomInvoiceText != null &&
                    this.ReceiverCustomInvoiceText.Equals(input.ReceiverCustomInvoiceText))
                ) && 
                (
                    this.Goods == input.Goods ||
                    this.Goods != null &&
                    input.Goods != null &&
                    this.Goods.SequenceEqual(input.Goods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ExportReason.GetHashCode();
                if (this.TermOfTrade != null)
                {
                    hashCode = (hashCode * 59) + this.TermOfTrade.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.BilledToCustomInvoiceText != null)
                {
                    hashCode = (hashCode * 59) + this.BilledToCustomInvoiceText.GetHashCode();
                }
                if (this.SenderCustomInvoiceText != null)
                {
                    hashCode = (hashCode * 59) + this.SenderCustomInvoiceText.GetHashCode();
                }
                if (this.ReceiverCustomInvoiceText != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiverCustomInvoiceText.GetHashCode();
                }
                if (this.Goods != null)
                {
                    hashCode = (hashCode * 59) + this.Goods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
