/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// OrderLineUpdate
    /// </summary>
    [DataContract(Name = "OrderLineUpdate")]
    public partial class OrderLineUpdate : IEquatable<OrderLineUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineUpdate" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the object. Used for identifying the specific line when updating order lines..</param>
        /// <param name="quantity">The quantity of the item in the order.</param>
        /// <param name="unitPriceExcludingVat">Price excluding taxes of a single item in the order line.</param>
        /// <param name="vatPercent">Tax percentage for the order line.</param>
        /// <param name="unitWeight">The weight of a single item in the order line..</param>
        public OrderLineUpdate(int id = default(int), decimal quantity = default(decimal), string unitPriceExcludingVat = default(string), string vatPercent = default(string), int unitWeight = default(int))
        {
            this.Id = id;
            this.Quantity = quantity;
            this.UnitPriceExcludingVat = unitPriceExcludingVat;
            this.VatPercent = vatPercent;
            this.UnitWeight = unitWeight;
        }

        /// <summary>
        /// Unique identifier of the object. Used for identifying the specific line when updating order lines.
        /// </summary>
        /// <value>Unique identifier of the object. Used for identifying the specific line when updating order lines.</value>
        /// <example>1234</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The quantity of the item in the order
        /// </summary>
        /// <value>The quantity of the item in the order</value>
        /// <example>2</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Price excluding taxes of a single item in the order line
        /// </summary>
        /// <value>Price excluding taxes of a single item in the order line</value>
        /// <example>&quot;800.0&quot;</example>
        [DataMember(Name = "unit_price_excluding_vat", EmitDefaultValue = false)]
        public string UnitPriceExcludingVat { get; set; }

        /// <summary>
        /// Tax percentage for the order line
        /// </summary>
        /// <value>Tax percentage for the order line</value>
        /// <example>&quot;0.25&quot;</example>
        [DataMember(Name = "vat_percent", EmitDefaultValue = false)]
        public string VatPercent { get; set; }

        /// <summary>
        /// The weight of a single item in the order line.
        /// </summary>
        /// <value>The weight of a single item in the order line.</value>
        /// <example>2000</example>
        [DataMember(Name = "unit_weight", EmitDefaultValue = false)]
        public int UnitWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderLineUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPriceExcludingVat: ").Append(UnitPriceExcludingVat).Append("\n");
            sb.Append("  VatPercent: ").Append(VatPercent).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLineUpdate);
        }

        /// <summary>
        /// Returns true if OrderLineUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.UnitPriceExcludingVat == input.UnitPriceExcludingVat ||
                    (this.UnitPriceExcludingVat != null &&
                    this.UnitPriceExcludingVat.Equals(input.UnitPriceExcludingVat))
                ) && 
                (
                    this.VatPercent == input.VatPercent ||
                    (this.VatPercent != null &&
                    this.VatPercent.Equals(input.VatPercent))
                ) && 
                (
                    this.UnitWeight == input.UnitWeight ||
                    this.UnitWeight.Equals(input.UnitWeight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.UnitPriceExcludingVat != null)
                {
                    hashCode = (hashCode * 59) + this.UnitPriceExcludingVat.GetHashCode();
                }
                if (this.VatPercent != null)
                {
                    hashCode = (hashCode * 59) + this.VatPercent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitWeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
