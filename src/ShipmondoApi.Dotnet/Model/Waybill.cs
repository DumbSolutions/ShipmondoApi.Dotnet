/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Waybill
    /// </summary>
    [DataContract(Name = "Waybill")]
    public partial class Waybill : IEquatable<Waybill>, IValidatableObject
    {
        /// <summary>
        /// Current status of the waybill. If open, more shipments can be added to the waybill.
        /// </summary>
        /// <value>Current status of the waybill. If open, more shipments can be added to the waybill.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Closed for value: closed
            /// </summary>
            [EnumMember(Value = "closed")]
            Closed = 2

        }


        /// <summary>
        /// Current status of the waybill. If open, more shipments can be added to the waybill.
        /// </summary>
        /// <value>Current status of the waybill. If open, more shipments can be added to the waybill.</value>
        /// <example>&quot;closed&quot;</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Waybill" /> class.
        /// </summary>
        /// <param name="id">ID of the waybill. Used when referencing a specific waybill..</param>
        /// <param name="reference">Carrier&#39;s reference of the waybill..</param>
        /// <param name="status">Current status of the waybill. If open, more shipments can be added to the waybill..</param>
        /// <param name="carrierCode">Carrier code, identifying which carrier the waybill is created for..</param>
        /// <param name="customerNumber">The customer number that is attached to the waybill..</param>
        /// <param name="createdAt">When the waybill was created..</param>
        /// <param name="sender">sender.</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="loading">loading.</param>
        /// <param name="delivery">delivery.</param>
        /// <param name="shipment">shipment.</param>
        /// <param name="invoiceBase64">Base64-encoded string of invoice as PDF.</param>
        /// <param name="base64">Base64-encoded string of waybill as PDF.</param>
        public Waybill(int id = default(int), string reference = default(string), StatusEnum? status = default(StatusEnum?), string carrierCode = default(string), string customerNumber = default(string), DateTime createdAt = default(DateTime), WaybillSender sender = default(WaybillSender), WaybillReceiver receiver = default(WaybillReceiver), WaybillLoading loading = default(WaybillLoading), WaybillDelivery delivery = default(WaybillDelivery), WaybillShipment shipment = default(WaybillShipment), string invoiceBase64 = default(string), string base64 = default(string))
        {
            this.Id = id;
            this.Reference = reference;
            this.Status = status;
            this.CarrierCode = carrierCode;
            this.CustomerNumber = customerNumber;
            this.CreatedAt = createdAt;
            this.Sender = sender;
            this.Receiver = receiver;
            this.Loading = loading;
            this.Delivery = delivery;
            this.Shipment = shipment;
            this.InvoiceBase64 = invoiceBase64;
            this.Base64 = base64;
        }

        /// <summary>
        /// ID of the waybill. Used when referencing a specific waybill.
        /// </summary>
        /// <value>ID of the waybill. Used when referencing a specific waybill.</value>
        /// <example>23</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Carrier&#39;s reference of the waybill.
        /// </summary>
        /// <value>Carrier&#39;s reference of the waybill.</value>
        /// <example>&quot;CS000000000NO&quot;</example>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Carrier code, identifying which carrier the waybill is created for.
        /// </summary>
        /// <value>Carrier code, identifying which carrier the waybill is created for.</value>
        /// <example>&quot;bring&quot;</example>
        [DataMember(Name = "carrier_code", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The customer number that is attached to the waybill.
        /// </summary>
        /// <value>The customer number that is attached to the waybill.</value>
        /// <example>&quot;123456789&quot;</example>
        [DataMember(Name = "customer_number", EmitDefaultValue = false)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// When the waybill was created.
        /// </summary>
        /// <value>When the waybill was created.</value>
        /// <example>&quot;2018-06-16T06:25:44.557Z&quot;</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public WaybillSender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", EmitDefaultValue = false)]
        public WaybillReceiver Receiver { get; set; }

        /// <summary>
        /// Gets or Sets Loading
        /// </summary>
        [DataMember(Name = "loading", EmitDefaultValue = false)]
        public WaybillLoading Loading { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [DataMember(Name = "delivery", EmitDefaultValue = false)]
        public WaybillDelivery Delivery { get; set; }

        /// <summary>
        /// Gets or Sets Shipment
        /// </summary>
        [DataMember(Name = "shipment", EmitDefaultValue = false)]
        public WaybillShipment Shipment { get; set; }

        /// <summary>
        /// Base64-encoded string of invoice as PDF
        /// </summary>
        /// <value>Base64-encoded string of invoice as PDF</value>
        /// <example>&quot;...&quot;</example>
        [DataMember(Name = "invoice_base64", EmitDefaultValue = false)]
        public string InvoiceBase64 { get; set; }

        /// <summary>
        /// Base64-encoded string of waybill as PDF
        /// </summary>
        /// <value>Base64-encoded string of waybill as PDF</value>
        /// <example>&quot;...&quot;</example>
        [DataMember(Name = "base64", EmitDefaultValue = false)]
        public string Base64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Waybill {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Loading: ").Append(Loading).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Shipment: ").Append(Shipment).Append("\n");
            sb.Append("  InvoiceBase64: ").Append(InvoiceBase64).Append("\n");
            sb.Append("  Base64: ").Append(Base64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Waybill);
        }

        /// <summary>
        /// Returns true if Waybill instances are equal
        /// </summary>
        /// <param name="input">Instance of Waybill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Waybill input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Loading == input.Loading ||
                    (this.Loading != null &&
                    this.Loading.Equals(input.Loading))
                ) && 
                (
                    this.Delivery == input.Delivery ||
                    (this.Delivery != null &&
                    this.Delivery.Equals(input.Delivery))
                ) && 
                (
                    this.Shipment == input.Shipment ||
                    (this.Shipment != null &&
                    this.Shipment.Equals(input.Shipment))
                ) && 
                (
                    this.InvoiceBase64 == input.InvoiceBase64 ||
                    (this.InvoiceBase64 != null &&
                    this.InvoiceBase64.Equals(input.InvoiceBase64))
                ) && 
                (
                    this.Base64 == input.Base64 ||
                    (this.Base64 != null &&
                    this.Base64.Equals(input.Base64))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CarrierCode != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierCode.GetHashCode();
                }
                if (this.CustomerNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Receiver != null)
                {
                    hashCode = (hashCode * 59) + this.Receiver.GetHashCode();
                }
                if (this.Loading != null)
                {
                    hashCode = (hashCode * 59) + this.Loading.GetHashCode();
                }
                if (this.Delivery != null)
                {
                    hashCode = (hashCode * 59) + this.Delivery.GetHashCode();
                }
                if (this.Shipment != null)
                {
                    hashCode = (hashCode * 59) + this.Shipment.GetHashCode();
                }
                if (this.InvoiceBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceBase64.GetHashCode();
                }
                if (this.Base64 != null)
                {
                    hashCode = (hashCode * 59) + this.Base64.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
