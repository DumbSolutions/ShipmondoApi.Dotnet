/*
 * Shipmondo API
 *
 * A unofficial thirdparty library for shipmondo api for dotnet
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ShipmondoApi.Dotnet.Client.OpenAPIDateConverter;

namespace ShipmondoApi.Dotnet.Model
{
    /// <summary>
    /// Sender address for the object
    /// </summary>
    [DataContract(Name = "ShipmentSender")]
    public partial class ShipmentSender : IEquatable<ShipmentSender>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSender" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentSender() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSender" /> class.
        /// </summary>
        /// <param name="name">Name of the sender. Can be either a company name or the name of a private person. (required).</param>
        /// <param name="attention">Attention of the sender. If the sender is a company, it is the contact person..</param>
        /// <param name="address1">Address of the sender, including address number. (required).</param>
        /// <param name="address2">address2.</param>
        /// <param name="zipcode">Zip code of the address. (required).</param>
        /// <param name="city">Name of the city that the zip code refers to. (required).</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code of the sender address. (required).</param>
        /// <param name="vatId">Sender&#39;s VAT ID in receiver country, e.g., VOEC for Norway or GB EORI for Great Britain..</param>
        /// <param name="email">Email address of the sender.</param>
        /// <param name="mobile">Mobile number of the sender.</param>
        /// <param name="telephone">Landline phone number of the sender.</param>
        public ShipmentSender(string name = default(string), string attention = default(string), string address1 = default(string), string address2 = default(string), string zipcode = default(string), string city = default(string), string countryCode = default(string), string vatId = default(string), string email = default(string), string mobile = default(string), string telephone = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ShipmentSender and cannot be null");
            }
            this.Name = name;
            // to ensure "address1" is required (not null)
            if (address1 == null)
            {
                throw new ArgumentNullException("address1 is a required property for ShipmentSender and cannot be null");
            }
            this.Address1 = address1;
            // to ensure "zipcode" is required (not null)
            if (zipcode == null)
            {
                throw new ArgumentNullException("zipcode is a required property for ShipmentSender and cannot be null");
            }
            this.Zipcode = zipcode;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for ShipmentSender and cannot be null");
            }
            this.City = city;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for ShipmentSender and cannot be null");
            }
            this.CountryCode = countryCode;
            this.Attention = attention;
            this.Address2 = address2;
            this.VatId = vatId;
            this.Email = email;
            this.Mobile = mobile;
            this.Telephone = telephone;
        }

        /// <summary>
        /// Name of the sender. Can be either a company name or the name of a private person.
        /// </summary>
        /// <value>Name of the sender. Can be either a company name or the name of a private person.</value>
        /// <example>&quot;Min Virksomhed ApS&quot;</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Attention of the sender. If the sender is a company, it is the contact person.
        /// </summary>
        /// <value>Attention of the sender. If the sender is a company, it is the contact person.</value>
        /// <example>&quot;Lene Hansen&quot;</example>
        [DataMember(Name = "attention", EmitDefaultValue = false)]
        public string Attention { get; set; }

        /// <summary>
        /// Address of the sender, including address number.
        /// </summary>
        /// <value>Address of the sender, including address number.</value>
        /// <example>&quot;Strandvejen 6B&quot;</example>
        [DataMember(Name = "address1", IsRequired = true, EmitDefaultValue = true)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name = "address2", EmitDefaultValue = false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Zip code of the address.
        /// </summary>
        /// <value>Zip code of the address.</value>
        /// <example>&quot;5240&quot;</example>
        [DataMember(Name = "zipcode", IsRequired = true, EmitDefaultValue = true)]
        public string Zipcode { get; set; }

        /// <summary>
        /// Name of the city that the zip code refers to.
        /// </summary>
        /// <value>Name of the city that the zip code refers to.</value>
        /// <example>&quot;Odense NÃ˜&quot;</example>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 country code of the sender address.
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code of the sender address.</value>
        /// <example>&quot;DK&quot;</example>
        [DataMember(Name = "country_code", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Sender&#39;s VAT ID in receiver country, e.g., VOEC for Norway or GB EORI for Great Britain.
        /// </summary>
        /// <value>Sender&#39;s VAT ID in receiver country, e.g., VOEC for Norway or GB EORI for Great Britain.</value>
        /// <example>&quot;5323471&quot;</example>
        [DataMember(Name = "vat_id", EmitDefaultValue = false)]
        public string VatId { get; set; }

        /// <summary>
        /// Email address of the sender
        /// </summary>
        /// <value>Email address of the sender</value>
        /// <example>&quot;info@minvirksomhed.dk&quot;</example>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Mobile number of the sender
        /// </summary>
        /// <value>Mobile number of the sender</value>
        /// <example>&quot;70400407&quot;</example>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public string Mobile { get; set; }

        /// <summary>
        /// Landline phone number of the sender
        /// </summary>
        /// <value>Landline phone number of the sender</value>
        /// <example>&quot;70400407&quot;</example>
        [DataMember(Name = "telephone", EmitDefaultValue = false)]
        public string Telephone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentSender {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attention: ").Append(Attention).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentSender);
        }

        /// <summary>
        /// Returns true if ShipmentSender instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentSender to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentSender input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Attention == input.Attention ||
                    (this.Attention != null &&
                    this.Attention.Equals(input.Attention))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.VatId == input.VatId ||
                    (this.VatId != null &&
                    this.VatId.Equals(input.VatId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Attention != null)
                {
                    hashCode = (hashCode * 59) + this.Attention.GetHashCode();
                }
                if (this.Address1 != null)
                {
                    hashCode = (hashCode * 59) + this.Address1.GetHashCode();
                }
                if (this.Address2 != null)
                {
                    hashCode = (hashCode * 59) + this.Address2.GetHashCode();
                }
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.VatId != null)
                {
                    hashCode = (hashCode * 59) + this.VatId.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.Telephone != null)
                {
                    hashCode = (hashCode * 59) + this.Telephone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
